<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Karol Kuczmarski's Blog</title><link href="http://xion.io/" rel="alternate"></link><link href="http://xion.io/feeds/all-en.atom.xml" rel="self"></link><id>http://xion.io/</id><updated>2017-12-16T21:17:00-08:00</updated><entry><title>Terminating a Stream inÂ Rust</title><link href="http://xion.io/post/code/rust-stream-terminate.html" rel="alternate"></link><updated>2017-12-16T21:17:00-08:00</updated><author><name>Karol Kuczmarski</name></author><id>tag:xion.io,2017-12-16:post/code/rust-stream-terminate.html</id><summary type="html">&lt;p&gt;Here&amp;#8217;s a little trick that may be useful in dealing with
&lt;a href="https://docs.rs/futures/0.1.17/futures/stream/trait.Stream.html"&gt;asynchronous &lt;code&gt;Stream&lt;/code&gt;s&lt;/a&gt; in&amp;nbsp;Rust.&lt;/p&gt;
&lt;p&gt;When you consume a &lt;code&gt;Stream&lt;/code&gt; using
&lt;a href="https://docs.rs/futures/0.1.17/futures/stream/trait.Stream.html#method.for_each"&gt;the &lt;code&gt;for_each&lt;/code&gt; method&lt;/a&gt;,
its default behavior is to finish early should an error be produced by the&amp;nbsp;stream:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;futures&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;prelude&lt;/span&gt;&lt;span class="o"&gt;::*&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;futures&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tokio_core&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;reactor&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Core&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;iter_result&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vec&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Err&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)]);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;for_each&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;println&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(())&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In more precise terms, it means that
&lt;a href="https://docs.rs/futures/0.1.17/futures/future/trait.Future.html"&gt;the &lt;code&gt;Future&lt;/code&gt;&lt;/a&gt;
returned by &lt;code&gt;for_each&lt;/code&gt; will resolve with the first error
from the underlying&amp;nbsp;stream:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// Prints 1, 2, and then panics with &amp;quot;false&amp;quot;.&lt;/span&gt;
&lt;span class="n"&gt;Core&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;unwrap&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fut&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For most purposes, this is perfectly alright;
errors are generally meant to propagate, after&amp;nbsp;all.&lt;/p&gt;
&lt;p&gt;Certain &lt;em&gt;kinds&lt;/em&gt; of errors, however, are better off silenced.
Perhaps they are expected to pop up during normal program operation,
or maybe their occurrence should merely &lt;em&gt;affect&lt;/em&gt; program execution in a particular way,
and not halt it outright.
In a simple case like above, you can of course check what &lt;code&gt;for_each&lt;/code&gt; itself has returned,
but that doesn&amp;#8217;t scale to building larger &lt;code&gt;Stream&lt;/code&gt; pipelines.&lt;/p&gt;
&lt;p&gt;I encountered a situation like this myself when using
&lt;a href="https://docs.rs/crate/hubcaps/0.4.2"&gt;the &lt;em&gt;hubcaps&lt;/em&gt; library&lt;/a&gt;.
The code I was writing was meant to
&lt;a href="https://docs.rs/hubcaps/0.4.2/hubcaps/search/struct.SearchIssues.html#method.iter"&gt;search for GitHub issues&lt;/a&gt;
within a specific repository.
In GitHub &lt;span class="caps"&gt;API&lt;/span&gt;, this is accomplished by sending a search query like &lt;code&gt;repo:$OWNER/$NAME&lt;/code&gt;,
which may result in a rather obscure &lt;span class="caps"&gt;HTTP&lt;/span&gt; error (&lt;a href="https://httpstatuses.com/422"&gt;422 Unprocessable Entity&lt;/a&gt;)
if the given repository doesn&amp;#8217;t actually exist.
But I didn&amp;#8217;t care about this error; should it occur, I&amp;#8217;d simply return an empty stream,
because doing so was more convenient for the larger bit of logic that was consuming&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;Unfortunately, the &lt;code&gt;Stream&lt;/code&gt; trait offers no interface that&amp;#8217;d target this use case.
There are only a few methods that even allow to look at errors mid-stream,
and even fewer that can end it prematurely.
On the flip side, at least we don&amp;#8217;t have to consider &lt;em&gt;too&lt;/em&gt; many combinations
when looking for the solution&amp;nbsp;;)&lt;/p&gt;
&lt;p&gt;Indeed, it seems there are only two &lt;code&gt;Stream&lt;/code&gt; methods that are worthy of our&amp;nbsp;attention:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.rs/futures/0.1.17/futures/stream/trait.Stream.html#method.then"&gt;&lt;code&gt;Stream::then&lt;/code&gt;&lt;/a&gt;,
  because it allows for a closure to receive all stream values (items &lt;em&gt;and&lt;/em&gt;&amp;nbsp;errors)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.rs/futures/0.1.17/futures/stream/trait.Stream.html#method.take_while"&gt;&lt;code&gt;Stream::take_while&lt;/code&gt;&lt;/a&gt;,
  because it accepts a closure that can end the stream early (but only based on items, not&amp;nbsp;errors)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Combining them both, we arrive at the following&amp;nbsp;recipe:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Inside a &lt;code&gt;.then&lt;/code&gt; closure, look for &lt;code&gt;Err&lt;/code&gt;ors that you consider non-fatal
  and replace them with a special item value.
  The natural choice for such a value is &lt;code&gt;None&lt;/code&gt;.
  As a side effect, this forces us to convert the regular (&amp;#8220;successful&amp;#8221;) &lt;code&gt;item&lt;/code&gt;s into &lt;code&gt;Some(item)&lt;/code&gt;,
  effectively transforming a &lt;code&gt;Stream&amp;lt;Item=T&amp;gt;&lt;/code&gt; into &lt;code&gt;Stream&amp;lt;Item=Option&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Looks for the special value (i.e. &lt;code&gt;None&lt;/code&gt;) in the &lt;code&gt;.take_while&lt;/code&gt; closure
  and terminate the stream when it&amp;#8217;s been&amp;nbsp;found.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Finally, convert the wrapped items back into their original form using &lt;code&gt;.map&lt;/code&gt;,
  thus giving us back a &lt;code&gt;Stream&lt;/code&gt; of &lt;code&gt;T&lt;/code&gt;&lt;span class="quo"&gt;&amp;#8216;&lt;/span&gt;s.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Applying this technique to our initial example,
we get something that looks like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;iter_result&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vec&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Err&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nb"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// no-op passthrough of items&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nb"&gt;Err&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// non-fatal error, terminate the stream&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nb"&gt;Err&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Err&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;// no-op passthrough of other errors&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;take_while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;future&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_some&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;unwrap&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If we now try to consume this stream like&amp;nbsp;before:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Core&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;for_each&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;println&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(())&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;it will still end after the first two items,
but without producing any errors&amp;nbsp;afterwards.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;For a more reusable version of the trick, you can check
&lt;a href="https://play.rust-lang.org/?gist=1bf2199460258be6674c9c7a7a157f50&amp;amp;version=stable"&gt;this gist&lt;/a&gt;;
it adds a &lt;code&gt;Stream::take_while_err&lt;/code&gt; method through an &lt;a href="http://xion.io/post/code/rust-extension-traits.html"&gt;extension trait&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This isn&amp;#8217;t a perfect solution, however, because it requires &lt;code&gt;Box&lt;/code&gt;ing even on nightly Rust&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;.
We can fix that by introducing a dedicated &lt;code&gt;TakeWhileErr&lt;/code&gt; stream type,
similarly to what native &lt;code&gt;Stream&lt;/code&gt; methods do.
I leave that as an exercise for the reader&amp;nbsp;;-)&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;This is due to a limitation in &lt;a href="https://github.com/rust-lang/rust/issues/34511"&gt;the &lt;code&gt;impl Trait&lt;/code&gt; feature&lt;/a&gt;
which prevents it from being used as a return type of trait methods.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="Rust"></category><category term="streams"></category><category term="Tokio"></category><category term="async"></category></entry><entry><title>Recap of the gishtÂ project</title><link href="http://xion.io/post/programming/gisht-recap.html" rel="alternate"></link><updated>2017-11-24T17:52:00+00:00</updated><author><name>Karol Kuczmarski</name></author><id>tag:xion.io,2017-11-24:post/programming/gisht-recap.html</id><summary type="html">&lt;p&gt;In this post, I want to discuss some of the experiences I had with a project
that I recently finished, &lt;a href="https://github.com/Xion/gisht"&gt;&lt;em&gt;gisht&lt;/em&gt;&lt;/a&gt;.
By &amp;#8220;finished&amp;#8221; I mean that I don&amp;#8217;t anticipate developing any new major features for it,
though smaller things, bug fixes, or non-code stuff, is of course still very&amp;nbsp;possible.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m thinking this is as much &amp;#8220;done&amp;#8221; as most software projects can ever hope to be.
Thus, it is probably the best time for a recap / summary / postmortem / etc. &amp;#8212;
something to recount the lessons learned, and assess the choices&amp;nbsp;made.&lt;/p&gt;
&lt;h4&gt;Some&amp;nbsp;context&lt;/h4&gt;
&lt;p&gt;The original purpose of &lt;em&gt;gisht&lt;/em&gt; was to facilitate download &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; execution of GitHub gists
straight from the command&amp;nbsp;line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;gisht Xion/git-outgoing  &lt;span class="c"&gt;# run the https://gist.github.com/Xion/git-outgoing gist&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I initially wrote &lt;a href="https://github.com/Xion/gisht.py"&gt;its first version in Python&lt;/a&gt;
because I&amp;#8217;ve accumulated a sizable number of small &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; useful scripts
(for Git, Unix, Python, etc.) which were all posted as gists.
Sure, I could download them manually to &lt;code&gt;~/bin&lt;/code&gt; every time I used a new machine
but that&amp;#8217;s rather cumbersome, and I&amp;#8217;m quite&amp;nbsp;lazy.&lt;/p&gt;
&lt;p&gt;Well, lazy &lt;em&gt;and&lt;/em&gt; impatient :)
I noticed pretty fast that the speed tax of Python
is basically unacceptable for a program like &lt;em&gt;gisht&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;What I&amp;#8217;m referring to here is not the speed of code execution, however,
but only the &lt;em&gt;startup time&lt;/em&gt; of Python interpreter.
Irrespective of the machine, operating system, or language version,
it doesn&amp;#8217;t seem to go lower than about one hundred milliseconds;
empirically, it&amp;#8217;s often 2 or 3 times higher than that.
For the common case of finding a cached gist (no downloads)
and doing a simple &lt;code&gt;fork&lt;/code&gt;+&lt;code&gt;exec&lt;/code&gt;,
this startup time was very noticeable and extremely jarring.
It also precluded some more sophisticated uses for &lt;em&gt;gisht&lt;/em&gt;,
like putting its invocation into the shell&amp;#8217;s &lt;code&gt;$PROMPT&lt;/code&gt;&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h4&gt;Speed:&amp;nbsp;delivered&lt;/h4&gt;
&lt;p&gt;And so the obvious solution emerged:
let&amp;#8217;s &lt;a href="https://transitiontech.ca/random/RIIR"&gt;rewrite it in Rust&lt;/a&gt;!&amp;#8230;&lt;/p&gt;
&lt;p&gt;Because if I&amp;#8217;m executing code straight from the internet,
I should at least do it in a &lt;em&gt;safe&lt;/em&gt;&amp;nbsp;language.&lt;/p&gt;
&lt;p&gt;But jokes aside, it is obvious that a language compiling to native code
is likely a good pick if you want to optimize for startup speed.
So while the choice of Rust was in large part educational
(&lt;em&gt;gisht&lt;/em&gt; was one of my first projects to be written in it),
it definitely hasn&amp;#8217;t disappointed&amp;nbsp;there.&lt;/p&gt;
&lt;p&gt;Even without any intentional optimization efforts,
the app still runs &lt;em&gt;instantaneously&lt;/em&gt;.
I tried to take some measurements using the &lt;code&gt;time&lt;/code&gt; command,
but it never ticked into more than 0.001s.
Perceptively, it is at least on par with &lt;code&gt;git&lt;/code&gt;,
so that&amp;#8217;s acceptable for me&amp;nbsp;:)&lt;/p&gt;
&lt;h4&gt;Can&amp;#8217;t segfault if your code doesn&amp;#8217;t&amp;nbsp;build&lt;/h4&gt;
&lt;p&gt;Achieving the performance objective wouldn&amp;#8217;t do us much good, however,
if the road to get there involved excessive penalties on productivity.
Such negative impact could manifest in many ways,
including troublesome debugging due to a tricky runtime&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;,
or difficulty in getting the code to compile in the first&amp;nbsp;place.&lt;/p&gt;
&lt;p&gt;If you had even a passing contact with Rust,
you&amp;#8217;d expect the latter to be much more likely than the&amp;nbsp;former.&lt;/p&gt;
&lt;p&gt;Indeed, Rust&amp;#8217;s very design eschews runtime flexibility to a ridiculous degree
(in its &amp;#8220;safe&amp;#8221; mode, at least),
while also forcing you to absorb subtle &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; complex ideas
to even get your code past the compiler.
The reward is increased likelihood your program will behave as intended &amp;#8212;
although it&amp;#8217;s definitely not on the level of &amp;#8220;if it compiles, it works&amp;#8221;
that can be offered by Haskell or&amp;nbsp;Idris.&lt;/p&gt;
&lt;p&gt;But since &lt;em&gt;gisht&lt;/em&gt; is hardly mission critical,
I didn&amp;#8217;t actually care too much about this increased reliability.
I don&amp;#8217;t think it&amp;#8217;s likely that Rust would buy me much over something like modern C++.
And if I were to &lt;em&gt;really&lt;/em&gt; do some kind of cost-benefit analysis of several languages
&amp;#8212; rather than going with Rust simply to learn it better &amp;#8212;
then it would be hard to justify it over something like&amp;nbsp;Go.&lt;/p&gt;
&lt;h4&gt;It&amp;nbsp;scales&lt;/h4&gt;
&lt;p&gt;So the real question is: has Rust &lt;em&gt;not hampered&lt;/em&gt; my productivity too much?
Having the benefit of hindsight,
I&amp;#8217;m happy to say that the trade-off was definitely acceptable&amp;nbsp;:)&lt;/p&gt;
&lt;p&gt;One thing I was particularly satisfied with was the language&amp;#8217;s &lt;em&gt;scalability&lt;/em&gt;.
What I mean here is the ability to adapt as the project grows,
but also to start quickly and remain nimble
while the codebase is still pretty&amp;nbsp;small.&lt;/p&gt;
&lt;p&gt;Many languages (most, perhaps) are naturally tailored towards the large end,
doing their best to make it more bearable to work with big codebases.
In turn, they often forget about helping projects take off in the first place.
Between complicated build systems and dependency managers (Java),
or a virtual lack of either (C++),
it can be really hard to get going in a &amp;#8220;serious&amp;#8221; language like&amp;nbsp;this.&lt;/p&gt;
&lt;p&gt;On the other hand, languages like Python make it very easy to start up
and achieve relatively impressive results.
Some people, however, report having encountered problems
once the code evolves past certain size.
While I&amp;#8217;m actually
&lt;a href="http://xion.io/post/programming/long-live-dynamic-languages.html"&gt;very unsympathetic&lt;/a&gt; to those claims,
I realize perception plays a significant role here,
making those anecdotal experiences into a sort of self-fulfilling&amp;nbsp;prophecy.&lt;/p&gt;
&lt;p&gt;This perception problem should almost certainly spare Rust,
as it&amp;#8217;s a natively compiled and statically typed language,
with a respectable type system to boot.
There is also &lt;a href="https://servo.org/"&gt;some evidence&lt;/a&gt;
that the language works well in large projects already.
So the only question that we might want to ask is:
how easy it is to actually &lt;em&gt;start&lt;/em&gt; a project in Rust,
and carry it towards some kind of &lt;abbr title="Minimum Viable Product"&gt;&lt;span class="caps"&gt;MVP&lt;/span&gt;&lt;/abbr&gt;?&lt;/p&gt;
&lt;p&gt;Based on my experiences with &lt;em&gt;gisht&lt;/em&gt;,
I can say that it is, in fact, quite easy.
Thanks mostly to the impressive Swiss army knife of &lt;code&gt;cargo&lt;/code&gt;
&amp;#8212; acting as both package manager and a rudimentary build system &amp;#8212;
it was almost Python-trivial to cook a &amp;#8220;Hello World&amp;#8221; program
that does something tangible, like
&lt;a href="https://github.com/Xion/gisht/blob/de1be876784d671dd84618c3a15d0836f9fd5697/src/main.rs"&gt;talk to a &lt;span class="caps"&gt;JSON&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/a&gt;.
From there, it only took a few coding sessions to grow it
into a &lt;a href="https://github.com/Xion/gisht/tree/5c156cb"&gt;functioning prototype&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Abstractions&amp;nbsp;galore&lt;/h4&gt;
&lt;p&gt;As part of rewriting &lt;em&gt;gisht&lt;/em&gt; from Python to Rust,
I also wanted to fix some longstanding issues that limited its&amp;nbsp;capabilities.&lt;/p&gt;
&lt;p&gt;The most important one was the hopeless coupling to GitHub
and their particular flavor of gists.
Sure, this is where the project even got its name from,
but people use a dozen of different services to share code snippets
and it should very possible to support them&amp;nbsp;all.&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s where it became necessary to utilize
the abstraction capabilities that Rust has to offer.
It was somewhat obvious to
&lt;a href="https://github.com/Xion/gisht/blob/3fc443dc9986612fd46b4311ca2ecbc613a15cf9/src/gist.rs#L16"&gt;define a &lt;code&gt;Host&lt;/code&gt; trait&lt;/a&gt;
but of course its exact form had to be
&lt;a href="https://github.com/Xion/gisht/commit/26746dfc2eac68b67753f71148eb9897a861914e#diff-9d0a9c0911fa012f0fcf8ca56b43f8c5"&gt;shaped&lt;/a&gt;
over &lt;a href="https://github.com/Xion/gisht/commit/1e54ad05480b42089977171f10d4727beca5f835#diff-9d0a9c0911fa012f0fcf8ca56b43f8c5"&gt;numerous iterations&lt;/a&gt;.
Along the way, it even turned out that &lt;code&gt;Result&amp;lt;Option&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt; and &lt;code&gt;Option&amp;lt;Result&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt;
are sometimes &lt;a href="https://github.com/Xion/gisht/blob/d9c30e69d58b2a4e5608e6c8a1aa6392133b490f/src/hosts/mod.rs#L44"&gt;both necessary&lt;/a&gt;
as return types&amp;nbsp;:)&lt;/p&gt;
&lt;p&gt;Besides cleaner architecture,
another neat thing about an explicit abstraction is
the ability to slice a concept into smaller pieces &amp;#8212;
and then put &lt;em&gt;some of them&lt;/em&gt; back together.
While the &lt;code&gt;Host&lt;/code&gt; trait could support a very diverse set of gist services and &lt;em&gt;pastebins&lt;/em&gt;,
many of them turned out to be just a slight variation of one central theme.
Because of this similarity, it was possible to introduce
a single &lt;a href="https://github.com/Xion/gisht/blob/d2e78b1f5ee4616b1d5eb7067c3c5dd0ce9e2fe4/src/hosts/simple.rs#L26"&gt;&lt;code&gt;Basic&lt;/code&gt; implementation&lt;/a&gt;
which handles multiple services through varying sets of &lt;span class="caps"&gt;URL&lt;/span&gt;&amp;nbsp;patterns.&lt;/p&gt;
&lt;p&gt;Devices like these aren&amp;#8217;t of course specific to Rust:
interfaces (traits) and classes are a staple of &lt;span class="caps"&gt;OO&lt;/span&gt; languages in general.
But some other techniques were more idiomatic;
the concept of &lt;a href="https://doc.rust-lang.org/std/iter/trait.Iterator.html"&gt;iterators&lt;/a&gt;, for example,
is flexible enough to accommodate
&lt;a href="https://github.com/Xion/gisht/blob/4fa347c6197190b0f6c68dd548efc28287a5859f/src/hosts/github.rs#L354"&gt;looping over GitHub user&amp;#8217;s gists&lt;/a&gt;,
even as they read directly from &lt;span class="caps"&gt;HTTP&lt;/span&gt;&amp;nbsp;responses.&lt;/p&gt;
&lt;h4&gt;Hacking&amp;nbsp;time&lt;/h4&gt;
&lt;p&gt;Not everything was sunshine and rainbows,&amp;nbsp;though.&lt;/p&gt;
&lt;p&gt;Take &lt;em&gt;clap&lt;/em&gt;, for example.
It&amp;#8217;s mostly a very good crate for parsing command line arguments,
but it couldn&amp;#8217;t &lt;em&gt;quite&lt;/em&gt; cope with the unusual requirements that &lt;em&gt;gisht&lt;/em&gt; had.
To make &lt;code&gt;gisht Foo/bar&lt;/code&gt; work alongside &lt;code&gt;gisht run Foo/bar&lt;/code&gt;,
it was necessary to
&lt;a href="https://github.com/Xion/gisht/commit/0eff00e31f94f3856558ebb1f6655a9e6fc50ca6#diff-7397f82f682a49eb62e2b056118124d0"&gt;analyze &lt;code&gt;argv&lt;/code&gt;&lt;/a&gt;
before even handing it over to &lt;code&gt;clap&lt;/code&gt;.
This turned out to be
&lt;a href="https://github.com/Xion/gisht/commit/e7ab06a01d4675947965ec82fc6f3ec5a2517c89#diff-7397f82f682a49eb62e2b056118124d0"&gt;surprisingly tricky&lt;/a&gt;
to get right.
Like,
&lt;a href="https://github.com/Xion/gisht/commit/69e8aad4a1743beb57184dc38150ef02b306a0a1#diff-7397f82f682a49eb62e2b056118124d0"&gt;really&lt;/a&gt;
tricky, with
&lt;a href="https://github.com/Xion/gisht/commit/acadcfa0a97fe52584fbf8198541baa8733cb0a5#diff-7397f82f682a49eb62e2b056118124d0R58"&gt;edges cases&lt;/a&gt;
and
&lt;a href="https://github.com/Xion/gisht/commit/a9eb599168f5b6821aefa46dde0b0a89a41cd4e6#diff-7397f82f682a49eb62e2b056118124d0R562"&gt;stuff&lt;/a&gt;.
But as it is often the case in software,
the answer turned out to be yet another layer of indirection plus
&lt;a href="https://github.com/Xion/gisht/blob/30df960052f2a03270bbb5ca1f7be0920978007d/src/args.rs#L457-L578"&gt;a copious amount of tests&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In another instance, however, a direct library support was&amp;nbsp;crucial.&lt;/p&gt;
&lt;p&gt;It so happened that &lt;em&gt;hyper&lt;/em&gt;, the crate I&amp;#8217;ve been using for &lt;span class="caps"&gt;HTTP&lt;/span&gt; requests,
didn&amp;#8217;t handle the &lt;code&gt;Link:&lt;/code&gt; response header out of the box&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;.
This was a stumbling block that prevented the gist iterator (mentioned earlier)
from correctly handling pagination in the responses from GitHub &lt;span class="caps"&gt;API&lt;/span&gt;.
Thankfully, having &lt;a href="https://docs.rs/hyper/0.11.7/hyper/header/trait.Header.html"&gt;the &lt;code&gt;Header&lt;/code&gt; abstraction&lt;/a&gt; in &lt;em&gt;hyper&lt;/em&gt;
meant it was possible to add the missing support in
&lt;a href="https://github.com/Xion/gisht/blob/30df960052f2a03270bbb5ca1f7be0920978007d/src/ext/hyper.rs"&gt;a relatively straighforward manner&lt;/a&gt;.
Yes, it&amp;#8217;s &lt;a href="https://github.com/Xion/gisht/blob/30df960052f2a03270bbb5ca1f7be0920978007d/src/ext/hyper.rs#L23"&gt;not a universal implementation&lt;/a&gt;
that&amp;#8217;d be suitable for &lt;em&gt;every&lt;/em&gt; &lt;span class="caps"&gt;HTTP&lt;/span&gt; client,
but it does the job for &lt;em&gt;gisht&lt;/em&gt; just&amp;nbsp;fine.&lt;/p&gt;
&lt;h4&gt;Test-Reluctant&amp;nbsp;Development&lt;/h4&gt;
&lt;p&gt;And so the program kept growing steadily over the months,
most notably through
&lt;a href="https://github.com/Xion/gisht/blob/30df960052f2a03270bbb5ca1f7be0920978007d/src/hosts/mod.rs#L101"&gt;more and more gist hosts&lt;/a&gt;
it could now&amp;nbsp;support.&lt;/p&gt;
&lt;p&gt;Eventually, some of them would fall into a sort of twilight zone.
They weren&amp;#8217;t as complicated as GitHub to warrant writing a completely new &lt;code&gt;Host&lt;/code&gt; instance,
but they also couldn&amp;#8217;t be handled via
&lt;a href="https://github.com/Xion/gisht/blob/30df960052f2a03270bbb5ca1f7be0920978007d/src/hosts/common/basic.rs#L28"&gt;the &lt;code&gt;Basic&lt;/code&gt; structure&lt;/a&gt; alone.
A good example would be &lt;a href="http://sprunge.us/"&gt;sprunge.us&lt;/a&gt;:
mostly an ordinary pastebin,
except for its optional syntax highlighting
which may add some &amp;#8220;junk&amp;#8221; to the otherwise regular&amp;nbsp;URLs.&lt;/p&gt;
&lt;p&gt;In order to handle those odd cases,
I went for a classic wrapper/decorator pattern which, in its essence,
boils down to something like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sprunge&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;inner&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Basic&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;impl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sprunge&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;Sprunge&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;inner&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Basic&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;sprunge.us&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                                  &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://sprunge.us/${id}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;...)}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;impl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Host&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sprunge&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// override &amp;amp; wrap methods that require custom logic:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;resolve_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="kt"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Gist&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;url_obj&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;try_opt&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Url&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;url_obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;None&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;inner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resolve_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url_obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_string&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;as_str&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// passthrough to the `Basic` struct for others:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fetch_gist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;gist&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;Gist&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;FetchMode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetch_gist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gist&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// (etc.)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Despite the noticeable boilerplate of a few pass-through methods,
I was pretty happy with this solution, at least initially.
After a few more unusual hosts, however,
it became cumbersome to fix all the edge cases
by looking only at the final output of the inner &lt;code&gt;Basic&lt;/code&gt; implementation.
The code was evidently asking for some &lt;em&gt;tests&lt;/em&gt;,
if only to check how the inner structure is being&amp;nbsp;called.&lt;/p&gt;
&lt;p&gt;Shouldn&amp;#8217;t be too hard, right?&amp;#8230; Yeah, that&amp;#8217;s what I thought,&amp;nbsp;too.&lt;/p&gt;
&lt;p&gt;The reality, unfortunately, fell very short of those expectations.
Stubs, mocks, fakes &amp;#8212;
&lt;a href="https://testing.googleblog.com/2013/07/testing-on-toilet-know-your-test-doubles.html"&gt;&lt;em&gt;test doubles&lt;/em&gt;&lt;/a&gt;
in general &amp;#8212;
are a dark and forgotten corner of Rust
that almost no one seems to pay any attention to.
Absent a proper library support &amp;#8212; much less a language one &amp;#8212;
the only way forward was to roll up my sleeves
and implement
&lt;a href="https://github.com/Xion/gisht/blob/30df960052f2a03270bbb5ca1f7be0920978007d/src/testing/inmemory_host.rs"&gt;a fake &lt;code&gt;Host&lt;/code&gt;&lt;/a&gt;
from&amp;nbsp;scratch.&lt;/p&gt;
&lt;p&gt;But that was just the beginning.
How do you seamlessly inject this fake implementation into the wrapper
so that it replaces the &lt;code&gt;Basic&lt;/code&gt; struct for testing?
If you are not careful and go for the &amp;#8220;obvious&amp;#8221; solution &amp;#8212; a trait&amp;nbsp;object:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sprunge&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;inner&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Box&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Host&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;you&amp;#8217;ll soon realize that you need not just a &lt;code&gt;Box&lt;/code&gt;, but at least an &lt;code&gt;Rc&lt;/code&gt; (or maybe even &lt;code&gt;Arc&lt;/code&gt;).
Without this kind of shared ownership,
you&amp;#8217;ll lose your chance to interrogate the test double once you hand it over to the wrapper.
This, in turn, will heavily limit your ability to write effective&amp;nbsp;tests.&lt;/p&gt;
&lt;p&gt;What&amp;#8217;s the non-obvious approach, then?
The full rationale would probably warrant a separate post,
but the working recipe looks more or less like&amp;nbsp;this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;First, &lt;em&gt;parametrize&lt;/em&gt; the wrapper with its inner type:
  &lt;code&gt;pub struct Sprunge&amp;lt;T: Host&amp;gt; { inner: T }&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Put that in an internal module with the correct visibility&amp;nbsp;setup:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;mod&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;internal&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sprunge&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Host&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;super&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;inner&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make the regular (&amp;#8220;production&amp;#8221;) version of the wrapper into an &lt;em&gt;alias&lt;/em&gt;,
  giving it the type parameter that you&amp;#8217;ve been using directly&lt;sup id="fnref:4"&gt;&lt;a class="footnote-ref" href="#fn:4" rel="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sprunge&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;internal&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Sprunge&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Basic&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Change the &lt;code&gt;new&lt;/code&gt; constructor to instantiate the &lt;code&gt;internal&lt;/code&gt; type.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In tests, create the wrapper with a fake &lt;code&gt;inner&lt;/code&gt; object&amp;nbsp;inside.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As you can see in
&lt;a href="https://github.com/Xion/gisht/blob/30df960052f2a03270bbb5ca1f7be0920978007d/src/hosts/sprunge.rs"&gt;the real example&lt;/a&gt;,
this convoluted technique removes the need for any pointer indirection.
It also permits you to
&lt;a href="https://github.com/Xion/gisht/blob/30df960052f2a03270bbb5ca1f7be0920978007d/src/hosts/sprunge.rs#L152"&gt;access the out-of-band interface&lt;/a&gt;
that a fake object would normally&amp;nbsp;expose.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s a shame, though, that so much work is required for something
that should be very simple.
As it appears, testing is still a neglected topic in&amp;nbsp;Rust.&lt;/p&gt;
&lt;h4&gt;Packing&amp;nbsp;up&lt;/h4&gt;
&lt;p&gt;It wasn&amp;#8217;t just Rust that played a notable role in the development of &lt;em&gt;gisht&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Pretty soon after getting the app to a presentable state,
it became clear that a mere &lt;code&gt;cargo build&lt;/code&gt; won&amp;#8217;t do everything
that&amp;#8217;s necessary to carry out a complete build.
It &lt;em&gt;could&lt;/em&gt; do more, admittedly,
if I had the foresight to explore &lt;a href="http://doc.crates.io/build-script.html"&gt;Cargo build scripts&lt;/a&gt;
a little more thoroughly.
But overall, I don&amp;#8217;t regret dropping back to my trusty ol&amp;#8217; pick:&amp;nbsp;Python.&lt;/p&gt;
&lt;p&gt;Like in a few previous projects, I used the &lt;a href="http://pyinvoke.org"&gt;Invoke task runner&lt;/a&gt;
for both the crucial and the auxiliary automation tasks.
It is a relatively powerful tool
&amp;#8212; and probably the best in its class in Python that I know of &amp;#8212;
though it can be a bit capricious if you want to
&lt;a href="https://github.com/Xion/gisht/blob/30df960052f2a03270bbb5ca1f7be0920978007d/tasks/release/__init__.py#L69"&gt;really fine-tune it&lt;/a&gt;.
But it does make it much easier to organize your automation code,
to reuse it between tasks, and to (ahem) &lt;em&gt;invoke&lt;/em&gt; those tasks in a convenient&amp;nbsp;manner.&lt;/p&gt;
&lt;p&gt;In any case, it certainly beats a collection of disconnected Bash scripts&amp;nbsp;;)&lt;/p&gt;
&lt;p&gt;What have I automated in this way, you may ask?
Well, a couple of small things; those&amp;nbsp;include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;embedding of the current Git commit hash into the binary,
to help identify the exact revision in the logs of any potential bug reports&lt;sup id="fnref:5"&gt;&lt;a class="footnote-ref" href="#fn:5" rel="footnote"&gt;5&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;after a successful build,
&lt;a href="https://github.com/Xion/gisht/blob/30df960052f2a03270bbb5ca1f7be0920978007d/tasks/build.py#L40"&gt;replacing&lt;/a&gt;
the &lt;em&gt;Usage&lt;/em&gt; section in &lt;em&gt;&lt;span class="caps"&gt;README&lt;/span&gt;&lt;/em&gt; with the program&amp;#8217;s &lt;code&gt;--help&lt;/code&gt; output&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;generating &lt;a href="https://github.com/Xion/gisht/blob/30df960052f2a03270bbb5ca1f7be0920978007d/tasks/build.py#L96"&gt;completion scripts&lt;/a&gt;
for popular shells by invoking the binary with a magic hidden flag (courtesy of &lt;em&gt;clap&lt;/em&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Undoubtedly the biggest task that I relegated to Python/Invoke,
was the preparation of
&lt;a href="https://github.com/Xion/gisht/blob/30df960052f2a03270bbb5ca1f7be0920978007d/tasks/release/__init__.py"&gt;&lt;em&gt;release packages&lt;/em&gt;&lt;/a&gt;.
When it comes to the various Linuxes (currently Debian and Red Hat flavors),
this wasn&amp;#8217;t particularly complicated.
Major thanks are due to the amazing &lt;a href="https://github.com/jordansissel/fpm"&gt;&lt;em&gt;fpm&lt;/em&gt; tool&lt;/a&gt; here,
which I recommend to anyone who needs to package their software in a distro-compatible&amp;nbsp;manner.&lt;/p&gt;
&lt;p&gt;Homebrew, however &amp;#8212; or more precisely, &lt;span class="caps"&gt;OS&lt;/span&gt; X itself &amp;#8212; was quite a different story.
Many, &lt;a href="https://github.com/Xion/gisht/commits/a5423a63d10221c50faa1cb30a999a85286853a1"&gt;many&lt;/a&gt;
failed attempts were needed to even get it to build on &lt;a href="https://travis-ci.org"&gt;Travis&lt;/a&gt;,
and the additional dependency on Python was
&lt;a href="https://github.com/Xion/gisht/blob/30df960052f2a03270bbb5ca1f7be0920978007d/ci/travis/before_install-osx.sh#L15"&gt;partially to blame&lt;/a&gt;.
To be fair, however, most of the pain was exclusively due to OpenSSL;
getting that thing to build is always &lt;a href="https://github.com/sfackler/rust-openssl/issues/255"&gt;loads of &amp;#8220;fun&amp;#8221;&lt;/a&gt;,
especially in such an opaque and poorly debuggable environment as&amp;nbsp;Travis.&lt;/p&gt;
&lt;h4&gt;The&amp;nbsp;wrap&lt;/h4&gt;
&lt;p&gt;There&amp;#8217;s probably a lot of minor things and tidbits I could&amp;#8217;ve mentioned along the way,
but the story so far has most likely covered all the important topics.
Let&amp;#8217;s wrap it up then, and highlight some interesting points in the classic &lt;em&gt;Yay/Meh/Nay&lt;/em&gt;&amp;nbsp;manner.&lt;/p&gt;
&lt;h5&gt;Yay&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;It was definitely a good choice to rewrite &lt;em&gt;gisht&lt;/em&gt; specifically in Rust.
Besides all the advantages I&amp;#8217;ve mentioned already,
it is also worth noting that the language went through about 10 minor version bumps
while I was working on this project.
Of all those new releases,
I don&amp;#8217;t recall a single one that would introduce a breaking&amp;nbsp;change.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Most of the Rust ecosystem (third-party libraries) was a joy to use,
and very easy to get started with.
Honorable mention goes to &lt;em&gt;serde_json&lt;/em&gt; and how easy it was to
&lt;a href="https://github.com/Xion/gisht/commit/a0655a6a5b86c05df5665e3bc7f1512f2476c9e4"&gt;transition the code&lt;/a&gt;
from &lt;em&gt;rustc_serialize&lt;/em&gt; that I had used at&amp;nbsp;first.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;With a possible exception of sucking in node.js as a huge dependency of your project
and using Grunt, there is probably no better way of writing automation &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; support code than Python.
There may eventually be some Rust-based task runners that could try to compete,
but I&amp;#8217;m not very convinced about using a compiled language for this purpose
(and especially one that takes so long to&amp;nbsp;build).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Meh&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;While &lt;a href="https://docs.rs/clap"&gt;the &lt;em&gt;clap&lt;/em&gt; crate&lt;/a&gt; is quite configurable and pretty straightforward to use,
it does lack at least &lt;a href="https://github.com/kbknapp/clap-rs/issues/568"&gt;one feature&lt;/a&gt;
that&amp;#8217;d be very nice for &lt;em&gt;gisht&lt;/em&gt;.
Additionally, working with raw &lt;em&gt;clap&lt;/em&gt; is often a little tedious,
as it doesn&amp;#8217;t assist you in translating parsed flags into your own configuration types,
and thus requires
&lt;a href="https://github.com/Xion/gisht/blob/30df960052f2a03270bbb5ca1f7be0920978007d/src/args.rs#L138-L182"&gt;shuffling those bits&lt;/a&gt;
manually&lt;sup id="fnref:6"&gt;&lt;a class="footnote-ref" href="#fn:6" rel="footnote"&gt;6&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Being a &lt;em&gt;defacto&lt;/em&gt; standard for continuous integration in open-source projects,
&lt;a href="https://travis-ci.org"&gt;Travis &lt;span class="caps"&gt;CI&lt;/span&gt;&lt;/a&gt; could be a &lt;em&gt;little&lt;/em&gt; less finicky.
In almost every project I decide to use it for,
I end up with about half a dozen commits
that frantically try to fix silly configuration issues,
all before even a simple &lt;em&gt;.travis.yml&lt;/em&gt; works as intended.
Providing a way to test &lt;span class="caps"&gt;CI&lt;/span&gt; builds locally would be an obvious way to avoid this&amp;nbsp;churn.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Nay&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Testing in Rust is such a weird animal.
On one hand, there is a first-class, out-of-the-box support for unit tests
(and even integration tests) right in the toolchain.
On the other hand, the relevant parts of the ecosystem are immature or lacking,
as evidenced by the dreary story of mocking and stubbing.
It&amp;#8217;s no surprise that there is a long way to catch up to languages with the strongest testing culture
(Java and C#/.&lt;span class="caps"&gt;NET&lt;/span&gt;&lt;sup id="fnref:7"&gt;&lt;a class="footnote-ref" href="#fn:7" rel="footnote"&gt;7&lt;/a&gt;&lt;/sup&gt;), but it&amp;#8217;s disappointing to see Rust outclassed
&lt;a href="https://github.com/google/googletest"&gt;even by C++&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Getting anything to build reliably on &lt;span class="caps"&gt;OSX&lt;/span&gt; in a &lt;span class="caps"&gt;CI&lt;/span&gt; environment is already a tall order.
But if it involves things as OpenSSL, then it quickly goes from bad to terrible.
I&amp;#8217;m really not amused anymore how this &amp;#8220;Just Works&amp;#8221; system often turns out to hardly work at&amp;nbsp;all.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Since I don&amp;#8217;t want to end on such a negative note,
I feel compelled to state the obvious fact: every technology choice is a trade-off.
In case of this project, however, the drawbacks were &lt;em&gt;heavily&lt;/em&gt; outweighed by the&amp;nbsp;benefits.&lt;/p&gt;
&lt;p&gt;For this reason, I can definitely recommend the software stack I&amp;#8217;ve just described
to anyone developing non-trivial, cross-platform command line&amp;nbsp;tools.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;This is not an isolated complaint, by the way,
as the interpreter startup time has recently emerged as &lt;a href="https://lwn.net/Articles/730915/"&gt;an important issue&lt;/a&gt;
to many developers of the Python language.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;Which may also include a practical &lt;em&gt;lack&lt;/em&gt; thereof.&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;It does handle it &lt;a href="https://docs.rs/hyper/0.11.7/hyper/header/struct.Link.html"&gt;now&lt;/a&gt;, fortunately.&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:4"&gt;
&lt;p&gt;Observant readers may notice that we&amp;#8217;re exposing a technically private type (&lt;code&gt;internal::Sprunge&lt;/code&gt;)
through a publicly visible type alias. If that type was &lt;em&gt;actually&lt;/em&gt; private,
this would trigger a compiler warning
which is slated to become &lt;a href="https://github.com/rust-lang/rust/issues/34537"&gt;a hard error&lt;/a&gt;
at some point in the future. But, amusingly, we can fool the compiler by making it a
&lt;em&gt;public type&lt;/em&gt; inside a &lt;em&gt;private module&lt;/em&gt;, which is exactly what we&amp;#8217;re doing here.&amp;#160;&lt;a class="footnote-backref" href="#fnref:4" rev="footnote" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:5"&gt;
&lt;p&gt;This has since been rewritten and is now done in
&lt;a href="https://github.com/Xion/gisht/blob/30df960052f2a03270bbb5ca1f7be0920978007d/build.rs"&gt;&lt;em&gt;build.rs&lt;/em&gt;&lt;/a&gt;
&amp;#8212; but that&amp;#8217;s only because I implemented
&lt;a href="https://github.com/rust-lang/cargo/pull/3929"&gt;the relevant Cargo feature&lt;/a&gt; myself :)&amp;#160;&lt;a class="footnote-backref" href="#fnref:5" rev="footnote" title="Jump back to footnote 5 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:6"&gt;
&lt;p&gt;For an alternative approach that doesn&amp;#8217;t seem to have this problem,
check &lt;a href="https://docs.rs/structopt_derive"&gt;the &lt;em&gt;structopt&lt;/em&gt; crate&lt;/a&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:6" rev="footnote" title="Jump back to footnote 6 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:7"&gt;
&lt;p&gt;Dynamically typed languages, due to their rich runtime,
are basically a class of their own when it comes to testing ease,
so it wouldn&amp;#8217;t really be fair to hold them up for comparison.&amp;#160;&lt;a class="footnote-backref" href="#fnref:7" rev="footnote" title="Jump back to footnote 7 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="Rust"></category><category term="gisht"></category><category term="CLI"></category><category term="GitHub"></category><category term="Python"></category><category term="testing"></category></entry><entry><title>Currying and APIÂ design</title><link href="http://xion.io/post/programming/currying-api-design.html" rel="alternate"></link><updated>2017-11-12T14:07:00+00:00</updated><author><name>Karol Kuczmarski</name></author><id>tag:xion.io,2017-11-12:post/programming/currying-api-design.html</id><summary type="html">&lt;p&gt;In functional programming, &lt;em&gt;currying&lt;/em&gt; is one of the concepts
that contribute greatly to its expressive power.
Its importance could be compared to something as ubiquitous
as chaining method calls (&lt;code&gt;foo.bar().baz()&lt;/code&gt;) in imperative, object-oriented&amp;nbsp;languages.&lt;/p&gt;
&lt;p&gt;Although a simple idea on the surface,
it has significant consequences for the way functional APIs are designed.
This post is an overview of various techniques
that help utilize currying effectively when writing your functions.
While the examples are written in Haskell syntax,
I believe it should be useful for developers working in other functional languages,&amp;nbsp;too.&lt;/p&gt;
&lt;h4&gt;The&amp;nbsp;basics&lt;/h4&gt;
&lt;p&gt;Let&amp;#8217;s start with a short&amp;nbsp;recap.&lt;/p&gt;
&lt;p&gt;Intuitively, we say that an &lt;em&gt;N&lt;/em&gt;-argument function is &lt;em&gt;curried&lt;/em&gt;
if you can invoke it with a single argument and get back an (&lt;em&gt;N&lt;/em&gt;-1)-argument function.
Repeat this &lt;em&gt;N&lt;/em&gt; times,
and it&amp;#8217;ll be equivalent to supplying all &lt;em&gt;N&lt;/em&gt; arguments at&amp;nbsp;once.&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s an example: the &lt;code&gt;Data.Text&lt;/code&gt; module in Haskell
contains the following function called &lt;code&gt;splitOn&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;splitOn&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nf"&gt;splitOn&lt;/span&gt; &lt;span class="n"&gt;sep&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It&amp;#8217;s a fairly standard string splitting function,
taking a separator as its first argument,
with the second one being a string to perform the splitting&amp;nbsp;on:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;splitOn&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;,&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;1,2,3&amp;quot;&lt;/span&gt;  &lt;span class="c1"&gt;-- produces [&amp;quot;1&amp;quot;, &amp;quot;2&amp;quot;, &amp;quot;3&amp;quot;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Both arguments are of type &lt;code&gt;Text&lt;/code&gt; (Haskell strings),
while the return type is &lt;code&gt;[Text]&lt;/code&gt; &amp;#8212; a &lt;em&gt;list&lt;/em&gt; of strings.
This add up to the signature (type) of &lt;code&gt;splitOn&lt;/code&gt;,
written above as &lt;code&gt;Text -&amp;gt; Text -&amp;gt; [Text]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Like all functions in Haskell, however, &lt;code&gt;splitOn&lt;/code&gt; is &lt;em&gt;curried&lt;/em&gt;.
We don&amp;#8217;t have to provide it with both arguments at once;
instead, we can stop at one in order to obtain &lt;em&gt;another function&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;splitOnComma&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nf"&gt;splitOnComma&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;splitOn&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;,&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This new function is a &lt;em&gt;partially applied&lt;/em&gt; version of &lt;code&gt;splitOn&lt;/code&gt;,
with its first argument (the separator) already filled in.
To complete the call, all you need to do now is provide the text to&amp;nbsp;split:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;splitOnComma&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;1,2,3&amp;quot;&lt;/span&gt;  &lt;span class="c1"&gt;-- also produces [&amp;quot;1&amp;quot;, &amp;quot;2&amp;quot;, &amp;quot;3&amp;quot;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and, unsurprisingly, you&amp;#8217;ll get the exact same&amp;nbsp;result.&lt;/p&gt;
&lt;p&gt;Compare now the type signatures of both &lt;code&gt;splitOn&lt;/code&gt; and &lt;code&gt;splitOnComma&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;splitOn&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nf"&gt;splitOnComma&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It may be puzzling at first why the same arrow symbol (&lt;code&gt;-&amp;gt;&lt;/code&gt;) is used
for what seems like two distinct meanings: the &amp;#8220;argument separator&amp;#8221;,
and the return type&amp;nbsp;indicator.&lt;/p&gt;
&lt;p&gt;But for curried functions, both of those meanings are in fact &lt;em&gt;identical&lt;/em&gt;!&lt;/p&gt;
&lt;p&gt;Indeed, we can make it more explicit by defining &lt;code&gt;splitOn&lt;/code&gt; as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;splitOn&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Text&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;or&amp;nbsp;even:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;splitOn&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;TypeOf&lt;/span&gt; &lt;span class="n"&gt;splitOnComma&lt;/span&gt; &lt;span class="c1"&gt;-- (not a real Haskell syntax)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;From this perspective, what &lt;code&gt;splitOn&lt;/code&gt; actually returns is not &lt;code&gt;[Text]&lt;/code&gt;
but a &lt;em&gt;function&lt;/em&gt;  from &lt;code&gt;Text&lt;/code&gt; to &lt;code&gt;[Text]&lt;/code&gt; (&lt;code&gt;Text -&amp;gt; [Text]&lt;/code&gt;).
And conversely, a call with two&amp;nbsp;arguments:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;splitOn&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;,&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;1,2,3&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;is instead &lt;em&gt;two function calls&lt;/em&gt;, each taking just &lt;em&gt;one argument&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;splitOn&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;,&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;1,2,3&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is why the &lt;code&gt;-&amp;gt;&lt;/code&gt; arrow isn&amp;#8217;t actually ambiguous:
it always signifies the &lt;em&gt;mapping&lt;/em&gt; of an argument type to a result type.
And it&amp;#8217;s always just one argument, too,&amp;nbsp;because:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Currying makes all functions take only one&amp;nbsp;argument.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It&amp;#8217;s just that sometimes, what those single-argument functions return
will be yet another&amp;nbsp;function.&lt;/p&gt;
&lt;h4&gt;Least used arguments go &lt;em&gt;first&lt;/em&gt;&lt;/h4&gt;
&lt;p&gt;Now that we have a firmer grasp on the idea of currying,
we can see how it influences &lt;span class="caps"&gt;API&lt;/span&gt;&amp;nbsp;design.&lt;/p&gt;
&lt;p&gt;There is one thing in particular you will notice almost immediately,
especially if you are coming from imperative languages
that support default argument values and/or function overloading.
It&amp;#8217;s the particular &lt;em&gt;order of arguments&lt;/em&gt;
that a well designed, functional &lt;span class="caps"&gt;API&lt;/span&gt; will almost certainly&amp;nbsp;follow.&lt;/p&gt;
&lt;p&gt;See the &lt;code&gt;splitOn&lt;/code&gt; function&amp;nbsp;again:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;splitOn&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nf"&gt;splitOn&lt;/span&gt; &lt;span class="n"&gt;sep&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It is no accident that it puts the &lt;code&gt;sep&lt;/code&gt;arator as its first argument.
This choice &amp;#8212; as opposed to the alternative where &lt;code&gt;text&lt;/code&gt; goes first &amp;#8212;
produces much more useful results when the function is applied partially
through&amp;nbsp;currying.&lt;/p&gt;
&lt;p&gt;Say, for instance, that you want to splice a list of strings
where the individual pieces can be&amp;nbsp;comma-separated:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;spliceOnComma&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nf"&gt;spliceOnComma&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;2,3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;4,5,6&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;7&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;-- ^ This should produce [&amp;quot;1&amp;quot;, &amp;quot;2&amp;quot;, &amp;quot;3&amp;quot;, &amp;quot;4&amp;quot;, &amp;quot;5&amp;quot;, &amp;quot;6&amp;quot;, &amp;quot;7&amp;quot;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Because the separator appears first in a &lt;code&gt;splitOn&lt;/code&gt; call,
you can do it easily through a direct use of&amp;nbsp;currying:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;spliceOnComma&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;concat&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;splitOn&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;,&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;

&lt;span class="c1"&gt;-- or equivalently, in a terser point-free style:&lt;/span&gt;
&lt;span class="c1"&gt;-- spliceOnComma = concatMap $ splitOn &amp;quot;,&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What we do here is apply the split to every string in the list &lt;code&gt;xs&lt;/code&gt;
(with &lt;code&gt;map&lt;/code&gt;), followed by flattening the result &amp;#8212; a list of lists, &lt;code&gt;[[Text]]&lt;/code&gt; &amp;#8212;
back to a regular &lt;code&gt;[Text]&lt;/code&gt; with &lt;code&gt;concat&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If we had the alternative version of &lt;code&gt;splitOn&lt;/code&gt;,
one where the order of arguments is&amp;nbsp;reversed:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;splitOn&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="n"&gt;sep&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;we&amp;#8217;d have no choice but to &amp;#8220;fix it&amp;#8221;, with either a lambda function
or &lt;a href="http://hackage.haskell.org/package/base-4.10.0.0/docs/Prelude.html#v:flip"&gt;the &lt;code&gt;flip&lt;/code&gt; combinator&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;spliceOnComma&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;concat&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;\&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;splitOn&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;,&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;
&lt;span class="nf"&gt;spliceOnComma&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;concat&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;flip&lt;/span&gt; &lt;span class="n"&gt;splitOn&amp;#39;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;,&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Putting the delimiter first is simply more convenient.
It is much more likely you&amp;#8217;ll be splitting multiple strings on the same separator,
as opposed to a single string and multiple separators.
The argument order of &lt;code&gt;splitOn&lt;/code&gt; is making the common use case slightly easier
by moving the more &amp;#8220;stable&amp;#8221; parameter to the&amp;nbsp;front.&lt;/p&gt;
&lt;p&gt;This practice generalizes to all curried functions,
forming a simple&amp;nbsp;rule:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The more likely it is for an argument to remain &lt;em&gt;constant&lt;/em&gt; between calls,
the sooner it should appear in the function&amp;nbsp;signature.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Note how this is different compared to any language
where functions may take variable number of arguments.
In Python, for example, the equivalent of &lt;code&gt;splitOn&lt;/code&gt; is defined&amp;nbsp;as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sep&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and the implicit default value for &lt;code&gt;sep&lt;/code&gt; is essentially &amp;#8220;any whitespace character&amp;#8221;.
In many cases, this is exactly what we want,
making the following calls possible&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Alice has a cat&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Alice&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;has&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;cat&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So, as a less-used argument, &lt;code&gt;sep&lt;/code&gt; actually goes last in &lt;code&gt;str.split&lt;/code&gt;,
as it is often desirable to omit it altogether.
Under the currying regime, however, we put it &lt;em&gt;first&lt;/em&gt;,
so that we can fix it to a chosen value and obtain a more specialized version of the&amp;nbsp;function.&lt;/p&gt;
&lt;h4&gt;The fewer arguments, the&amp;nbsp;better&lt;/h4&gt;
&lt;p&gt;Another thing you&amp;#8217;d encounter in languages with flexible function definitions
is the proliferation of optional&amp;nbsp;arguments:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://example.com/foo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;arg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
                        &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;field&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
                        &lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;pass&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                        &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;User-Agent&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;My Amazing App&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
                        &lt;span class="n"&gt;cookies&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;c_is&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;for_cookie&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
                        &lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;attachment.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;file.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;rb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)},&lt;/span&gt;
                        &lt;span class="n"&gt;allow_redirects&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;5.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Trying to translate this directly to a functional paradigm
would result in extremely unreadable function calls &amp;#8212;
doubly so when you don&amp;#8217;t actually need all those arguments
and have to provide some canned&amp;nbsp;defaults:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;response&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kt"&gt;Requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;http://example.com/foo&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;&amp;#39;arg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="kt"&gt;[]&lt;/span&gt; &lt;span class="kt"&gt;Nothing&lt;/span&gt; &lt;span class="kt"&gt;[]&lt;/span&gt; &lt;span class="kt"&gt;[]&lt;/span&gt; &lt;span class="kt"&gt;[]&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt; &lt;span class="kt"&gt;Nothing&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What does that &lt;code&gt;True&lt;/code&gt; mean, for example?
Or what exactly does each empty list signify?
It&amp;#8217;s impossible to know just by looking at the function call&amp;nbsp;alone.&lt;/p&gt;
&lt;p&gt;Long argument lists are thus detrimental to the quality of functional APIs.
It&amp;#8217;s much harder to correctly apply the previous rule (least used arguments first)
when there are so many possible&amp;nbsp;permutations.&lt;/p&gt;
&lt;p&gt;What should we do then?&amp;#8230;
In some cases, including the above example of an &lt;span class="caps"&gt;HTTP&lt;/span&gt; library,
we cannot simply cut out features in the name of elegance.
The necessary information needs to go &lt;em&gt;somewhere&lt;/em&gt;,
meaning we need to find at least somewhat acceptable place for&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;Fortunately, we have a couple of options
that should help us with solving this&amp;nbsp;problem.&lt;/p&gt;
&lt;h5&gt;Combinators /&amp;nbsp;builders&lt;/h5&gt;
&lt;p&gt;Looking back at the last example in Python,
we can see why the function call remains readable
even if it sprouts a dozen or so additional&amp;nbsp;arguments.&lt;/p&gt;
&lt;p&gt;The obvious reason is that
each one has been uniquely identified by a &lt;em&gt;name&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;In order to emulate some form of what&amp;#8217;s called keyword arguments,
we can split the single function call into multiple stages.
Each one would then supply one piece of data,
with a matching function name serving as a readability&amp;nbsp;cue:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;response&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;sendRequest&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;
            &lt;span class="n"&gt;withHeaders&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;User-Agent&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;My Amazing App&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;
            &lt;span class="n"&gt;withBasicAuth&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;user&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;pass&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;
            &lt;span class="n"&gt;withData&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;field&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;value&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;
                &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;http://example.com/foo&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If we follow this approach,
the caller would only invoke those intermediate functions
that fit his particular use case.
The &lt;span class="caps"&gt;API&lt;/span&gt; above could still offer &lt;code&gt;withCookies&lt;/code&gt;, &lt;code&gt;withFiles&lt;/code&gt;,
or any of the other combinators,
but their usage shall be completely&amp;nbsp;optional.&lt;/p&gt;
&lt;p&gt;Pretty neat,&amp;nbsp;right?&lt;/p&gt;
&lt;p&gt;Thing is, the implementation would be a little involved here.
We would clearly need to carry some data between the various &lt;code&gt;withFoo&lt;/code&gt; calls,
which requires some additional data types in addition to plain functions.
At minimum, we need something to represent the &lt;code&gt;Request&lt;/code&gt;,
as it is created by the &lt;code&gt;get&lt;/code&gt; function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;get&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Request&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and then &amp;#8220;piped&amp;#8221; through &lt;code&gt;withFoo&lt;/code&gt; transformers like this&amp;nbsp;one:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;withBasicAuth&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Request&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;so that it can we can finally send&amp;nbsp;it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;sendRequest&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Request&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;IO&lt;/span&gt; &lt;span class="kt"&gt;Response&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Such &lt;code&gt;Request&lt;/code&gt; type needs to keep track of all the additional parameters
that may have been tacked onto&amp;nbsp;it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kr"&gt;type&lt;/span&gt; &lt;span class="kt"&gt;Request&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Param&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;  &lt;span class="c1"&gt;-- Text is the URL&lt;/span&gt;

&lt;span class="kr"&gt;data&lt;/span&gt; &lt;span class="kt"&gt;Param&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Header&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt;
           &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;BasicAuth&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt;
           &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;Data&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
           &lt;span class="c1"&gt;-- and so on&lt;/span&gt;

&lt;span class="c1"&gt;-- example&lt;/span&gt;
&lt;span class="nf"&gt;withBasicAuth&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="n"&gt;pass&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;BasicAuth&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="n"&gt;pass&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;All of a sudden, what would be a single function explodes into a collection of data types
and associated&amp;nbsp;combinators.&lt;/p&gt;
&lt;p&gt;In Haskell at least,
we can forgo some of the boilerplate by automatically deriving an instance
of &lt;a href="https://hackage.haskell.org/package/base-4.10.0.0/docs/Data-Monoid.html"&gt;&lt;code&gt;Monoid&lt;/code&gt;&lt;/a&gt;
(or perhaps a &lt;a href="https://hackage.haskell.org/package/base-4.10.0.0/docs/Data-Semigroup.html"&gt;&lt;code&gt;Semigroup&lt;/code&gt;&lt;/a&gt;).
Rather than invoking a series of combinators,
clients would then build their requests through repeated &lt;code&gt;mappend&lt;/code&gt;s&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;response&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;sendRequest&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;http://example.com/foo&amp;quot;&lt;/span&gt;
                          &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;header&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;User-Agent&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;My Awesome App&amp;quot;&lt;/span&gt;
                          &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;basicAuth&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;user&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;pass&amp;quot;&lt;/span&gt;
                          &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;field&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;value&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This mini-&lt;a href="https://en.wikipedia.org/wiki/Domain-specific_language"&gt;&lt;span class="caps"&gt;DSL&lt;/span&gt;&lt;/a&gt;
looks very similar to keyword arguments in Python,
as well as the equivalent Builder pattern from Java, Rust, and others.
What&amp;#8217;s disappointing, however,
is that it doesn&amp;#8217;t easily beat those solutions in terms of compile-time safety.
Unless you invest into some tricky type-level hacks,
there is nothing to prevent the users from building invalid requests at&amp;nbsp;runtime:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;reqParams&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;http://example.com/foo&amp;quot;&lt;/span&gt;
&lt;span class="c1"&gt;--&lt;/span&gt;
&lt;span class="c1"&gt;-- ... lots of code in between ...&lt;/span&gt;
&lt;span class="c1"&gt;--&lt;/span&gt;
&lt;span class="nf"&gt;response&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;sendRequest&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;
            &lt;span class="n"&gt;reqParams&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;http://example.com/bar&amp;quot;&lt;/span&gt; &lt;span class="c1"&gt;-- woops!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Compared to a plain function (with however many arguments),
we have actually lost some measure of correctness&amp;nbsp;here.&lt;/p&gt;
&lt;h5&gt;Record&amp;nbsp;types&lt;/h5&gt;
&lt;p&gt;In many cases, fortunately,
there is another way to keep our calls both flexible and safe against runtime errors.
We just need to change the representation of the input type (here, &lt;code&gt;Request&lt;/code&gt;)
into a &lt;em&gt;record&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Record is simply a user-defined type that&amp;#8217;s a collection of &lt;em&gt;named fields&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Most languages (especially imperative ones: C, C++, Go, Rust, &amp;#8230;) call those &lt;em&gt;structures&lt;/em&gt;,
and use the &lt;code&gt;struct&lt;/code&gt; keyword to signify a record definition.
In functional programming parlance, they are also referred to as &lt;em&gt;product types&lt;/em&gt;;
this is because the joint record type is a Cartesian product of its individual field types&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Going back to our example,
it shouldn&amp;#8217;t be difficult to define a record representing an &lt;span class="caps"&gt;HTTP&lt;/span&gt; &lt;code&gt;Request&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kr"&gt;data&lt;/span&gt; &lt;span class="kt"&gt;Request&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Request&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;reqURL&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;URL&lt;/span&gt;
                       &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reqMethod&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Method&lt;/span&gt;
                       &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reqHeaders&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="kt"&gt;Header&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
                       &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reqPostData&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
                       &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In fact, I suspect most programmers would naturally reach for this notation&amp;nbsp;first.&lt;/p&gt;
&lt;p&gt;Having this definition,
calls to &lt;code&gt;sendRequest&lt;/code&gt; can be rewritten to take a record instance
that we construct on the spot&lt;sup id="fnref:4"&gt;&lt;a class="footnote-ref" href="#fn:4" rel="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;response&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;sendRequest&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;
    &lt;span class="kt"&gt;Request&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;reqURL&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;http://example.com/bar&amp;quot;&lt;/span&gt;
            &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reqMethod&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;GET&lt;/span&gt;
            &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reqHeaders&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;User-Agent&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;My Awesome App&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
            &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reqPostData&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;[]&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Compare this snippet to the Python example from the beginning of this section.
It comes remarkably close, right?
The &lt;code&gt;Request&lt;/code&gt; record and its fields can indeed work quite nicely
as substitutes for keyword&amp;nbsp;arguments.&lt;/p&gt;
&lt;p&gt;But besides the readability boon of having &amp;#8220;argument&amp;#8221; names at the call site.
we&amp;#8217;ve also gained stronger correctness checks.
For example, there is no way anymore to accidentally supply the &lt;span class="caps"&gt;URL&lt;/span&gt; field&amp;nbsp;twice.&lt;/p&gt;
&lt;h4&gt;Different functions for different&amp;nbsp;things&lt;/h4&gt;
&lt;p&gt;Astute readers may have noticed at least two things about the previous&amp;nbsp;solutions.&lt;/p&gt;
&lt;p&gt;First, they are not mutually incompatible.
Quite the opposite, actually: they compose very neatly, allowing us to combine
builder functions with the &lt;em&gt;record update&lt;/em&gt; syntax in the final &lt;span class="caps"&gt;API&lt;/span&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;response&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;sendRequest&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;http://example.com/baz&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;reqHeaders&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;User-Agent&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;My Awesome App&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This cuts out basically all the boilerplate of record-based calls,
leaving only the parts that actually differ from the defaults&lt;sup id="fnref:5"&gt;&lt;a class="footnote-ref" href="#fn:5" rel="footnote"&gt;5&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;But on the second and more important note:
we don&amp;#8217;t seem to be talking about &lt;em&gt;currying&lt;/em&gt; anymore.
Does it mean it loses its usefulness
once we go beyond certain threshold of&amp;nbsp;complexity?&amp;#8230;&lt;/p&gt;
&lt;p&gt;Thankfully, the answer is no.
While some APIs may require more advanced techniques
to access the full breadth of their functionality,
it is always possible to expose some carefully constructed facade
that is conducive to partial&amp;nbsp;application.&lt;/p&gt;
&lt;p&gt;Consider, for example, the functionality exposed by this set of &lt;span class="caps"&gt;HTTP&lt;/span&gt;&amp;nbsp;wrappers:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;head&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;URL&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Request&lt;/span&gt;
&lt;span class="nf"&gt;headWith&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="kt"&gt;Header&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;URL&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Request&lt;/span&gt;
&lt;span class="nf"&gt;get&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;URL&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Request&lt;/span&gt;
&lt;span class="nf"&gt;getWith&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="kt"&gt;Header&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;URL&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Request&lt;/span&gt;
&lt;span class="nf"&gt;postForm&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;URL&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Request&lt;/span&gt;
&lt;span class="nf"&gt;postFormWith&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="kt"&gt;Header&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;URL&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Request&lt;/span&gt;
&lt;span class="nf"&gt;toURL&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Method&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;URL&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Request&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Each one is obviously curry-friendly&lt;sup id="fnref:6"&gt;&lt;a class="footnote-ref" href="#fn:6" rel="footnote"&gt;6&lt;/a&gt;&lt;/sup&gt;.
Combined, they also offer a pretty comprehensive &lt;span class="caps"&gt;API&lt;/span&gt; surface.
And should they prove insufficient,
you&amp;#8217;d still have the builder pattern and/or record updates to fall back on &amp;#8212;
either for specialized one-off cases, or for writing your own&amp;nbsp;wrappers.&lt;/p&gt;
&lt;p&gt;Naturally, this technique of layered &lt;span class="caps"&gt;API&lt;/span&gt; design &amp;#8212;
with simple wrappers hiding a progressively more advanced core &amp;#8212;
isn&amp;#8217;t limited to just functional programming.
In some way, it is what &lt;em&gt;good&lt;/em&gt; &lt;span class="caps"&gt;API&lt;/span&gt; design looks like in general.
But in &lt;span class="caps"&gt;FP&lt;/span&gt; languages, it becomes especially important,
because the expressive benefits of partial application are so paramount&amp;nbsp;there&lt;/p&gt;
&lt;p&gt;Fortunately, these principles seem to be followed pretty consistently,
at least within the Haskell ecosystem.
You can see it in the design of
&lt;a href="https://www.stackage.org/haddock/lts-9.12/http-client-0.5.7.0/Network-HTTP-Client.html"&gt;the &lt;code&gt;http-client&lt;/code&gt; package&lt;/a&gt;,
which is the real world extension of the &lt;span class="caps"&gt;HTTP&lt;/span&gt; interface outlined here.
More evidently, it can be observed in any of the numerous packages
the expose both a basic &lt;code&gt;foo&lt;/code&gt; and a more customizable &lt;code&gt;fooWith&lt;/code&gt; functions;
popular examples include
&lt;a href="https://www.stackage.org/haddock/lts-9.12/async-2.1.1.1/Control-Concurrent-Async.html#v:cancelWith"&gt;the &lt;code&gt;async&lt;/code&gt; package&lt;/a&gt;,
&lt;a href="https://hackage.haskell.org/package/zlib-0.6.1.2/docs/Codec-Compression-Zlib.html#g:2"&gt;the &lt;code&gt;zlib&lt;/code&gt; library&lt;/a&gt;,
and &lt;a href="https://www.stackage.org/haddock/lts-9.12/regex-compat-tdfa-0.95.1.4/Text-Regex.html"&gt;the &lt;code&gt;Text.Regex&lt;/code&gt; module&lt;/a&gt;.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;It&amp;#8217;d be more common in Python to write this as &lt;code&gt;"Alice has a cat".split()&lt;/code&gt;,
but this form would make it less obvious how the arguments are passed.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;A great example of this pattern can be found
in the &lt;a href="http://hackage.haskell.org/package/optparse-applicative"&gt;&lt;em&gt;optparse-applicative&lt;/em&gt; package&lt;/a&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;Tuples (like &lt;code&gt;(Int, String)&lt;/code&gt;) are also product types.
They can be thought of as ad-hoc records where field indices serve as rudimentary &amp;#8220;names&amp;#8221;.
In fact, some languages even use the dotted notation to access fields
of both records/structs (&lt;code&gt;x.foo&lt;/code&gt;) and tuples (&lt;code&gt;y.0&lt;/code&gt;).&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:4"&gt;
&lt;p&gt;For simplicity, I&amp;#8217;m gonna assume the &lt;code&gt;URL&lt;/code&gt; and &lt;code&gt;Header&lt;/code&gt; types
can be &amp;#8220;magically&amp;#8221; constructed from string literals
through the &lt;span class="caps"&gt;GHC&lt;/span&gt;&amp;#8217;s &lt;code&gt;OverloadedStrings&lt;/code&gt; extension.&amp;#160;&lt;a class="footnote-backref" href="#fnref:4" rev="footnote" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:5"&gt;
&lt;p&gt;In many languages,
we can specify more formally what the &amp;#8220;default&amp;#8221; means for a compound-type like &lt;code&gt;Request&lt;/code&gt;,
and sometimes even &lt;em&gt;derive&lt;/em&gt; it automatically.
Examples include
&lt;a href="https://hackage.haskell.org/package/data-default-0.7.1.1/docs/Data-Default.html#t:Default"&gt;the &lt;code&gt;Default&lt;/code&gt; typeclass&lt;/a&gt; in Haskell,
&lt;a href="https://doc.rust-lang.org/std/default/trait.Default.html"&gt;the &lt;code&gt;Default&lt;/code&gt; trait&lt;/a&gt; in Rust,
and the default/argumentless/trivial constructors in C++ &lt;em&gt;et al&lt;/em&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:5" rev="footnote" title="Jump back to footnote 5 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:6"&gt;
&lt;p&gt;Haskell programmers may especially notice how the last function is designed specifically
for infix application: &lt;code&gt;response &amp;lt;- sendRequest $ POST `toUrl` url&lt;/code&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:6" rev="footnote" title="Jump back to footnote 6 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="functional programming"></category><category term="currying"></category><category term="partial application"></category><category term="Haskell"></category><category term="API"></category><category term="abstraction"></category></entry><entry><title>Small Rust crates I (almost) alwaysÂ use</title><link href="http://xion.io/post/code/rust-little-crates.html" rel="alternate"></link><updated>2017-10-31T15:21:00+00:00</updated><author><name>Karol Kuczmarski</name></author><id>tag:xion.io,2017-10-31:post/code/rust-little-crates.html</id><summary type="html">&lt;p&gt;Alternative clickbait title: &lt;em&gt;My Little Crates: Rust is Magic&lt;/em&gt;&amp;nbsp;:-)&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Due to its relatively scant standard library,
programming in Rust inevitably involves pulling in a good number of third-party&amp;nbsp;dependencies.&lt;/p&gt;
&lt;p&gt;Some of them deal with problems that are solved with built-ins
in languages that take a more &amp;#8220;batteries included&amp;#8221; approach.
A good example would be the Python&amp;#8217;s &lt;code&gt;re&lt;/code&gt; module,
whose moral equivalent in the Rust ecosystem is &lt;a href="http://docs.rs/regex"&gt;the &lt;em&gt;regex&lt;/em&gt; crate&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Things like regular expressions, however, represent comparatively large problems.
It isn&amp;#8217;t very surprising that dedicated libraries exist to address them.
It is less common for a language to offer &lt;em&gt;small&lt;/em&gt; packages
that target very specialized&amp;nbsp;applications.&lt;/p&gt;
&lt;p&gt;As in, one function/type/macro-kind of specialized,
or perhaps only a little larger than&amp;nbsp;that.&lt;/p&gt;
&lt;p&gt;In this post, we&amp;#8217;ll take a whirlwind tour through a bunch of such essential&amp;nbsp;&amp;#8220;micropackages&amp;#8221;.&lt;/p&gt;
&lt;h4&gt;either&lt;/h4&gt;
&lt;p&gt;Rust has the built-in &lt;code&gt;Result&lt;/code&gt; type, which is a sum&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; of an &lt;code&gt;Ok&lt;/code&gt; outcome or an &lt;code&gt;Err&lt;/code&gt;or.
It forms the basis of a general error handling mechanism in the&amp;nbsp;language.&lt;/p&gt;
&lt;p&gt;Structurally, however, &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; is just an alternative between the types &lt;code&gt;T&lt;/code&gt; and &lt;code&gt;E&lt;/code&gt;.
You may want to use such an enum for other purposes
than representing results of fallible operations.
Unfortunately, because of the strong inherent meaning of &lt;code&gt;Result&lt;/code&gt;,
such usage would be unidiomatic and highly&amp;nbsp;confusing.&lt;/p&gt;
&lt;p&gt;This is why the &lt;a href="http://docs.rs/either"&gt;&lt;em&gt;either&lt;/em&gt; crate&lt;/a&gt; exists.
It contains the following &lt;code&gt;Either&lt;/code&gt; type:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;enum&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Either&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Left&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Right&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;While it is isomorphic to &lt;code&gt;Result&lt;/code&gt;,
it carries no connotation to the entrenched error handling practices&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;.
Additionally, it offers symmetric combinator methods such as &lt;code&gt;map_left&lt;/code&gt;
or &lt;code&gt;right_and_then&lt;/code&gt; for chaining computations involving the &lt;code&gt;Either&lt;/code&gt; values.&lt;/p&gt;
&lt;h4&gt;lazy_static&lt;/h4&gt;
&lt;p&gt;As a design choice, Rust doesn&amp;#8217;t allow for safe access to global mutable variables.
The semi-standard way of introducing those into your code
is therefore &lt;a href="http://docs.rs/lazy_static"&gt;the &lt;em&gt;lazy_static&lt;/em&gt; crate&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;However, the most important usage for it is to declare lazy initialized &lt;em&gt;constants&lt;/em&gt;
of more complex&amp;nbsp;types:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;lazy_static&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;ref&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;TICK_INTERVAL&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Duration&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Duration&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;from_secs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The trick isn&amp;#8217;t entirely transparent&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;,
but it&amp;#8217;s the best you can do until we get a proper support
for &lt;a href="https://github.com/rust-lang/rfcs/issues/322"&gt;compile-time expressions&lt;/a&gt; in the&amp;nbsp;language.&lt;/p&gt;
&lt;h4&gt;maplit&lt;/h4&gt;
&lt;p&gt;To go nicely with the crate above &amp;#8212;
and to act as a natural syntactic follow-up to
&lt;a href="https://doc.rust-lang.org/1.3.0/std/macro.vec!.html"&gt;the standard &lt;code&gt;vec![]&lt;/code&gt; macro&lt;/a&gt; &amp;#8212;
we&amp;#8217;ve got the &lt;a href="http://docs.rs/maplit"&gt;&lt;em&gt;maplit&lt;/em&gt; crate&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;What it does is add &lt;code&gt;HashMap&lt;/code&gt; and &lt;code&gt;HashSet&lt;/code&gt; &lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;literals&amp;#8221; by defining
some very simple &lt;code&gt;hashmap!&lt;/code&gt; and &lt;code&gt;hashset!&lt;/code&gt; macros:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;lazy_static&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;ref&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;IMAGE_EXTENSIONS&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;HashMap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;&amp;#39;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ImageFormat&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;hashmap&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;gif&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ImageFormat&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;GIF&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;jpeg&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ImageFormat&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;JPEG&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;jpg&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ImageFormat&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;JPG&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;png&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ImageFormat&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;PNG&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Internally, &lt;code&gt;hashmap!&lt;/code&gt; expands to the appropriate amount of &lt;code&gt;HashMap::insert&lt;/code&gt; calls,
returning the finished hash map with all the keys and values&amp;nbsp;given.&lt;/p&gt;
&lt;h4&gt;try_opt&lt;/h4&gt;
&lt;p&gt;Before the &lt;code&gt;?&lt;/code&gt; operator was introduced to Rust,
the idiomatic way of propagating erroneous &lt;code&gt;Result&lt;/code&gt;s was the &lt;code&gt;try!&lt;/code&gt; macro.&lt;/p&gt;
&lt;p&gt;A similar macro can also be implemented for &lt;code&gt;Option&lt;/code&gt; types
so that it propagates the &lt;code&gt;None&lt;/code&gt;s upstream.
The &lt;a href="http://docs.rs/try_opt"&gt;&lt;em&gt;try_opt&lt;/em&gt; crate&lt;/a&gt; is doing precisely that,
and the macro can be used in a straightforward&amp;nbsp;manner:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;parse_ipv4&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="kt"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;u8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;u8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;u8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;u8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;lazy_static&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;ref&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;RE&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Regex&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Regex&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="s-Raw"&gt;r&amp;quot;^(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})$&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;caps&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;try_opt&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;captures&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;try_opt&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;caps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="n"&gt;as_str&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;try_opt&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;caps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="n"&gt;as_str&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;try_opt&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;caps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="n"&gt;as_str&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;try_opt&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;caps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="n"&gt;as_str&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;try_opt&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;try_opt&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;try_opt&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;try_opt&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Until Rust supports &lt;code&gt;?&lt;/code&gt; for &lt;code&gt;Option&lt;/code&gt;s (which is &lt;a href="https://github.com/rust-lang/rust/issues/31436"&gt;planned&lt;/a&gt;),
this &lt;code&gt;try_opt!&lt;/code&gt; macro can serve as an acceptable&amp;nbsp;workaround.&lt;/p&gt;
&lt;h4&gt;exitcode&lt;/h4&gt;
&lt;p&gt;It is a common convention in basically every mainstream &lt;span class="caps"&gt;OS&lt;/span&gt;
that a process has finished with an error
if it exits with a code different than 0 (zero),
Linux divides the space of error codes &lt;a href="http://www.tldp.org/LDP/abs/html/exitcodes.html"&gt;further&lt;/a&gt;,
and &amp;#8212; along with &lt;span class="caps"&gt;BSD&lt;/span&gt; &amp;#8212; it also includes the &lt;em&gt;sysexits.h&lt;/em&gt; header with some more specialized&amp;nbsp;codes.&lt;/p&gt;
&lt;p&gt;These have been adopted by great many programs
and &lt;a href="https://docs.python.org/3.0/library/os.html#os.EX_OK"&gt;languages&lt;/a&gt;.
In Rust, those semi-standard names for common errors can be used, too.
All you need to do is add &lt;a href="http://docs.rs/exitcode"&gt;the &lt;em&gt;exitcode&lt;/em&gt; crate&lt;/a&gt; to your&amp;nbsp;project:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;unwrap_or_else&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;print_args_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exitcode&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;USAGE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In addition to constants like &lt;code&gt;USAGE&lt;/code&gt; or &lt;code&gt;TEMPFAIL&lt;/code&gt;,
the &lt;em&gt;exitcode&lt;/em&gt; crate also defines an &lt;code&gt;ExitCode&lt;/code&gt; alias
for the integer type holding the exit codes.
You can use it, among other things, as a return type of your top-level&amp;nbsp;functions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;do_stuff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;do_stuff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;exitcode&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;ExitCode&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;enum-set&lt;/h4&gt;
&lt;p&gt;In Java, there is a specialization of the general &lt;code&gt;Set&lt;/code&gt; interface
that works for enum types:
&lt;a href="https://docs.oracle.com/javase/7/docs/api/java/util/EnumSet.html"&gt;the &lt;code&gt;EnumSet&lt;/code&gt; class&lt;/a&gt;.
Its members are represented very compactly as &lt;em&gt;bits&lt;/em&gt; rather than hashed&amp;nbsp;elements.&lt;/p&gt;
&lt;p&gt;A similar (albeit slightly less powerful&lt;sup id="fnref:4"&gt;&lt;a class="footnote-ref" href="#fn:4" rel="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt;) structure has been implemented
in the &lt;a href="http://docs.rs/enum-set"&gt;&lt;em&gt;enum-set&lt;/em&gt; crate&lt;/a&gt;. Given a &lt;code&gt;#[repr(u32)]&lt;/code&gt; enum&amp;nbsp;type:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#[repr(u32)]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#[derive(Clone, Copy, Debug Eq, Hash, PartialEq)]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;enum&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Weekday&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Monday&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Tuesday&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Wednesday&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Thursday&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Friday&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Saturday&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sunday&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;you can create an &lt;code&gt;EnumSet&lt;/code&gt; of its&amp;nbsp;variants:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;weekend&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;EnumSet&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Weekday&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;EnumSet&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;weekend&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Weekday&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Saturday&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;weekend&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Weekday&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Sunday&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;as long as you provide a simple trait impl that specifies
how to convert those enum values to and from &lt;code&gt;u32&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;impl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;enum_set&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;CLike&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Weekday&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to_u32&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;u32&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;u32&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;unsafe&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;from_u32&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;u32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Self&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;mem&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;transmute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The advantage is having a set structure represented by a single, unsigned 32-bit integer,
leading to &lt;em&gt;O&lt;/em&gt;(1) complexity of &lt;em&gt;all&lt;/em&gt; common set operations.
This includes membership checks, the union of two sets, their intersection, difference, and so&amp;nbsp;on.&lt;/p&gt;
&lt;h4&gt;antidote&lt;/h4&gt;
&lt;p&gt;As part of fulfilling the promise of Fearless Concurrencyâ¢,
Rust offers multiple synchronization primitives
that are all defined in &lt;a href="https://doc.rust-lang.org/std/sync/"&gt;the &lt;code&gt;std::sync&lt;/code&gt; module&lt;/a&gt;.
One thing that &lt;code&gt;Mutex&lt;/code&gt;, &lt;code&gt;RwLock&lt;/code&gt;, and similar mechanisms there have in common
is that their locks can become &amp;#8220;poisoned&amp;#8221; if a thread panicks while holding them.
As a result, acquiring a lock requires handling the potential &lt;code&gt;PoisonError&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For many programs, however, lock poisoning is not even a remote,
but a straight-up &lt;em&gt;impossible&lt;/em&gt; situation.
If you follow the best practices of concurrent resource sharing,
you won&amp;#8217;t be holding locks for more than a few instructions,
devoid of &lt;code&gt;unwrap&lt;/code&gt;s or any other opportunity to &lt;code&gt;panic!()&lt;/code&gt;.
Unfortunately, you cannot prove this to the Rust compiler statically,
so it will still require you to handle a &lt;code&gt;PoisonError&lt;/code&gt; that cannot&amp;nbsp;happen.&lt;/p&gt;
&lt;p&gt;This is where the aptly named &lt;a href="http://docs.rs/antidote"&gt;&lt;em&gt;antidote&lt;/em&gt; crate&lt;/a&gt; crate offers help.
In it, you can find all the same locks &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; guards &lt;span class="caps"&gt;API&lt;/span&gt; that is offered by &lt;code&gt;std::sync&lt;/code&gt;,
just without the &lt;code&gt;PoisonError&lt;/code&gt;.
In many cases, this removal has radically simplified the interface,
for example by turning &lt;code&gt;Result&amp;lt;Guard, Error&amp;gt;&lt;/code&gt; return types into just &lt;code&gt;Guard&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The caveat, of course, is that you need to ensure all threads holding these &amp;#8220;immunized&amp;#8221; locks&amp;nbsp;either:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;don&amp;#8217;t panic at all;&amp;nbsp;or&lt;/li&gt;
&lt;li&gt;don&amp;#8217;t leave guarded resources in an inconsistent state if they &lt;em&gt;do&lt;/em&gt;&amp;nbsp;panic&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Like it&amp;#8217;s been mentioned earlier,
the best way to make that happen is to keep lock-guarded critical sections minimal and&amp;nbsp;infallible.&lt;/p&gt;
&lt;h4&gt;matches&lt;/h4&gt;
&lt;p&gt;Pattern matching is one of the most important features of Rust,
but some of the relevant language constructs have awkward shortcomings.
The &lt;code&gt;if let&lt;/code&gt; conditional, for example, cannot be combined with boolean&amp;nbsp;tests:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_good&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and thus requires additional nesting, or a different approach&amp;nbsp;altogether.&lt;/p&gt;
&lt;p&gt;Thankfully, to help with situations like this,
there is the &lt;a href="http://docs.rs/matches"&gt;&lt;em&gt;matches&lt;/em&gt; crate&lt;/a&gt; with a bunch of convenient macros.
Besides &lt;a href="https://docs.rs/matches/0.1.6/matches/macro.matches.html"&gt;its namesake, &lt;code&gt;matches!&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;matches&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_good&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;it also exposes assertion macros
(&lt;a href="https://docs.rs/matches/0.1.6/matches/macro.assert_matches.html"&gt;&lt;code&gt;assert_match!&lt;/code&gt;&lt;/a&gt;
and &lt;a href="https://docs.rs/matches/0.1.6/matches/macro.debug_assert_matches.html"&gt;&lt;code&gt;debug_assert_match!&lt;/code&gt;&lt;/a&gt;)
that can be used in both production and test&amp;nbsp;code.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;This concludes the overview of small Rust crates, at least for&amp;nbsp;now.&lt;/p&gt;
&lt;p&gt;To be certain, these crates are by far not the only ones that are small in size
and simultaneously almost indispensable.
Many more great libraries can be found
e.g. in the &lt;a href="https://github.com/rust-unofficial/awesome-rust#libraries"&gt;Awesome Rust registry&lt;/a&gt;,
though obviously you could argue if all of them are truly &amp;#8220;micro&amp;#8221;&amp;nbsp;;-)&lt;/p&gt;
&lt;p&gt;If you know more crates in the similar vein,
make sure to mention them in the&amp;nbsp;comments!&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;A &lt;em&gt;sum type&lt;/em&gt; consists of several alternatives,
out of which only one has been picked for a particular instance.
The other common name for it is a &lt;em&gt;tagged union&lt;/em&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;Unless you come from Haskell, that is, where &lt;code&gt;Either&lt;/code&gt; is the equivalent of Rust&amp;#8217;s &lt;code&gt;Result&lt;/code&gt; :)&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;You will occasionally need an explicit &lt;code&gt;*&lt;/code&gt; to trigger the &lt;code&gt;Deref&lt;/code&gt; coercion it uses.&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:4"&gt;
&lt;p&gt;It only supports unitary enums of up to 32 variants.&amp;#160;&lt;a class="footnote-backref" href="#fnref:4" rev="footnote" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="Rust"></category><category term="libraries"></category></entry><entry><title>O(n log n) isnâtÂ bad</title><link href="http://xion.io/post/programming/o-nlogn-isnt-bad.html" rel="alternate"></link><updated>2017-10-19T14:59:00+00:00</updated><author><name>Karol Kuczmarski</name></author><id>tag:xion.io,2017-10-19:post/programming/o-nlogn-isnt-bad.html</id><summary type="html">&lt;p&gt;Most programmers should be familiar with the Big O notation of computational complexity.
This is how, in very theoretical terms, we are describing the relative differences in the performance of&amp;nbsp;algorithms.&lt;/p&gt;
&lt;p&gt;Excluding the case of constant time complexity (&lt;code&gt;O(1)&lt;/code&gt;),
the vast majority of practical algorithms falls into one of the following&amp;nbsp;classes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;O(log n)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;O(n)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;O(n log n)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;O(nÂ²)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The further down a class is on this list, the worse (less efficient) it gets.
What may not be completely obvious, however, is the magnitude of&amp;nbsp;differences.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s have a closer&amp;nbsp;look.&lt;/p&gt;
&lt;h4&gt;The best and the&amp;nbsp;worst&lt;/h4&gt;
&lt;p&gt;First, it&amp;#8217;s pretty easy when it comes to the extreme points.
A logarithmic complexity is clearly great,
because the number of operations barely even grows as the size of input increases.
For &lt;code&gt;N&lt;/code&gt; of one million,  the (natural&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;) logarithm is equal to about 14.
For one &lt;em&gt;trillion&lt;/em&gt; &amp;#8212; million times more &amp;#8212; &lt;code&gt;log n&lt;/code&gt; is only&amp;nbsp;27!&lt;/p&gt;
&lt;p&gt;Such amazing scalability is one of the reasons
why databases, for example,
can execute queries extremely efficiently even for millions or billions of&amp;nbsp;records.&lt;/p&gt;
&lt;p&gt;On the other end, an algorithm that has quadratic complexity
will only do well for very small datasets.
It can still be useful in practice,
especially as a small-input optimization of some larger procedure&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;,
or because of some other desirable properties (like good&amp;nbsp;parallelizability).&lt;/p&gt;
&lt;p&gt;Outside of those carefully selected cases, however,
the computational requirements of &lt;code&gt;O(nÂ²)&lt;/code&gt; for any large dataset are usually too&amp;nbsp;great.&lt;/p&gt;
&lt;h4&gt;Middle&amp;nbsp;ground&lt;/h4&gt;
&lt;p&gt;As for the remaining two classes,
the linear one (&lt;code&gt;O(n)&lt;/code&gt;) is probably the easiest to reason&amp;nbsp;about.&lt;/p&gt;
&lt;p&gt;In a linear algorithm,
the number of operations increases steadily along with the size of input.&lt;br&gt;
For thousand elements, you need roughly a thousand steps (times a constant factor).&lt;br&gt;
For a million, there will be a million operations&amp;nbsp;necessary.&lt;/p&gt;
&lt;p&gt;Thus, by itself, the linear scaling doesn&amp;#8217;t get any better or worse when data gets bigger&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;.
In many cases, it means there is nothing to be exploited in the structure of input set
that could make the running time any better
(compared to e.g. the reliance of logarithmic searches on sorted order).
Typically, all the data must be traversed at least once in its&amp;nbsp;entirety.&lt;/p&gt;
&lt;p&gt;All in all, it can be a decent time complexity,
but it&amp;#8217;s nothing to write home&amp;nbsp;about.&lt;/p&gt;
&lt;h4&gt;A function has no&amp;nbsp;name&lt;/h4&gt;
&lt;p&gt;What about &lt;code&gt;O(n log n)&lt;/code&gt;, then?
It falls between the linear and the quadratic,
which suggests that it&amp;#8217;s somewhere half-way between mediocre and awful.
We don&amp;#8217;t even have a widely used word for it,
meaning it is probably not even that&amp;nbsp;important.&lt;/p&gt;
&lt;p&gt;Both of those suppositions are&amp;nbsp;wrong.&lt;/p&gt;
&lt;p&gt;First, &lt;code&gt;O(n log n)&lt;/code&gt; isn&amp;#8217;t even remotely close to the &amp;#8220;median&amp;#8221; (whatever that means) of &lt;code&gt;O(n)&lt;/code&gt; and &lt;code&gt;O(nÂ²)&lt;/code&gt;.
In reality, its asymptotic rate of growth places it very close to the former.
You can see this pretty clearly by looking at the following&amp;nbsp;plot:&lt;/p&gt;
&lt;p style="text-align:center"&gt;
    &lt;img src="http://xion.io/images/time-complexity.png" alt="Time complexity plot"&gt;&lt;br&gt;
    &lt;small&gt;
        &lt;a href="http://coding-geek.com/how-databases-work/"&gt;Source&lt;/a&gt;
    &lt;/small&gt;
&lt;/p&gt;

&lt;p&gt;The gap between &lt;code&gt;O(n)&lt;/code&gt; and &lt;code&gt;O(n log n)&lt;/code&gt; barely even widens,
even as the values on vertical axis increase to the limits of&amp;nbsp;practicality.&lt;/p&gt;
&lt;p&gt;Indeed, the &lt;code&gt;log n&lt;/code&gt; part of the function grows slowly enough
that, for many practical purposes, it can be considered a large &amp;#8220;constant&amp;#8221; in the complexity formula.
Some complicated algorithm that&amp;#8217;s technically linear may therefore be a &lt;em&gt;worse&lt;/em&gt; choice
than a simpler solution with &lt;code&gt;O(n log n)&lt;/code&gt; scaling.&lt;/p&gt;
&lt;h4&gt;Sorting it&amp;nbsp;out&lt;/h4&gt;
&lt;p&gt;What are the typical situations where &lt;code&gt;O(n log n)&lt;/code&gt; arises in practice?
Very often, it has to do with establishing some kind of &lt;em&gt;ordering&lt;/em&gt; of the input
which includes at least one of the&amp;nbsp;following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a wholesale sorting of it (using pairwise&amp;nbsp;comparison)&lt;/li&gt;
&lt;li&gt;repeated queries for the current maximum or minimum (via a priority&amp;nbsp;queue)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Considering that many practical algoithms &amp;#8212;
from &lt;a href="https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm"&gt;pathfinding&lt;/a&gt;
to &lt;a href="https://en.wikipedia.org/wiki/Huffman_coding"&gt;compression&lt;/a&gt; &amp;#8212;
utilize some form of sorting or sorted data structures,
it makes &lt;code&gt;O(n log n)&lt;/code&gt; quite an important complexity&amp;nbsp;class.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Natural logarithm has a base of &lt;em&gt;e&lt;/em&gt; = 2.71828183&amp;#8230;
The exact choice of logarithm base doesn&amp;#8217;t matter for asymptotic complexity,
because it changes only the constant coefficient in the &lt;code&gt;O(f(n))&lt;/code&gt; function.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;A widely used example is &lt;a href="https://en.wikipedia.org/wiki/Timsort"&gt;Timsort&lt;/a&gt;
which switches from merge sort (&lt;code&gt;O(log n)&lt;/code&gt;) to insertion sort (&lt;code&gt;O(nÂ²)&lt;/code&gt;)
when the array slice is short enough to warrant it.&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;In reality, practical factors like memory/cache size, &lt;span class="caps"&gt;OS&lt;/span&gt; scheduling behavior,
and a myriad of other things can make the actual running time scale sublinearly beyond a certain point.&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="algorithms"></category><category term="complexity"></category><category term="Big O"></category></entry><entry><title>The Printer Monad inÂ Haskell</title><link href="http://xion.io/post/code/haskell-printer-monad.html" rel="alternate"></link><updated>2017-08-04T12:39:00+00:00</updated><author><name>Karol Kuczmarski</name></author><id>tag:xion.io,2017-08-04:post/code/haskell-printer-monad.html</id><summary type="html">&lt;p&gt;Quite recently, I have encountered an interesting case of monad-based refactoring in&amp;nbsp;Haskell.&lt;/p&gt;
&lt;p&gt;Suppose you have a &lt;code&gt;ComplicatedRecord&lt;/code&gt;
that holds the results of some lengthy and important process in your program.
You want to present that data to the user in a nicely formatted way,
so you write a function which begins somewhat like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;{-# LANGUAGE RecordWildcards #-}&lt;/span&gt;

&lt;span class="c1"&gt;-- | Pretty-print the content of the record.&lt;/span&gt;
&lt;span class="nf"&gt;ppRecord&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;ComplicatedRecord&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;IO&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;
&lt;span class="nf"&gt;ppRecord&lt;/span&gt; &lt;span class="kt"&gt;ComplicatedRecord&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
    &lt;span class="c1"&gt;-- ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Inside, there is plenty of &lt;code&gt;putStrLn&lt;/code&gt; calls, likely hidden inside more specific subfunctions
that format all the numerous parts of &lt;code&gt;ComplicatedRecord&lt;/code&gt;.
But the &lt;code&gt;IO&lt;/code&gt; monad isn&amp;#8217;t there just for printing:
because the code went through multiple iterations,
some of this logic actually takes advantage of it by making additional system &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; network&amp;nbsp;calls.&lt;/p&gt;
&lt;p&gt;So yeah, it&amp;#8217;s not particularly&amp;nbsp;pretty.&lt;/p&gt;
&lt;p&gt;Now, however, we find out that the output we&amp;#8217;re printing here
shouldn&amp;#8217;t &lt;em&gt;always&lt;/em&gt; go directly to stdout.
In some cases, unsurprisingly, we actually want it back as a single string,
without having it sent to the standard output at&amp;nbsp;all.&lt;/p&gt;
&lt;h4&gt;Just $ return .&amp;nbsp;it&lt;/h4&gt;
&lt;p&gt;Your first instinct here may be to simply give back the final string (well, &lt;code&gt;Text&lt;/code&gt;)
as the function result&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;ppRecord&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;ComplicatedRecord&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;IO&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;However, this turns out to be rather awkward.
While in most other languages
we would simply accumulate output by progressively adding more data to a mutable result,
this would be much more inconvenient (and somewhat weird) to do in&amp;nbsp;Haskell.&lt;/p&gt;
&lt;p&gt;This is where the stdout-based approach seems cleaner;
instead of straightforward, sequential code like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;{-# LANGUAGE OverloadedStrings #-}&lt;/span&gt;

&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Control.Monad.Extra&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;whenJust&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Data.Text.IO&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;TextShow&lt;/span&gt;

&lt;span class="nf"&gt;ppOrder&lt;/span&gt; &lt;span class="kt"&gt;Order&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;putStrLn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Order #&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ordNumber&lt;/span&gt;
    &lt;span class="n"&gt;ppAddress&lt;/span&gt; &lt;span class="n"&gt;ordDeliveryAddress&lt;/span&gt;
    &lt;span class="n"&gt;forM_&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;zip&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;ordItems&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="nf"&gt;\&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
        &lt;span class="n"&gt;putStrLn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;showt&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="ow"&gt;::&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;. &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;itName&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; x&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;showt&lt;/span&gt; &lt;span class="n"&gt;itQuantity&lt;/span&gt;
    &lt;span class="n"&gt;whenJust&lt;/span&gt; &lt;span class="n"&gt;ordBillingAddress&lt;/span&gt; &lt;span class="n"&gt;ppAddress&lt;/span&gt;

&lt;span class="nf"&gt;ppAddress&lt;/span&gt; &lt;span class="kt"&gt;Address&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;putStrLn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;addrFirstName&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;addrLastName&lt;/span&gt;
    &lt;span class="n"&gt;putStrLn&lt;/span&gt; &lt;span class="n"&gt;addrLine1&lt;/span&gt;
    &lt;span class="n"&gt;whenJust&lt;/span&gt; &lt;span class="n"&gt;addrLine2&lt;/span&gt; &lt;span class="n"&gt;putStrLn&lt;/span&gt;
    &lt;span class="n"&gt;putStrLn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;addrCity&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;, &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;addrPostalCode&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;we have to overhaul each function and turn it into a much less pleasant &amp;#8220;&lt;code&gt;mappend&lt;/code&gt;age&amp;#8221;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;ppOrder&lt;/span&gt; &lt;span class="kt"&gt;Order&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;unlines&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;mconcat&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Order #&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ordNumber&lt;/span&gt;
    &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ppAddress&lt;/span&gt; &lt;span class="n"&gt;ordDeliveryAddress&lt;/span&gt;
    &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ppItems&lt;/span&gt; &lt;span class="n"&gt;ordItems&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;maybe&lt;/span&gt; &lt;span class="kt"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;\&lt;/span&gt;&lt;span class="n"&gt;addr&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ppAddress&lt;/span&gt; &lt;span class="n"&gt;addr&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="n"&gt;ordBillingAddress&lt;/span&gt;
    &lt;span class="kr"&gt;where&lt;/span&gt;
    &lt;span class="n"&gt;ppItems&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mconcat&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uncurry&lt;/span&gt; &lt;span class="n"&gt;ppItem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;zip&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;ppItem&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="kt"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;showt&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;. &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;itName&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; x&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;itQuantity&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;One may argue that this is, in fact, the more idiomatic approach,
but I&amp;#8217;m not very fond of all those commas.
Plus, it shows rather clearly that any conditional logic (like with &lt;code&gt;ordBillingAddress&lt;/code&gt; here)
is going to get pretty&amp;nbsp;cumbersome.&lt;/p&gt;
&lt;h4&gt;Along comes the &lt;code&gt;Writer&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;What I&amp;#8217;m saying here is that even in pure code,
it is sometimes very desirable to have a &lt;code&gt;do&lt;/code&gt; notation.
For that, however, we need a suitable &lt;code&gt;Monad&lt;/code&gt;&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt; to provide the meaning of &amp;#8220;invisible semicolon&amp;#8221; in a &lt;code&gt;do&lt;/code&gt; block.&lt;/p&gt;
&lt;p&gt;And &lt;code&gt;Text&lt;/code&gt;, obviously, isn&amp;#8217;t one.
Neither is &lt;code&gt;[Text]&lt;/code&gt; (lines of text),
nor any other type we&amp;#8217;d use to represent the final output of formatting &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; printing.
They are unsuitable, because they cannot encode the &lt;em&gt;computation&lt;/em&gt; that eventually produces said output &amp;#8212;
either the top-level one (&lt;code&gt;ppRecord&lt;/code&gt;) or any of its building blocks (like the &lt;code&gt;ppOrder&lt;/code&gt; or &lt;code&gt;ppAddress&lt;/code&gt;),
down to a most elementary &lt;code&gt;putStrLn&lt;/code&gt;.
The only thing they can stand for is the result&amp;nbsp;itself.&lt;/p&gt;
&lt;p&gt;Fortunately, the pattern of executing code and occassionally producing some &amp;#8220;additional&amp;#8221; output
has been abstracted over in the Haskell standard library.
This is exactly the use case for the &lt;code&gt;Writer&lt;/code&gt; monad!&lt;/p&gt;
&lt;p&gt;The definition of &lt;code&gt;Writer&lt;/code&gt; is roughly equivalent to the&amp;nbsp;following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kr"&gt;newtype&lt;/span&gt; &lt;span class="kt"&gt;Writer&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="c1"&gt;-- omitted&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Of the two type parameters it takes, the &lt;code&gt;w&lt;/code&gt; one signifies what output it can produce &amp;#8220;on the side&amp;#8221;.
This is contrasted with &lt;code&gt;a&lt;/code&gt; which is the regular result of a monadic expression or function.
In our case, &lt;code&gt;a&lt;/code&gt; will basically always be &lt;code&gt;()&lt;/code&gt; (unit/&amp;#8221;empty&amp;#8221; type),
but it is nonetheless necessary for the &lt;code&gt;Writer&lt;/code&gt; to behave as a&amp;nbsp;monad.&lt;/p&gt;
&lt;p&gt;To complement the above definition, &lt;code&gt;Writer&lt;/code&gt; comes with several useful functions.
Among those, the most interesting one is &lt;code&gt;tell&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;tell&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Writer&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;write&lt;/code&gt; would&amp;#8217;ve probably been a better name for it,
as it&amp;#8217;s definitely the main and defining operation of &lt;code&gt;Writer&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Looking at its signature, we can see it takes a bit of the &lt;code&gt;Writer&lt;/code&gt;&lt;span class="quo"&gt;&amp;#8216;&lt;/span&gt;s output (&lt;code&gt;w&lt;/code&gt;)
and results in a &lt;code&gt;Writer&lt;/code&gt; action.
Internally, it will simply add the argument to the already accumulated output of the writer&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;To make everything more concrete,
here&amp;#8217;s a literal &amp;#8220;Hello world&amp;#8221; example coded very verbosly as a &lt;code&gt;Writer&lt;/code&gt; action:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Control.Monad.Writer&lt;/span&gt;

&lt;span class="nf"&gt;hello&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Writer&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;
&lt;span class="nf"&gt;hello&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;tell&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;tell&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;tell&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;world&amp;quot;&lt;/span&gt;

&lt;span class="nf"&gt;main&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;IO&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;
&lt;span class="nf"&gt;main&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
    &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;runWriter&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt;
    &lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;putStrLn&lt;/span&gt; &lt;span class="n"&gt;greeting&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It also contains the last element of the &lt;code&gt;Writer&lt;/code&gt; puzzle:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;runWriter&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Writer&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Like its name suggests, this function will &amp;#8220;run&amp;#8221; any &lt;code&gt;Writer&lt;/code&gt; action that we give it,
returning both the &amp;#8220;regular&amp;#8221; result (&lt;code&gt;a&lt;/code&gt;) plus any output passed in &lt;code&gt;tell&lt;/code&gt;s (&lt;code&gt;w&lt;/code&gt;).&lt;sup id="fnref:4"&gt;&lt;a class="footnote-ref" href="#fn:4" rel="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h4&gt;My little monad: transformers are&amp;nbsp;magic&lt;/h4&gt;
&lt;p&gt;The last example may be very simple,
but it contains all the building blocks for many of the printing functions we need.
If we define a convenience wrapper for &lt;code&gt;tell&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;putLn&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Writer&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;
&lt;span class="nf"&gt;putLn&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tell&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;then both &lt;code&gt;ppAddress&lt;/code&gt; and &lt;code&gt;ppOrder&lt;/code&gt; can be translated
through a mere mechanical substitution of &lt;code&gt;putStrLn&lt;/code&gt; with &lt;code&gt;putLn&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;ppAddress&lt;/span&gt; &lt;span class="kt"&gt;Address&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;putLn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;addrFirstName&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;addrLastName&lt;/span&gt;
    &lt;span class="n"&gt;putLn&lt;/span&gt; &lt;span class="n"&gt;addrLine1&lt;/span&gt;
    &lt;span class="n"&gt;whenJust&lt;/span&gt; &lt;span class="n"&gt;addrLine2&lt;/span&gt; &lt;span class="n"&gt;putLn&lt;/span&gt;
    &lt;span class="n"&gt;putLn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;addrCity&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;, &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;addrPostalCode&lt;/span&gt;

&lt;span class="c1"&gt;-- ppOrder omitted&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Unfortunately, a bare &lt;code&gt;Writer&lt;/code&gt; like this can only work for pure code,
which isn&amp;#8217;t a luxury we can expect in every situtation.
In my case, some of the printing logic was tied pretty strongly to &lt;code&gt;IO&lt;/code&gt;,
and it would be difficult and time consuming to decouple&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;Thankfully, the reliance on &lt;code&gt;IO&lt;/code&gt; isn&amp;#8217;t a complete deal breaker.
While we cannot ensure that nothing calls &lt;code&gt;putStrLn&lt;/code&gt; anymore,
we can provide the &lt;code&gt;tell&lt;/code&gt;/&lt;code&gt;putLn&lt;/code&gt; capabilities alongside whatever &lt;em&gt;other&lt;/em&gt; &lt;code&gt;IO&lt;/code&gt; calls
our code has to make (for&amp;nbsp;now).&lt;/p&gt;
&lt;p&gt;To achieve that, we need to create a &lt;em&gt;monad stack&lt;/em&gt; with &lt;code&gt;WriterT&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kr"&gt;newtype&lt;/span&gt; &lt;span class="kt"&gt;WriterT&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="c1"&gt;-- omitted&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;WriterT&lt;/code&gt; is a &lt;em&gt;monad transformer&lt;/em&gt;, one of those scary Haskell concepts
that are actually simpler than they appear on the surface.
This is because transfomers like &lt;code&gt;WriterT&lt;/code&gt; are mere wrappers.
The only difference between it and a regular &lt;code&gt;Writer&lt;/code&gt; is the additional &lt;code&gt;m&lt;/code&gt; parameter,
which is the &lt;em&gt;inner monad&lt;/em&gt; we&amp;#8217;re packaging inside a new &lt;code&gt;Writer&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here (and in many other cases), &lt;code&gt;m&lt;/code&gt; will be substituted with &lt;code&gt;IO&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kr"&gt;type&lt;/span&gt; &lt;span class="kt"&gt;Printer&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;WriterT&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt; &lt;span class="kt"&gt;IO&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;  &lt;span class="c1"&gt;-- w == Text, m == IO&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;thus creating the titular &lt;code&gt;Printer&lt;/code&gt; monad.
This hybrid beast can both output &lt;code&gt;Text&lt;/code&gt; through the &lt;code&gt;Writer&lt;/code&gt; &lt;span class="caps"&gt;API&lt;/span&gt;,
as well as perform any additional &lt;code&gt;IO&lt;/code&gt; operations
that the code may (still)&amp;nbsp;require.&lt;/p&gt;
&lt;p&gt;Below is an example;
the &lt;code&gt;User&lt;/code&gt; record requires an I/O call to get the size of its &lt;code&gt;$HOME&lt;/code&gt; directory:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Control.Monad.IO.Class&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;liftIO&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;System.Directory&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;getFileSize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;-- To print this data type nicely, we sadly require I/O :(&lt;/span&gt;
&lt;span class="kr"&gt;data&lt;/span&gt; &lt;span class="kt"&gt;User&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;User&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;usrName&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt;
                 &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;usrHomeDir&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;FilePath&lt;/span&gt;
                 &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;ppUser&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;User&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;IO&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt;
&lt;span class="nf"&gt;ppUser&lt;/span&gt; &lt;span class="kt"&gt;User&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;snd&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;runWriterT&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;putLn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Name: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;usrName&lt;/span&gt;
    &lt;span class="n"&gt;homeSize&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;liftIO&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;getFileSize&lt;/span&gt; &lt;span class="n"&gt;usrHomeDir&lt;/span&gt;
    &lt;span class="n"&gt;putLn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;$HOME: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;showt&lt;/span&gt; &lt;span class="n"&gt;usrHomeDir&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;(&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;showt&lt;/span&gt; &lt;span class="n"&gt;homeSize&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; bytes)&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As a bit of necessary cruft,
we have to use &lt;code&gt;liftIO&lt;/code&gt; to &amp;#8220;lift&amp;#8221; (wrap) &lt;code&gt;IO&lt;/code&gt; actions such as &lt;code&gt;getFileSize&lt;/code&gt;
in a full &lt;code&gt;Printer&lt;/code&gt; monad before executing them.
Besides everything else you can think of,
this is yet another argument for eventually getting rid of the &lt;code&gt;IO&lt;/code&gt; :)&lt;/p&gt;
&lt;h4&gt;Making the monads&amp;nbsp;coexist&lt;/h4&gt;
&lt;p&gt;But our job isn&amp;#8217;t done yet.
Despite looking very reasonable, this version of &lt;code&gt;ppUser&lt;/code&gt; doesn&amp;#8217;t actually compile!
The actual type error may vary a little,
but it all boils down to a difference between &lt;code&gt;WriterT Text IO ()&lt;/code&gt; (i.e. &lt;code&gt;Printer ()&lt;/code&gt;)
and &lt;code&gt;Writer Text ()&lt;/code&gt; at each call site of &lt;code&gt;putLn&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;GHC&lt;/span&gt; is obviously correct.
However, the problem lies not in how we&amp;#8217;re calling &lt;code&gt;putLn&lt;/code&gt;,
but rather the way it&amp;#8217;s been&amp;nbsp;defined:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;putLn&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Writer&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This type can only produce a specific, &lt;em&gt;pure&lt;/em&gt; &lt;code&gt;Writer&lt;/code&gt; action.
But to fit inside the &lt;code&gt;do&lt;/code&gt; block of our compound monad,
we need the &lt;code&gt;Writer&lt;/code&gt; + &lt;code&gt;IO&lt;/code&gt; combo from &lt;code&gt;WriterT Text IO&lt;/code&gt; (i.e. &lt;code&gt;Printer&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;We can try to address the mismatch by changing the signature&amp;nbsp;to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;putLn&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;WriterT&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt; &lt;span class="kt"&gt;IO&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;-- or just: Printer ()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;but this will only result in the &lt;em&gt;opposite&lt;/em&gt; problem.
Now, all the pure printers like &lt;code&gt;ppAddress&lt;/code&gt; are facing the fact
that &lt;code&gt;putLn&lt;/code&gt; is a (wrapped) &lt;code&gt;IO&lt;/code&gt; action, despite not actually doing any I/O&amp;nbsp;whatsoever.&lt;/p&gt;
&lt;p&gt;The obvious question is, can we have something that fits &lt;em&gt;both&lt;/em&gt;?&lt;/p&gt;
&lt;p&gt;Earlier on, I&amp;#8217;ve said that both vanilla &lt;code&gt;Writer&lt;/code&gt; and the &lt;code&gt;IO&lt;/code&gt;-spruced &lt;code&gt;Printer&lt;/code&gt; support the &amp;#8220;&lt;code&gt;Writer&lt;/code&gt; &lt;span class="caps"&gt;API&lt;/span&gt;&amp;#8221;,
most notably the &lt;code&gt;tell&lt;/code&gt; function.
This notion of a &amp;#8220;monadic interface&amp;#8221; isn&amp;#8217;t just hand-waving, though,
and Haskell (obviously!) provides a way to express it&amp;nbsp;programmatically.&lt;/p&gt;
&lt;p&gt;Meet the &lt;code&gt;MonadWriter&lt;/code&gt; typeclass:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Monad&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Monoid&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;MonadWriter&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Any monad that can work as a &lt;code&gt;Writer&lt;/code&gt; will be an instance of it,
regardless of whether it wraps over &lt;code&gt;IO&lt;/code&gt; or anything else.
Functions like &lt;code&gt;tell&lt;/code&gt; are defined to be
&lt;a href="http://hackage.haskell.org/package/mtl-2.2.1/docs/Control-Monad-Writer-Class.html#v:tell"&gt;polymorphic over it&lt;/a&gt;,
enabling us to leverage the same technique they use when we define &lt;code&gt;putLn&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;{-# LANGUAGE FlexibleContexts #-}&lt;/span&gt;

&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Control.Monad.Writer.Class&lt;/span&gt;

&lt;span class="nf"&gt;putLn&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;MonadWriter&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="ow"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;
&lt;span class="nf"&gt;putLn&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tell&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you aren&amp;#8217;t very familiar with this syntax,
the part before &lt;code&gt;=&amp;gt;&lt;/code&gt; is a &lt;em&gt;typeclass constraint&lt;/em&gt;, or &lt;em&gt;context&lt;/em&gt;.
It defines the requirements to be satisfied by types
which are later used in the function&amp;nbsp;signature.&lt;/p&gt;
&lt;p&gt;Here, we request a &lt;code&gt;MonadWriter&lt;/code&gt; instance &amp;#8212; one where &lt;code&gt;Text&lt;/code&gt; is the output
but &lt;em&gt;anything&lt;/em&gt; can be the inner monad.
We refer to that unknown monad only as &lt;code&gt;m&lt;/code&gt;, a type variable.
The compiler will figure out what to substitute for it &lt;em&gt;at every call site&lt;/em&gt; of &lt;code&gt;putLn&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;As a result, both a pure &lt;code&gt;Writer&lt;/code&gt; and the &lt;code&gt;IO&lt;/code&gt;-bound &lt;code&gt;Printer&lt;/code&gt; can now use it.
In the second case, the relevant instance of &lt;code&gt;MonadWriter&lt;/code&gt; will,
naturally, have &lt;code&gt;IO&lt;/code&gt; fill in the &lt;code&gt;m&lt;/code&gt; position.&lt;/p&gt;
&lt;p&gt;But curiously, the &amp;#8220;pure&amp;#8221; &lt;code&gt;Writer&lt;/code&gt; also has
&lt;a href="http://hackage.haskell.org/package/base-4.9.1.0/docs/Data-Functor-Identity.html#t:Identity"&gt;an inner monad&lt;/a&gt;.
It just literally &lt;em&gt;does nothing&lt;/em&gt; but wrap some other&amp;nbsp;value:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kr"&gt;newtype&lt;/span&gt; &lt;span class="kt"&gt;Identity&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Identity&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;runIdentity&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In most cases, this fact is hidden behind
&lt;a href="http://hackage.haskell.org/package/mtl-2.2.1/docs/Control-Monad-Writer-Lazy.html#t:Writer"&gt;the real definition of &lt;code&gt;Writer&lt;/code&gt;&lt;/a&gt;,
though &lt;code&gt;runIdentity&lt;/code&gt; may sometimes come handy for some on-the-spot type hacks&lt;sup id="fnref:5"&gt;&lt;a class="footnote-ref" href="#fn:5" rel="footnote"&gt;5&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h4&gt;The&amp;nbsp;wrap&lt;/h4&gt;
&lt;p&gt;The many things we&amp;#8217;ve talked about here could of course be a starting point
for even more advanced stuff, but obviously we have to stop somewhere!
But don&amp;#8217;t worry: knowing about &lt;code&gt;MonadWriter&lt;/code&gt; and other monad typeclasses like this
is enough to write quite idiomatic&amp;nbsp;code&amp;#8230;&lt;/p&gt;
&lt;p&gt;&amp;#8230;at least until you learn about
&lt;a href="http://www.haskellforall.com/2012/06/you-could-have-invented-free-monads.html"&gt;free monads&lt;/a&gt;,
&lt;a href="https://ocharles.org.uk/blog/posts/2013-12-04-24-days-of-hackage-extensible-effects.html"&gt;effects&lt;/a&gt;,
and the like&amp;nbsp;;-)&lt;/p&gt;
&lt;p&gt;In any case, you can check &lt;a href="https://gist.github.com/Xion/74c39b65c591ae9615b7cf81e88a5946"&gt;this gist&lt;/a&gt;
for the complete code from this&amp;nbsp;post.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;&lt;code&gt;IO&lt;/code&gt; is still necessary due to ad-hoc network fetches and syscalls mentioned earlier.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;Or at least an &lt;code&gt;Applicative&lt;/code&gt;, via the &lt;code&gt;ApplicativeDo&lt;/code&gt; &lt;span class="caps"&gt;GHC&lt;/span&gt; extension.&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;The adding is done via &lt;code&gt;mappend&lt;/code&gt;, requiring &lt;code&gt;w&lt;/code&gt; to be a &lt;code&gt;Monoid&lt;/code&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:4"&gt;
&lt;p&gt;There is also the &lt;code&gt;execWriter&lt;/code&gt; variant which is actually more practical here
  as it only returns the accumulated output.&amp;#160;&lt;a class="footnote-backref" href="#fnref:4" rev="footnote" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:5"&gt;
&lt;p&gt;We could, for example, use it alongside &lt;code&gt;mapWriterT&lt;/code&gt; to &amp;#8220;fix&amp;#8221; the calls to &lt;code&gt;putLn&lt;/code&gt;
  if we didn&amp;#8217;t have control over its definition.&amp;#160;&lt;a class="footnote-backref" href="#fnref:5" rev="footnote" title="Jump back to footnote 5 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="Haskell"></category><category term="Writer"></category><category term="monads"></category><category term="monad transformers"></category><category term="WriterT"></category></entry><entry><title>Extension traits inÂ Rust</title><link href="http://xion.io/post/code/rust-extension-traits.html" rel="alternate"></link><updated>2017-06-21T19:38:00+00:00</updated><author><name>Karol Kuczmarski</name></author><id>tag:xion.io,2017-06-20:post/code/rust-extension-traits.html</id><summary type="html">&lt;p&gt;In a few object-oriented languages,
it is possible to add methods to a class &lt;em&gt;after&lt;/em&gt; it&amp;#8217;s already been&amp;nbsp;defined.&lt;/p&gt;
&lt;p&gt;This feature arises quite naturally if the language has a dynamic type system
that&amp;#8217;s modifiable at runtime.
In those cases, even &lt;em&gt;replacing&lt;/em&gt; existing methods is perfectly possible&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;In addition to that,
some statically typed languages &amp;#8212; most notably in C# &amp;#8212;
offer &lt;em&gt;extension methods&lt;/em&gt; as a &lt;a href="cs-ext-methods"&gt;dedicated feature&lt;/a&gt; of their type systems.
The premise is that you would write standalone functions whose
first argument is specially designated (usually by &lt;code&gt;this&lt;/code&gt; keyword)
as a receiver of the resulting method&amp;nbsp;call:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;WordCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;?&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
                     &lt;span class="n"&gt;StringSplitOptions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RemoveEmptyEntries&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;At the call site,
the new method is indistinguishable from any of the existing&amp;nbsp;ones:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Alice has a cat.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WordCount&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That&amp;#8217;s assuming you have imported both the original class
(or it&amp;#8217;s a built-in like &lt;code&gt;String&lt;/code&gt;),
as well as the module in which the extension method is&amp;nbsp;defined.&lt;/p&gt;
&lt;h4&gt;Rewrite it in&amp;nbsp;Rust&lt;/h4&gt;
&lt;p&gt;The curious thing about &lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt;&amp;#8216;s type system is
that it permits extension methods solely as a side effect of its core building block: &lt;em&gt;traits&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;In this post, I&amp;#8217;m going to describe a certain design pattern in Rust
which involves third-party types and user-defined traits.
Several popular crates &amp;#8212;
like &lt;a href="https://docs.rs/itertools"&gt;itertools&lt;/a&gt; or &lt;a href="https://docs.rs/unicode-normalization/"&gt;unicode-normalization&lt;/a&gt; &amp;#8212;
utilize it very successfully to add new, useful methods to the language standard&amp;nbsp;types.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m not sure if this pattern has an official or widely accepted name.
Personally, I&amp;#8217;ve taken to calling it &lt;strong&gt;extension traits&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s have a look at how they are commonly&amp;nbsp;implemented.&lt;/p&gt;
&lt;h4&gt;Ingredients&lt;/h4&gt;
&lt;p&gt;We can use the extension trait pattern if we want to have additional methods in a type
that we don&amp;#8217;t otherwise control (or don&amp;#8217;t want to&amp;nbsp;modify).&lt;/p&gt;
&lt;p&gt;Common cases&amp;nbsp;include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Rust standard library types, like &lt;code&gt;Result&lt;/code&gt;, &lt;code&gt;String&lt;/code&gt;,
  or anything else inside the &lt;code&gt;std&lt;/code&gt; namespace&lt;/li&gt;
&lt;li&gt;types imported from &lt;a href="https://crates.io"&gt;third-party&amp;nbsp;libraries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;types from the current crate if additional methods only make sense in certain scenarios
  (e.g. conditional compilation / testing)&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The crux of this technique is really simple.
Like with most design patterns, however,
it involves a certain degree of boilerplate and&amp;nbsp;duplication.&lt;/p&gt;
&lt;p&gt;So without further ado&amp;#8230;
In order to &amp;#8220;patch&amp;#8221; some new method(s) into an external type you will need&amp;nbsp;to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Define a trait with signatures of all the methods you want to&amp;nbsp;add.&lt;/li&gt;
&lt;li&gt;Implement it for the external&amp;nbsp;type.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;There is no step three&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As an important note on the usage side,
the calling code needs to &lt;em&gt;import your new trait&lt;/em&gt; in addition to the external type.
Once that&amp;#8217;s done, it can proceed to use the new methods is if they were there to begin&amp;nbsp;with.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m sure you are keen on seeing some&amp;nbsp;examples!&lt;/p&gt;
&lt;h4&gt;Broadening your &lt;code&gt;Option&lt;/code&gt;s&lt;/h4&gt;
&lt;p&gt;We&amp;#8217;re going to add two new methods to Rust&amp;#8217;s &lt;a href="https://doc.rust-lang.org/std/option/enum.Option.html"&gt;standard &lt;code&gt;Option&lt;/code&gt; type&lt;/a&gt;.
The goal is to make it more convenient to operate on mutable &lt;code&gt;Option&lt;/code&gt;s
by allowing to easily replace an existing value with another one&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s the appropriate extension trait&lt;sup id="fnref:4"&gt;&lt;a class="footnote-ref" href="#fn:4" rel="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c-Doc"&gt;/// Additional mutation methods for `Option`.&lt;/span&gt;
&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;trait&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;OptionMutExt&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c-Doc"&gt;/// Replace the existing `Some` value with a new one.&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c-Doc"&gt;///&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c-Doc"&gt;/// Returns the previous value if it was present, or `None` if no replacement was made.&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c-Doc"&gt;/// Replace the existing `Some` value with the result of given closure.&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c-Doc"&gt;///&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c-Doc"&gt;/// Returns the previous value if it was present, or `None` if no replacement was made.&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;replace_with&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;FnOnce&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It may feel at little bit weird to implement it.&lt;br&gt;
You will basically have to pretend you are &lt;em&gt;inside the &lt;code&gt;Option&lt;/code&gt; type itself&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;impl&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;OptionMutExt&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;replace_with&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;FnOnce&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_some&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;take&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nb"&gt;None&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Unfortunately, this is just an illusion.
Extension traits grant no special powers
that&amp;#8217;d allow you to bypass any of the regular visibility rules.
All you can use inside the new methods is still
just the &lt;em&gt;public interface&lt;/em&gt; of the type you&amp;#8217;re augmenting (here, &lt;code&gt;Option&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;In our case, however, this is good enough,
mostly thanks to &lt;a href="option_take"&gt;the recently introduced &lt;code&gt;Option::take&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To use our shiny new methods in other places,
all we have to do is import the extension&amp;nbsp;trait:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ext&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;rust&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;OptionMutExt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// assuming you put it in ext/rust.rs&lt;/span&gt;

&lt;span class="c1"&gt;// ...somewhere...&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;u32&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;...;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Option had a value of {} before replacement&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;None&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;assert_eq&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It doesn&amp;#8217;t matter where it was defined either,
meaning we can ship it away to &lt;a href="https://crates.io"&gt;crates.io&lt;/a&gt;
and let it accrue as many happy users as &lt;code&gt;Itertools&lt;/code&gt; has&amp;nbsp;;-)&lt;/p&gt;
&lt;h4&gt;Are you &lt;code&gt;hyper::Body&lt;/code&gt; ready?&lt;/h4&gt;
&lt;p&gt;Our second example will demonstrate attaching more methods to a third-party&amp;nbsp;type.&lt;/p&gt;
&lt;p&gt;Last week, there was a new release of &lt;a href="https://hyper.rs/"&gt;Hyper&lt;/a&gt;,
a popular Rust framework for &lt;span class="caps"&gt;HTTP&lt;/span&gt; servers &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; clients.
It was notable because it marked a switch from synchronous, straightforward &lt;span class="caps"&gt;API&lt;/span&gt;
to a more complex, asynchronous one
(which I incidentally &lt;a href="http://xion.io/post/programming/rust-async-closer-look.html"&gt;wrote about a few weeks ago&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Predictably, &lt;a href="https://www.reddit.com/r/rust/comments/6hksa0/problems_with_understanding_hypers_async/"&gt;there has been some confusion&lt;/a&gt;
among its new and existing&amp;nbsp;users.&lt;/p&gt;
&lt;p&gt;We&amp;#8217;re going to help by pinning a more convenient interface on
&lt;a href="https://hyper.rs/hyper/master/hyper/struct.Body.html"&gt;hyper&amp;#8217;s &lt;code&gt;Body&lt;/code&gt; type&lt;/a&gt;.
&lt;code&gt;Body&lt;/code&gt; here is a struct representing the content of an &lt;span class="caps"&gt;HTTP&lt;/span&gt; request or response.
After the &amp;#8216;asyncatastrophe&amp;#8217;,
it doesn&amp;#8217;t allow to access the raw incoming bytes as easily as it did&amp;nbsp;before.&lt;/p&gt;
&lt;p&gt;Thanks to extension traits, we can fix this rather&amp;nbsp;quickly:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;futures&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;BoxFuture&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;future&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Stream&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;hyper&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;trait&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;BodyExt&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c-Doc"&gt;/// Collect all the bytes from all the `Chunk`s from `Body`&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c-Doc"&gt;/// and return it as `Vec&amp;lt;u8&amp;gt;`.&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;into_bytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;BoxFuture&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;u8&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;hyper&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c-Doc"&gt;/// Collect all the bytes from all the `Chunk`s from `Body`,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c-Doc"&gt;/// decode them as UTF8, and return the resulting `String`.&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;into_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;BoxFuture&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Box&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Send&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;impl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;BodyExt&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Body&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;into_bytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;BoxFuture&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;u8&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;hyper&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;and_then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;bytes&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;future&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;ok&lt;/span&gt;&lt;span class="o"&gt;::&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;hyper&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_vec&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;boxed&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;into_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;BoxFuture&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Box&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Send&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;into_bytes&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map_err&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Box&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Box&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Send&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;and_then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;bytes&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;from_utf8&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map_err&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Box&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Box&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Send&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;boxed&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With these new methods in hand,
it is relatively straightforward to implement, say, a simple character-counting&amp;nbsp;service:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;futures&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;BoxFuture&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;future&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;hyper&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Service&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ext&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;hyper&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;BodyExt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// assuming the above is in ext/hyper.rs&lt;/span&gt;

&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;impl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Service&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Box&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Send&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;BoxFuture&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Self&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Self&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Self&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deconstruct&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;into_string&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;and_then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;future&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;with_body&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;to_string&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="n"&gt;boxed&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Replacing &lt;code&gt;Box&amp;lt;Error + Send&amp;gt;&lt;/code&gt; with an idiomatic &lt;a href="https://docs.rs/crate/derive-error/"&gt;error enum&lt;/a&gt;
is left as an exercise for the reader&amp;nbsp;:)&lt;/p&gt;
&lt;h4&gt;Extra credit bonus&amp;nbsp;explanation&lt;/h4&gt;
&lt;p&gt;&lt;small&gt;Reading this section is not necessary to use extension traits.&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;So far, we have seen what extension traits are capable of.
It is only right to mention what they &lt;em&gt;cannot do&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Indeed, this technique has some limitations.
They are a conscious choice on the part of Rust authors,
and they were decided upon in an effort to keep the type system &lt;em&gt;coherent&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Coherence isn&amp;#8217;t an everyday topic in Rust,
but it becomes important when working with traits and types that cross package boundaries.
Rules of trait coherence
(described briefly towards the end of &lt;a href="coherence-in-book"&gt;this section of the Rust book&lt;/a&gt;)
state that the following combinations of &amp;#8220;local&amp;#8221; (this crate) and &amp;#8220;external&amp;#8221; (other crates&lt;sup id="fnref:5"&gt;&lt;a class="footnote-ref" href="#fn:5" rel="footnote"&gt;5&lt;/a&gt;&lt;/sup&gt;) are&amp;nbsp;legal:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;implement a &lt;em&gt;local&lt;/em&gt; trait for a &lt;em&gt;local&lt;/em&gt; type.&lt;br&gt;
  This is common in larger programs that use polymorphic&amp;nbsp;abstractions.&lt;/li&gt;
&lt;li&gt;implement an &lt;em&gt;external&lt;/em&gt; trait for a &lt;em&gt;local&lt;/em&gt; type.&lt;br&gt;
  We do this often to integrate with third-party libraries and frameworks,
  just like with &lt;code&gt;hyper&lt;/code&gt; above.&lt;/li&gt;
&lt;li&gt;implement a &lt;em&gt;local&lt;/em&gt; trait for an &lt;em&gt;external&lt;/em&gt; type.&lt;br&gt;
  That&amp;#8217;s extension traits for&amp;nbsp;you!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What is &lt;em&gt;not&lt;/em&gt; possible, however, is&amp;nbsp;to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;implement an &lt;em&gt;external&lt;/em&gt; trait for an &lt;em&gt;external&lt;/em&gt;&amp;nbsp;type&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This case is prohibited in order to make the choice of trait implementations more predictable,
both for the compiler and for the programmer.
Without this rule in place, you could introduce many instances of &lt;code&gt;impl Trait for Type&lt;/code&gt;
(same &lt;code&gt;Trait&lt;/code&gt; and same &lt;code&gt;Type&lt;/code&gt;),
each one with different functionality,
leaving the compiler to &amp;#8220;guess&amp;#8221; the right &lt;code&gt;impl&lt;/code&gt; for any given situation&lt;sup id="fnref:6"&gt;&lt;a class="footnote-ref" href="#fn:6" rel="footnote"&gt;6&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;The decision was thus made to disallow the &lt;code&gt;impl ExternalTrait for ExternalType&lt;/code&gt; case altogether.
If you like, you can read &lt;a href="rust-orphans"&gt;some more extensive backstory&lt;/a&gt; behind&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;Bear in mind, however, that this isn&amp;#8217;t the unequivocally &amp;#8220;correct&amp;#8221; solution.
&lt;a href="hs-orphans"&gt;Some languages&lt;/a&gt; choose to allow this so-called &lt;em&gt;orphan&lt;/em&gt; case,
and try to resolve the potential ambiguities in various different ways.
It is a genuinely useful feature, too, as it makes easier it to glue together two unrelated libraries&lt;sup id="fnref:7"&gt;&lt;a class="footnote-ref" href="#fn:7" rel="footnote"&gt;7&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Thankfully for extension traits,
the coherence restriction doesn&amp;#8217;t apply as long as you keep those traits and their &lt;code&gt;impl&lt;/code&gt;s in the same&amp;nbsp;crate.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;This practice is often referred to as &lt;em&gt;monkeypatching&lt;/em&gt;, especially in Python and Ruby.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;In this case, a more common solution is to just open another &lt;code&gt;impl Foo&lt;/code&gt; block,
annotated with &lt;code&gt;#[cfg(test)]&lt;/code&gt; or similar.
An extension trait, however, makes it easier
to extract &lt;code&gt;Foo&lt;/code&gt; into a separate crate along with some handy, test-only &lt;span class="caps"&gt;API&lt;/span&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;Note that this is &lt;em&gt;not&lt;/em&gt; the same as the unstable (as of 1.18) &lt;code&gt;Option&lt;/code&gt; methods
guarded behind &lt;a href="https://github.com/rust-lang/rust/issues/39288"&gt;the &lt;code&gt;options_entry&lt;/code&gt; feature gate&lt;/a&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:4"&gt;
&lt;p&gt;My own convention is to call those traits &lt;code&gt;FooExt&lt;/code&gt;
if they are meant to enhance the interface of type &lt;code&gt;Foo&lt;/code&gt;.
The other practice is to mirror the name of the crate that the trait is packaged in;
both &lt;code&gt;Itertools&lt;/code&gt; and &lt;code&gt;UnicodeNormalization&lt;/code&gt; are examples of this style.&amp;#160;&lt;a class="footnote-backref" href="#fnref:4" rev="footnote" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:5"&gt;
&lt;p&gt;Standard library (&lt;code&gt;std&lt;/code&gt; or &lt;code&gt;core&lt;/code&gt; namespaces) counts as external crate for this purpose.&amp;#160;&lt;a class="footnote-backref" href="#fnref:5" rev="footnote" title="Jump back to footnote 5 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:6"&gt;
&lt;p&gt;Or throw an error. However, trait &lt;code&gt;impl&lt;/code&gt;s are always imported implicitly,
so this could essentially prevent some combination of different modules/libraries in the ecosystem from being used together,
and generally create an unfathomable mess.&amp;#160;&lt;a class="footnote-backref" href="#fnref:6" rev="footnote" title="Jump back to footnote 6 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:7"&gt;
&lt;p&gt;The usual workaround for coherence/orphan rules in Rust involves creating a wrapper
around the external type in order to make it &amp;#8220;local&amp;#8221;, and therefore allow external trait &lt;code&gt;impl&lt;/code&gt;s for it.
This is called &lt;a href="https://github.com/rust-unofficial/patterns/blob/master/patterns/newtype.md"&gt;the &lt;em&gt;newtype&lt;/em&gt; pattern&lt;/a&gt;
and there are &lt;a href="https://docs.rs/newtype_derive"&gt;some crates&lt;/a&gt; to support it.&amp;#160;&lt;a class="footnote-backref" href="#fnref:7" rev="footnote" title="Jump back to footnote 7 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="Rust"></category><category term="C#"></category><category term="methods"></category><category term="extension methods"></category><category term="traits"></category></entry></feed>