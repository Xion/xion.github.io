<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Karol Kuczmarski's Blog</title><link href="http://xion.io/" rel="alternate"></link><link href="http://xion.io/feeds/all-en.atom.xml" rel="self"></link><id>http://xion.io/</id><updated>2017-04-10T23:37:00+01:00</updated><entry><title>Iteration patterns for Result &amp;Â Option</title><link href="http://xion.io/post/code/rust-iter-patterns.html" rel="alternate"></link><updated>2017-04-10T23:37:00+01:00</updated><author><name>Karol Kuczmarski</name></author><id>tag:xion.io,2017-04-10:post/code/rust-iter-patterns.html</id><summary type="html">&lt;p&gt;Towards the end of &lt;a href="http://xion.io/post/code/rust-for-loop.html"&gt;my previous post about &lt;code&gt;for&lt;/code&gt; loops in Rust&lt;/a&gt;,
I mentioned how those loops can often be expressed in a more declarative way.
This alternative approach involves chaining methods of
&lt;a href="https://doc.rust-lang.org/std/iter/trait.Iterator.html"&gt;the &lt;code&gt;Iterator&lt;/code&gt; trait&lt;/a&gt;
to create specialized transformation&amp;nbsp;pipelines:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;odds_squared&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;collect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;small&gt;&lt;a href="https://is.gd/q4lXew"&gt;Playground link&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;Code like this isn&amp;#8217;t unique to Rust, of course.
Similar patterns are prevalent in functional languages such as
&lt;a href="https://msdn.microsoft.com/en-us/visualfsharpdocs/conceptual/operators.%5b-h%5d-%5d%5b't1%2c'u%5d-function-%5bfsharp%5d"&gt;F#&lt;/a&gt;,
and can also be found in
Java (&lt;a href="https://dzone.com/articles/understanding-java-8-streams-1"&gt;Streams&lt;/a&gt;),
imperative .&lt;span class="caps"&gt;NET&lt;/span&gt; (&lt;a href="https://msdn.microsoft.com/en-us/library/bb308959.aspx#linqoverview_topic3"&gt;&lt;span class="caps"&gt;LINQ&lt;/span&gt;&lt;/a&gt;),
JavaScript (&lt;a href="https://lodash.com/docs/4.17.4#chain"&gt;LoDash&lt;/a&gt;)
and&amp;nbsp;elsewhere.&lt;/p&gt;
&lt;p&gt;This saying, Rust also has its fair share of unique iteration idioms.
In this post, we&amp;#8217;re going to explore those arising on the intersection of iterators
and the most common Rust enums: &lt;code&gt;Result&lt;/code&gt; and &lt;code&gt;Option&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;filter_map()&lt;/h4&gt;
&lt;p&gt;When working with iterators,
we&amp;#8217;re almost always interested in selecting elements that match some criterion
or passing them through a transformation function.
It&amp;#8217;s not even uncommon to want &lt;em&gt;both&lt;/em&gt; of those things,
as demonstrated by the initial example in this&amp;nbsp;post.&lt;/p&gt;
&lt;p&gt;You can, of course, accomplish those two tasks independently:
Rust&amp;#8217;s &lt;a href="https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.filter"&gt;&lt;code&gt;filter&lt;/code&gt;&lt;/a&gt;
and &lt;a href="https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.map"&gt;&lt;code&gt;map&lt;/code&gt;&lt;/a&gt; methods
work just fine for this purpose.
But there exists an alternative, and in some cases it fits the problem &lt;em&gt;amazingly&lt;/em&gt;&amp;nbsp;well.&lt;/p&gt;
&lt;p&gt;Meet &lt;code&gt;filter_map&lt;/code&gt;.
Here&amp;#8217;s what &lt;a href="https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.filter_map"&gt;the official docs&lt;/a&gt;
have to say about&amp;nbsp;it:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Creates an iterator that both filters and&amp;nbsp;maps.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Well, &lt;em&gt;duh&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;On a more serious note, the common pattern that &lt;code&gt;filter_map&lt;/code&gt; simplifies
is unwrapping a series of &lt;code&gt;Option&lt;/code&gt;s.
If you have a sequence of maybe-values,
and you want to retain only those that are actually there,
&lt;code&gt;filter_map&lt;/code&gt; can do it in a single&amp;nbsp;step:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// Get the sequence of all files matching a glob pattern via the glob crate.&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;some_files&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;glob&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;glob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;foo.*&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;unwrap&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unwrap&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// Retain only their extensions, e.g. &amp;quot;.txt&amp;quot; or &amp;quot;.md&amp;quot;.&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;file_extensions&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;some_files&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter_map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extension&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The equivalent that doesn&amp;#8217;t use &lt;code&gt;filter_map&lt;/code&gt;
would have to split the checking &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; unwrapping of &lt;code&gt;Option&lt;/code&gt;s into separate&amp;nbsp;steps:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;file_extensions&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;some_files&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extension&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_some&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unwrap&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Because of this check &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; unwrap logic,
&lt;code&gt;filter_map&lt;/code&gt; can be useful even with a no-op predicate (&lt;code&gt;.filter_map(|x| x)&lt;/code&gt;)
if we already have the &lt;code&gt;Option&lt;/code&gt; objects handy.
Otherwise, it&amp;#8217;s often very easy to obtain them,
which is exactly the case for the &lt;code&gt;Result&lt;/code&gt; type:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// Read all text lines from a file:&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;BufReader&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fs&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;file.ext&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;filter_map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;collect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With a simple &lt;code&gt;.filter_map(Result::ok)&lt;/code&gt;, like above,
we can pass through a sequence of &lt;code&gt;Result&lt;/code&gt;s and yield only the &amp;#8220;successful&amp;#8221; values.
I find this particular idiom to be extremely useful in practice,
as long as you remember that &lt;code&gt;Err&lt;/code&gt;ors will be discarded by it&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;As a final note on &lt;code&gt;filter_map&lt;/code&gt;,
you need to keep in mind that regardless of how great it often is,
not all combinations of &lt;code&gt;filter&lt;/code&gt; and &lt;code&gt;map&lt;/code&gt; should be replaced by it.
When deciding whether it&amp;#8217;s appropriate in your case,
it is helpful to consider the equivalence of these two&amp;nbsp;expressions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter_map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;None&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Simply put, if you find yourself writing conditions like this inside &lt;code&gt;filter_map&lt;/code&gt;,
you&amp;#8217;re probably better off with two separate processing&amp;nbsp;steps.&lt;/p&gt;
&lt;h4&gt;collect()&lt;/h4&gt;
&lt;p&gt;Let&amp;#8217;s go back to the last example with a sequence of &lt;code&gt;Result&lt;/code&gt;s.
Since the final sequence won&amp;#8217;t include any &lt;code&gt;Err&lt;/code&gt;oneous values,
you may be wondering if there is a way to preserve&amp;nbsp;them.&lt;/p&gt;
&lt;p&gt;In more formal terms, the question is about turning a vector of results
(&lt;code&gt;Vec&amp;lt;Result&amp;lt;T, E&amp;gt;&amp;gt;&lt;/code&gt;) into a result with a vector (&lt;code&gt;Result&amp;lt;Vec&amp;lt;T&amp;gt;, E&amp;gt;&lt;/code&gt;).
We&amp;#8217;d like for this aggregated result to only be &lt;code&gt;Ok&lt;/code&gt;
if &lt;em&gt;all&lt;/em&gt; original results were &lt;code&gt;Ok&lt;/code&gt;.
Otherwise, we should just get the first &lt;code&gt;Err&lt;/code&gt;or.&lt;/p&gt;
&lt;p&gt;Believe it or not, but this is probably &lt;em&gt;the&lt;/em&gt; most common Rust problem!&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;Of course, that doesn&amp;#8217;t necessarily mean the problem is particularly hard.
Possible solutions exist in both an iterator&amp;nbsp;version:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;into_iter&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;fold&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vec&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[]),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_mut&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;Err&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Err&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and in a loop&amp;nbsp;form:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vec&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[]);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nb"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_mut&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nb"&gt;Err&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Err&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;but I suspect not many people would call them clear and readable,
let alone pretty&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Fortunately, you don&amp;#8217;t need to pollute your codebase with any of those workarounds.
Rust offers an out-of-the-box solution which solves this particular problem,
and its only flaw is one that I hope to address through this very&amp;nbsp;post.&lt;/p&gt;
&lt;p&gt;So, here it&amp;nbsp;goes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;let&lt;/span&gt; &lt;span class="nt"&gt;result&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;_&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;results&lt;/span&gt;&lt;span class="nc"&gt;.collect&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Yep, that&amp;#8217;s all of&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;The background story is that &lt;code&gt;Result&amp;lt;Vec&amp;lt;T&amp;gt;, E&amp;gt;&lt;/code&gt; simply &amp;#8220;knows&amp;#8221;
how to construct itself from a sequence of &lt;code&gt;Result&lt;/code&gt;s.
Unfortunately, this &lt;span class="caps"&gt;API&lt;/span&gt; is hidden behind Rust&amp;#8217;s iterator abstraction,
and specifically the fact that
&lt;code&gt;Result&lt;/code&gt; implements &lt;a href="https://doc.rust-lang.org/1.2.0/std/iter/trait.FromIterator.html"&gt;&lt;code&gt;FromIterator&lt;/code&gt;&lt;/a&gt;
in this particular manner.
The way
&lt;a href="https://doc.rust-lang.org/std/result/enum.Result.html"&gt;the documentation page for &lt;code&gt;Result&lt;/code&gt;&lt;/a&gt;
is structured, however &amp;#8212; with trait implementations at the very end &amp;#8212;
ensures this useful fact remains virtually&amp;nbsp;undiscoverable.&lt;/p&gt;
&lt;p&gt;Because let&amp;#8217;s be honest: no one scrolls that&amp;nbsp;far.&lt;/p&gt;
&lt;p&gt;Incidentally, &lt;code&gt;Option&lt;/code&gt; offers analogous functionally:
a sequence of &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; can be &lt;code&gt;collect&lt;/code&gt;ed into &lt;code&gt;Option&amp;lt;Vec&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt;,
which will be &lt;code&gt;None&lt;/code&gt; if any of the input elements were.
As you may suspect, this fact is equally hard to find in the relevant&amp;nbsp;docs.&lt;/p&gt;
&lt;p&gt;But the good news is: you know about all this now! :)
And perhaps thanks to this post,
those handy tricks become a little better in a wider Rust&amp;nbsp;community.&lt;/p&gt;
&lt;h4&gt;partition()&lt;/h4&gt;
&lt;p&gt;The last technique I wanted to present here follows naturally
from the other idioms that apply to &lt;code&gt;Result&lt;/code&gt;s.
Instead of extracting just the &lt;code&gt;Ok&lt;/code&gt; values with &lt;code&gt;flat_map&lt;/code&gt;,
or keeping only the first error through &lt;code&gt;collect&lt;/code&gt;,
we will now learn how to retain all the errors &lt;em&gt;and&lt;/em&gt; all the values,
both neatly&amp;nbsp;separated.&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.partition"&gt;&lt;code&gt;partition&lt;/code&gt; method&lt;/a&gt;,
as this is what the section is about,
is essentially a more powerful variant of &lt;code&gt;filter&lt;/code&gt;.
While the latter only returns items that &lt;em&gt;do&lt;/em&gt; match a predicate,
&lt;code&gt;partition&lt;/code&gt; will also give us the ones which &lt;em&gt;don&amp;#8217;t&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Using it to slice an iterable of &lt;code&gt;Result&lt;/code&gt;s is&amp;nbsp;straightforward:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;oks&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fails&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;partition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;is_ok&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The only thing that remains cumbersome is
the fact that both parts of the resulting tuple still contain just &lt;code&gt;Result&lt;/code&gt;s.
Ideally, we would like them to be already unwrapped into values and errors,
but unfortunately we need to do this&amp;nbsp;ourselves:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;oks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;into_iter&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;unwrap&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;collect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;errors&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;into_iter&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;unwrap_err&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;collect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As an alternative,
&lt;a href="https://docs.rs/itertools/0.6.0/itertools/trait.Itertools.html#method.partition_map"&gt;the &lt;code&gt;partition_map&lt;/code&gt; method&lt;/a&gt;
from the &lt;a href="https://crates.io/crates/itertools"&gt;&lt;code&gt;itertools&lt;/code&gt; crate&lt;/a&gt;
can accomplish the same thing in a single step,
albeit a more verbose&amp;nbsp;one.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;A symmetrical technique is to use &lt;code&gt;.filter_map(Result::err)&lt;/code&gt; to get just
the &lt;code&gt;Err&lt;/code&gt;or objects, but that&amp;#8217;s probably much less useful
as it drops all the successful values.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;Based on my completely unsystematic and anecdotal observations,
someone asks about this on the #rust-beginners &lt;span class="caps"&gt;IRC&lt;/span&gt; approximately &lt;em&gt;every other day&lt;/em&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;The &lt;code&gt;fold&lt;/code&gt; variant is also rife with type inference traps,
often requiring explicit type annotations, a &amp;#8220;no-op&amp;#8221; &lt;code&gt;Err&lt;/code&gt; arm in &lt;code&gt;match&lt;/code&gt;,
or both.&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="Rust"></category><category term="iterators"></category></entry><entry><title>Arguments to Python generatorÂ functions</title><link href="http://xion.io/post/code/python-generator-args.html" rel="alternate"></link><updated>2017-04-02T22:10:00+00:00</updated><author><name>Karol Kuczmarski</name></author><id>tag:xion.io,2017-03-14:post/code/python-generator-args.html</id><summary type="html">&lt;p&gt;In Python, a &lt;em&gt;generator function&lt;/em&gt; is one that
contains a &lt;code&gt;yield&lt;/code&gt; statement inside the function body.
Although this language construct has many fascinating use cases
(&lt;a href="http://www.dabeaz.com/coroutines/Coroutines.pdf"&gt;&lt;span class="caps"&gt;PDF&lt;/span&gt;&lt;/a&gt;),
the most common one is creating concise and readable&amp;nbsp;iterators.&lt;/p&gt;
&lt;h4&gt;A typical&amp;nbsp;case&lt;/h4&gt;
&lt;p&gt;Consider, for example, this simple&amp;nbsp;function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;multiples&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;of&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Yields all multiples of given integer.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which creates an (infinite) iterator over all multiples of given integer.
A sample of its output looks like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;islice&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;islice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;multiples&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;of&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;35&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you were to replicate in a language such as Java or Rust
&amp;#8212; neither of which supports an equivalent of &lt;code&gt;yield&lt;/code&gt; &amp;#8212;
you&amp;#8217;d end up writing an &lt;em&gt;iterator&lt;/em&gt; class.
Python also has them, of&amp;nbsp;course:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Multiples&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Yields all multiples of given integer.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__iter__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;of&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt;

    &lt;span class="n"&gt;__next__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt;  &lt;span class="c"&gt;# Python 3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;but they are usually not the first choice&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s also pretty easy to see why:
they require explicit bookkeeping of any auxiliary state between iterations.
Perhaps it&amp;#8217;s not too much to ask for a trivial walk over integers,
but it can get quite tricky if we were to iterate over recursive data structures,
like trees or graphs. In &lt;code&gt;yield&lt;/code&gt;-based generators, this isn&amp;#8217;t a problem,
because the state is stored within local variables on the coroutine&amp;nbsp;stack.&lt;/p&gt;
&lt;h4&gt;Lazy!&lt;/h4&gt;
&lt;p&gt;It&amp;#8217;s important to remember, however, that
generator functions behave differently than regular functions do,
even if the surface appearance often says&amp;nbsp;otherwise.&lt;/p&gt;
&lt;p&gt;The difference I wanted to explore in this post becomes apparent
when we add some argument checking to the initial&amp;nbsp;example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;multiples&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;of&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Yields all multiples of given integer.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;expected a natural number, got &lt;/span&gt;&lt;span class="si"&gt;%r&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;of&lt;/span&gt;&lt;span class="p"&gt;,))&lt;/span&gt;

    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With that &lt;code&gt;if&lt;/code&gt; in place, passing a negative number shall result in an exception.
Yet when we attempt to do just that, it will seem as if nothing is&amp;nbsp;happening:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;multiples&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And to a certain degree, this is pretty much correct.
Simply &lt;em&gt;calling&lt;/em&gt; a generator function does comparatively little,
and doesn&amp;#8217;t actually execute any of its code!
Instead, we get back a &lt;em&gt;generator object&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;generator&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="n"&gt;multiples&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x10f0ceb40&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which is essentially a built-in analogue to the &lt;code&gt;Multiples&lt;/code&gt; iterator instance.
Commonly, it is said that both generator functions and iterator classes are &lt;em&gt;lazy&lt;/em&gt;:
they only do work when we asked (i.e. iterated&amp;nbsp;over).&lt;/p&gt;
&lt;h4&gt;Getting&amp;nbsp;eager&lt;/h4&gt;
&lt;p&gt;Oftentimes, this is perfectly okay.
The laziness of generators is in fact one of their great strengths,
which is particularly evident in the &lt;a href="https://pymotw.com/2/itertools/"&gt;immense usefulness&lt;/a&gt;
of &lt;a href="http://docs.python.org/2/library/itertools.html"&gt;the&lt;code&gt;itertools&lt;/code&gt; module&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;On the other hand, however,
delaying argument checks and similar operations until later may hamper debugging.
The classic engineering principle of &lt;a href="https://en.wikipedia.org/wiki/Fail-fast"&gt;failing fast&lt;/a&gt;
applies here very fittingly: any errors should be signaled immediately.
In Python, this means raising exceptions as soon as problems are&amp;nbsp;detected.&lt;/p&gt;
&lt;p&gt;Fortunately, it is possible to reconcile the benefits of laziness
with (more) defensive programming.
We can make the generator functions only a &lt;em&gt;little&lt;/em&gt; more eager,
just enough to verify the correctness of their&amp;nbsp;arguments.&lt;/p&gt;
&lt;p&gt;The trick is simple. We shall extract an &lt;em&gt;inner&lt;/em&gt; generator function
and only call it after we have checked the&amp;nbsp;arguments:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;multiples&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;of&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Yields all multiples of given integer.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;expected a natural number, got &lt;/span&gt;&lt;span class="si"&gt;%r&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;of&lt;/span&gt;&lt;span class="p"&gt;,))&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;multiples&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
            &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;multiples&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;From the caller&amp;#8217;s point of view, nothing has changed in the typical&amp;nbsp;case:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;multiples&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;generator&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="n"&gt;multiples&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x110579190&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;but if we try to make an incorrect invocation now,
the problem is detected &lt;em&gt;immediately&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;multiples&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;!-- --&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;Traceback (most recent call last):
  File &amp;quot;&amp;lt;pyshell#2&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
    multiples(of=-5)
  File &amp;quot;&amp;lt;pyshell#0&amp;gt;&amp;quot;, line 4, in multiples
    raise ValueError(&amp;quot;expected a natural number, got %r&amp;quot; % (of,))
ValueError: expected a natural number, got -5
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pretty neat, especially for something that requires only two lines of&amp;nbsp;code!&lt;/p&gt;
&lt;h4&gt;The last&amp;nbsp;(micro)optimization&lt;/h4&gt;
&lt;p&gt;Indeed, we didn&amp;#8217;t even have to pass the arguments to the inner (generator) function,
because they are already captured by the&amp;nbsp;closure.&lt;/p&gt;
&lt;p&gt;Unfortunately, this also has a slight performance cost.
A captured variable (also known as a &lt;em&gt;cell variable&lt;/em&gt;) is stored on the function object itself,
so Python has to emit
&lt;a href="http://holdenweb.blogspot.com/2014/07/closures-arent-easy.html"&gt;a different bytecode instruction&lt;/a&gt;
(&lt;code&gt;LOAD_DEREF&lt;/code&gt;) that involves
an &lt;a href="http://stupidpythonideas.blogspot.com/2015/12/how-lookup-works.html"&gt;extra pointer dereference&lt;/a&gt;.
Normally, this is not a problem, but in a tight generator loop it can make a&amp;nbsp;difference.&lt;/p&gt;
&lt;p&gt;We can eliminate this extra work&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt; by passing the parameters&amp;nbsp;explicitly:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="c"&gt;# (snip)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;multiples&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;of&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
            &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;multiples&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;of&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This turns them into local variables of the inner function,
replacing the &lt;code&gt;LOAD_DEREF&lt;/code&gt; instructions with (aptly named) &lt;code&gt;LOAD_FAST&lt;/code&gt; ones.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Technically, the &lt;em&gt;Multiples&lt;/em&gt; class is here is both an &lt;em&gt;iterator&lt;/em&gt;
(because it has the &lt;code&gt;next&lt;/code&gt;/&lt;code&gt;__next__&lt;/code&gt; methods) and &lt;em&gt;iterable&lt;/em&gt;
(because it has &lt;code&gt;__iter__&lt;/code&gt; method that returns an iterator, which happens to be the same object).
This is common feature of iterators that are not associated with any collection,
like the ones defined in the built-in &lt;a href="http://docs.python.org/2/library/itertools.html"&gt;&lt;code&gt;itertools&lt;/code&gt; module&lt;/a&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;Note that if you engage in this kind of microoptimizations,
I&amp;#8217;d assume you have already &lt;a href="https://www.python.org/doc/essays/list2str/"&gt;changed your global lookup into local ones&lt;/a&gt; :)&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="Python"></category><category term="generators"></category><category term="functions"></category><category term="arguments"></category><category term="closures"></category></entry><entry><title>The âletâ type trick inÂ Rust</title><link href="http://xion.io/post/code/rust-let-unit.html" rel="alternate"></link><updated>2017-02-01T18:42:00-08:00</updated><author><name>Karol Kuczmarski</name></author><id>tag:xion.io,2017-02-01:post/code/rust-let-unit.html</id><summary type="html">&lt;p&gt;Here&amp;#8217;s a neat little trick
that&amp;#8217;s especially useful if you&amp;#8217;re just starting out with&amp;nbsp;Rust.&lt;/p&gt;
&lt;p&gt;Because the language uses &lt;a href="https://en.wikipedia.org/wiki/Type_inference"&gt;type inference&lt;/a&gt; all over the place
(or at least within a single function),
it can often be difficult to figure out the type of an expression by yourself.
Such knowledge is very handy in resolving compiler errors,
which may be rather complex when generics and traits are&amp;nbsp;involved.&lt;/p&gt;
&lt;p&gt;The formula itself is very simple.
Its shortest, most common version &amp;#8212; and arguably the cleverest one, too &amp;#8212;
is the following &lt;code&gt;let&lt;/code&gt; binding:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;some_expression&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In virtually all cases, this binding will cause a type error on its own,
so it&amp;#8217;s not something you&amp;#8217;d leave permanently in your regular&amp;nbsp;code.&lt;/p&gt;
&lt;p&gt;But the important part here is the exact error message you&amp;nbsp;get:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;error[E0308]: mismatched types
  --&amp;gt; &amp;lt;anon&amp;gt;:42:13
   |
42 |         let () = some_expression;
   |             ^^ expected f64, found ()
   |
   = note: expected type `f64`
   = note:    found type `()`
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The type expected by Rust here (in this example, &lt;code&gt;f64&lt;/code&gt;)
is also the type of &lt;code&gt;some_expression&lt;/code&gt;. No more, no&amp;nbsp;less.&lt;/p&gt;
&lt;p&gt;There is nothing particularly wrong with using this technique
and not caring too much how it works under the hood.
But if you do want to know a little more what exactly is going on here,
the rest of this post covers it in some&amp;nbsp;detail.&lt;/p&gt;
&lt;h4&gt;The&amp;nbsp;unit&lt;/h4&gt;
&lt;p&gt;Firstly, you may be wondering about this curious &lt;code&gt;()&lt;/code&gt; type
that the compiler has apparently found in the statement above.
The official name for it is the &lt;em&gt;unit type&lt;/em&gt;,
and it has several notable&amp;nbsp;characteristics:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;There exists only one value&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; of this type: &lt;code&gt;()&lt;/code&gt; (same symbol as the type&amp;nbsp;itself).&lt;/li&gt;
&lt;li&gt;It represents an empty tuple and has therefore the size of&amp;nbsp;zero.&lt;/li&gt;
&lt;li&gt;It is the type of any expression that&amp;#8217;s turned into a &lt;em&gt;statement&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That last fact is particularly interesting,
as it makes &lt;code&gt;()&lt;/code&gt; appear in error messages that are more indicative of syntactic mishaps
rather than mismatched&amp;nbsp;types:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;positive_signum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="k"&gt;i32&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="k"&gt;i32&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;!-- --&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;error[E0308]: mismatched types
 --&amp;gt; &amp;lt;anon&amp;gt;:2:17
  |
2 |     if x &amp;gt; 0 { 1i32 }
  |                ^^^^ expected (), found i32
  |
  = note: expected type `()`
  = note:    found type `i32`
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you think about it, however, it makes perfect sense.
The last expression inside a function body is the return value.
This also means that everything &lt;em&gt;before&lt;/em&gt; it has to be a statement:
an expression of type &lt;code&gt;()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Working its way backward,
Rust will therefore expect only such expressions before the final &lt;code&gt;0i32&lt;/code&gt;.
This, in turn, puts the same constraint on the body of the &lt;code&gt;if&lt;/code&gt; statement.
The expression &lt;code&gt;1i32&lt;/code&gt; (with its type of &lt;code&gt;i32&lt;/code&gt;) clearly violates it,
causing the above error&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h4&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;Expanded&amp;#8221;&amp;nbsp;version&lt;/h4&gt;
&lt;p&gt;A natural question now arises:
is &lt;code&gt;()&lt;/code&gt; inside of the &lt;code&gt;let () = ...&lt;/code&gt; formula a &lt;em&gt;type&lt;/em&gt; &lt;code&gt;()&lt;/code&gt; or a &lt;em&gt;value&lt;/em&gt; &lt;code&gt;()&lt;/code&gt;?&amp;#8230;&lt;/p&gt;
&lt;p&gt;To answer that,
it&amp;#8217;s quite helpful to compare and contrast the original binding with its longer&amp;nbsp;&amp;#8220;equivalent&amp;#8221;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;some_expression&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This statement is conceptually very similar to our original one.
The error message it causes can also be used to debug issues with type&amp;nbsp;inference.&lt;/p&gt;
&lt;p&gt;Despite some cryptic symbols, the syntax here should also be more familiar.
It occurs in many typical, ordinary bindings you can see in everyday Rust code.
Here&amp;#8217;s an&amp;nbsp;example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;where it&amp;#8217;s abundantly clear that &lt;code&gt;i32&lt;/code&gt; is the type of variable &lt;code&gt;x&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Analogously above, you can see that
an unnamed symbol (&lt;code&gt;_&lt;/code&gt;, the underscore) is declared to be of type &lt;code&gt;()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So in this alternate phrasing, &lt;code&gt;()&lt;/code&gt; denotes a &lt;em&gt;type&lt;/em&gt;.&lt;/p&gt;
&lt;h4&gt;Let a pattern&amp;nbsp;emerge&lt;/h4&gt;
&lt;p&gt;What about the original form, &lt;code&gt;let () = ...&lt;/code&gt;?
There is no explicit type declaration here (i.e. no colon),
and a pair of empty parentheses isn&amp;#8217;t a name that could be assigned a new&amp;nbsp;value.&lt;/p&gt;
&lt;p&gt;What exactly is happening there,&amp;nbsp;then?&amp;#8230;&lt;/p&gt;
&lt;p&gt;Well, it isn&amp;#8217;t really anything special.
While it may look exceptional, and totally unlike common usages of &lt;code&gt;let&lt;/code&gt;,
it is in fact exactly the same thing as a mundane &lt;code&gt;let x = 5&lt;/code&gt;.
The potential misconception here is about the exact meaning of &lt;code&gt;x&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The simple version is that it&amp;#8217;s a name for the bound expression.&lt;br&gt;
But the actual truth is that it&amp;#8217;s a &lt;em&gt;pattern&lt;/em&gt; which is matched against that&amp;nbsp;expression.&lt;/p&gt;
&lt;p&gt;The terms &amp;#8220;pattern&amp;#8221; and &amp;#8220;matching&amp;#8221; here refer to the same mechanism
that occurrs within &lt;a href="https://doc.rust-lang.org/book/match.html"&gt;the &lt;code&gt;match&lt;/code&gt; statement&lt;/a&gt;.
You could even imagine a peculiar form of desugaring,
where a &lt;code&gt;let&lt;/code&gt; statement is converted into a semantically equivalent &lt;code&gt;match&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;original&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;desugared&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This analogy works perfectly&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;, because the patterns here are &lt;em&gt;irrefutable&lt;/em&gt;:
any value can match them, as all we&amp;#8217;re doing is giving the value a name.
Should the case be any different, Rust would reject our &lt;code&gt;let&lt;/code&gt; statement &amp;#8212;
just like it rejects a &lt;code&gt;match&lt;/code&gt; block that doesn&amp;#8217;t include branches for all possible&amp;nbsp;outcomes.&lt;/p&gt;
&lt;h4&gt;An empty&amp;nbsp;pattern&lt;/h4&gt;
&lt;p&gt;But just because a pattern has to always match the expression,
it doesn&amp;#8217;t mean only simple identifiers like &lt;code&gt;x&lt;/code&gt; or &lt;code&gt;y&lt;/code&gt; are permitted in &lt;code&gt;let&lt;/code&gt;.
If Rust is able to statically ensure a match,
it is perfectly &lt;span class="caps"&gt;OK&lt;/span&gt; to use a pattern with an internal structure&lt;sup id="fnref:4"&gt;&lt;a class="footnote-ref" href="#fn:4" rel="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Wrapping&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Wrapping&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Wrapping&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Of course, something like this is just superfluous and silly.
Same mechanism, however, is also behind the ability to &amp;#8220;initialize multiple&amp;nbsp;variables&amp;#8221;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What really happens is that we take a &lt;em&gt;tuple expression&lt;/em&gt; &lt;code&gt;(0, 1)&lt;/code&gt;
and match it against a pattern &lt;code&gt;(x, y)&lt;/code&gt;.
Because it is trivially satisified,
we have the symbols &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; bound to the tuple elements.
For all intents and purposes, this is equivalent to having two separate &lt;code&gt;let&lt;/code&gt; statements:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Of course, a 2-tuple is not the only pattern of this kind we can use in &lt;code&gt;let&lt;/code&gt;.
Others possible patterns include, for example, the &lt;em&gt;0-tuple&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Or, as we express it in Rust, &lt;code&gt;()&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now that&amp;#8217;s a truly useless statement!
But it also harkens straight to our debug binding.
It should be pretty clear now how it&amp;nbsp;works:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;()&lt;/code&gt; stanza on the left is neither a type nor a name, but a &lt;em&gt;pattern&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;The expression on the right is being &lt;em&gt;matched&lt;/em&gt; against this&amp;nbsp;pattern.&lt;/li&gt;
&lt;li&gt;Because the types of both of those things differ, the compiler signals an appropriate&amp;nbsp;error.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The curious thing is that there is nothing inherently magical about using &lt;code&gt;()&lt;/code&gt; on the left hand side.
It&amp;#8217;s simply the shortest pattern we can put after &lt;code&gt;let&lt;/code&gt;.
It&amp;#8217;s also one that&amp;#8217;s extremely unlikely to actually match the right hand side,
which ensures we get the desired error.
But if you substituted something equally exotic and rare &amp;#8212; say, &lt;code&gt;(x, ((y, z), Wrapping(w)))&lt;/code&gt; &amp;#8212;
it would work equally well as a rudimentary type&amp;nbsp;detector.&lt;/p&gt;
&lt;p&gt;Except for one thing, of course: nobody wants to type this much!
Borne out of this frugality (and/or laziness), a custom thus emerged to use &lt;code&gt;()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Short, sweet, and &lt;em&gt;clever&lt;/em&gt;.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;A more formal, type-theoretic formulation of this fact
is saying that &lt;code&gt;()&lt;/code&gt; is &lt;em&gt;inhabited&lt;/em&gt; by only one value.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;In case you are wondering, one possible fix here is to &lt;code&gt;return 1i32;&lt;/code&gt; inside the &lt;code&gt;if&lt;/code&gt;.
An (arguably more idiomatic) alternative is to put &lt;code&gt;0i32&lt;/code&gt; in an &lt;code&gt;else&lt;/code&gt; branch,
turning the entire &lt;code&gt;if&lt;/code&gt; construct into the last &amp;#8212; and only &amp;#8212; expression in the function body.&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;Note how each nested &lt;code&gt;match&lt;/code&gt; is also introducing a new scope,
exactly like the
&lt;a href="https://doc.rust-lang.org/1.10.0/book/references-and-borrowing.html#thinking-in-scopes"&gt;canonical desugaring&lt;/a&gt;
of &lt;code&gt;let&lt;/code&gt; which is often used to explain lifetimes and borrowing.&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:4"&gt;
&lt;p&gt;Unfortunately, Rust isn&amp;#8217;t currently capable of proving that the pattern is irrefutable in all obvious cases.
For example, &lt;code&gt;let Some(x) = Some(42);&lt;/code&gt; will be rejected due to the existence of a &lt;code&gt;None&lt;/code&gt; variant in &lt;code&gt;Option&lt;/code&gt;,
even though it isn&amp;#8217;t actually used in the (constant) expression on the right.&amp;#160;&lt;a class="footnote-backref" href="#fnref:4" rev="footnote" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="Rust"></category><category term="types"></category><category term="pattern matching"></category></entry><entry><title>Better location for unit tests inÂ Rust</title><link href="http://xion.io/post/code/rust-unit-test-placement.html" rel="alternate"></link><updated>2017-01-06T18:53:00-08:00</updated><author><name>Karol Kuczmarski</name></author><id>tag:xion.io,2017-01-06:post/code/rust-unit-test-placement.html</id><summary type="html">&lt;p&gt;For a unit test to be comprehensive,
it must often access some private symbols from the module it&amp;nbsp;checks.&lt;/p&gt;
&lt;p&gt;In Rust, this is permitted for submodules:
they can freely refer to anything defined &amp;#8220;upwards&amp;#8221; in the module hierarchy.
The only requirement is that they import it explicitly by name,
using statements such as &lt;code&gt;use super::foo&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To illustrate this,
here&amp;#8217;s an &lt;a href="https://is.gd/xTgUEd"&gt;example&lt;/a&gt;
of a ridiculously well-factored &lt;a href="http://wiki.c2.com/?FizzBuzzTest"&gt;FizzBuzz&lt;/a&gt;
along with its accompanying unit&amp;nbsp;test:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;borrow&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Cow&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fizzbuzz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;u32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nb"&gt;println&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fizzbuzz_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fizzbuzz_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;u32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Cow&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nl"&gt;&amp;#39;static&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;str&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;by3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;by5&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;by3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;by5&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;FizzBuzz&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;into&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;by3&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Fizz&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;into&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;by5&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Buzz&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;into&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;into&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;


&lt;span class="cp"&gt;#[cfg(test)]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kn"&gt;mod&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tests&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kn"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;super&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;fizzbuzz_string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;#[test]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;single_numbers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;assert_eq&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fizzbuzz_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;assert_eq&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fizzbuzz_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;assert_eq&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Fizz&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fizzbuzz_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;assert_eq&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Buzz&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fizzbuzz_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;assert_eq&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;7&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fizzbuzz_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;assert_eq&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Fizz&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fizzbuzz_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;assert_eq&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Buzz&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fizzbuzz_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;assert_eq&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;FizzBuzz&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fizzbuzz_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The internal function, as shown above, can be imported and verified independently
of the &lt;code&gt;pub&lt;/code&gt;lic one.
This is done through a &lt;code&gt;#[test]&lt;/code&gt; procedure in an inline&amp;nbsp;submodule.&lt;/p&gt;
&lt;p&gt;Such factorization and granular testing is commonplace,
especially when the public &lt;span class="caps"&gt;API&lt;/span&gt; may cause unwanted side effects,
such as printing stuff to stdout&amp;nbsp;here.&lt;/p&gt;
&lt;h4&gt;The issue of&amp;nbsp;length&lt;/h4&gt;
&lt;p&gt;But if you are like me and prefer your modules to be short and sweet,
you may feel justifiably concerned about this &lt;em&gt;inline&lt;/em&gt; submodule&amp;nbsp;business.&lt;/p&gt;
&lt;p&gt;In the toy example above,
tests have already taken at least as many lines as the actual code.
Real world usually &lt;a href="https://github.com/Geal/nom/blob/80a1deab58d1faf41c05a5d741d9e3f51bde3a55/src/nom.rs#L599"&gt;matches&lt;/a&gt; this ratio.
A module with a couple hundred lines of regular code starts
to be measured in &lt;a href="https://en.wikipedia.org/wiki/Source_lines_of_code#Related_terms"&gt;KLOCs&lt;/a&gt;
if we also include its&amp;nbsp;tests.&lt;/p&gt;
&lt;p&gt;While this could be taken as a strong hint to split things up,
it can just as easily disincentivize testing&amp;nbsp;instead.&lt;/p&gt;
&lt;p&gt;The obvious solution is to move those tests somewhere else.
What is not so evident is how to preserve this crucial module-submodule relation,
enabling us to write comprehensive tests in the first&amp;nbsp;place.&lt;/p&gt;
&lt;h4&gt;Looking for&amp;nbsp;inspiration&lt;/h4&gt;
&lt;p&gt;I must quickly disappoint anyone who would like to round up all their unit tests
and sequester them in some distant &lt;em&gt;tests/&lt;/em&gt; directory.
Such layout is reserved for
&lt;a href="https://doc.rust-lang.org/book/testing.html#the-tests-directory"&gt;crate-level&lt;/a&gt; (&amp;#8220;integration&amp;#8221;) tests.
Unit tests, on the other hand, are predestined to live among production code&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;So let&amp;#8217;s at least relocate them to separate&amp;nbsp;files.&lt;/p&gt;
&lt;p&gt;To make this goal more concrete,
we will try to emulate the project layout described in
&lt;a href="https://google.github.io/styleguide/cppguide.html#File_Names"&gt;Google&amp;#8217;s C++ style guide&lt;/a&gt;.
By this convention, a conceptual &amp;#8220;module&amp;#8221; or &amp;#8220;unit&amp;#8221; consists of the following&amp;nbsp;files:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;foo.h&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;foo.cc&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;foo_test.cc&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Translating this to Rust, we&amp;nbsp;get:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;foo.rs&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;foo_test.rs&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The first one is obviously our production code.
The second file, &lt;em&gt;foo_test.rs&lt;/em&gt;,
contains all the tests we would previously put in the &lt;code&gt;mod tests { }&lt;/code&gt; construct.&lt;/p&gt;
&lt;p&gt;Seems pretty clean and straightforward, right?
Unfortunately, Rust will not accept this setup without some&amp;nbsp;convincing.&lt;/p&gt;
&lt;h4&gt;Family&amp;nbsp;problems&lt;/h4&gt;
&lt;p&gt;To understand why,
recall that the mere presence of some &lt;em&gt;.rs&lt;/em&gt; files
is not enough for the Rust compiler to care.
If we want them picked up and included in the project,
we also need to add some &lt;em&gt;module declarations&lt;/em&gt;&amp;nbsp;first.&lt;/p&gt;
&lt;p&gt;In other words, there must also be a &lt;em&gt;mod.rs&lt;/em&gt; file in this directory,
containing at the very least the following&amp;nbsp;content:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// (mod.rs)&lt;/span&gt;

&lt;span class="kn"&gt;mod&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#[cfg(test)]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kn"&gt;mod&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;foo_test&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now it should be clearer that something is&amp;nbsp;wrong.&lt;/p&gt;
&lt;p&gt;We got two modules here, but they are &lt;em&gt;siblings&lt;/em&gt;.
Both &lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;foo_test&lt;/code&gt; are on the same level,
children of whatever parent module contains them both.
More to the point, it&amp;#8217;s &lt;code&gt;foo_test&lt;/code&gt; that&amp;#8217;s not a child module of &lt;code&gt;foo&lt;/code&gt;,
meaning it can only see the &lt;code&gt;pub&lt;/code&gt;lic symbols of the&amp;nbsp;latter.&lt;/p&gt;
&lt;p&gt;This is not quite enough to write a proper unit test.
It definitely isn&amp;#8217;t for our initial FizzBuzz example,
because the &lt;code&gt;fizzbuzz_string&lt;/code&gt; function cannot even be&amp;nbsp;imported!&lt;/p&gt;
&lt;h4&gt;Existential&amp;nbsp;crises&lt;/h4&gt;
&lt;p&gt;Okay, so how about we move the &lt;code&gt;mod foo_test;&lt;/code&gt; declaration to &lt;em&gt;foo.rs&lt;/em&gt;?
This should be enough to establish the proper hierarchy.
After all, this is how the module tree is
&lt;a href="https://doc.rust-lang.org/book/crates-and-modules.html#defining-modules"&gt;normally reconstructed&lt;/a&gt;:
from the appropriate placement of the &lt;code&gt;mod&lt;/code&gt; statements.&lt;/p&gt;
&lt;p&gt;So, here we&amp;nbsp;go:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// (foo.rs)&lt;/span&gt;

&lt;span class="cp"&gt;#[cfg(test)]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kn"&gt;mod&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;foo_test&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;!-- --&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;error: cannot declare a new module at this location
  --&amp;gt; src/parent/foo.rs:4:5
   |
 4 | mod foo_test;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;#8230;Really?&lt;/p&gt;
&lt;p&gt;Well, yes. A declaration like this simply isn&amp;#8217;t allowed.
The reason for this is actually much less arbitrary than the error message would&amp;nbsp;indicate.&lt;/p&gt;
&lt;p&gt;To put it bluntly, &lt;code&gt;foo_test&lt;/code&gt; simply cannot &lt;em&gt;exist&lt;/em&gt; if it&amp;#8217;s introduced there.
To deliver on its declaration promise,
the submodule would have to reside &lt;em&gt;within &lt;code&gt;foo&lt;/code&gt; itself&lt;/em&gt;.
But of course, &lt;em&gt;foo.rs&lt;/em&gt; is just a file, so this setup is evidently&amp;nbsp;impossible.&lt;/p&gt;
&lt;p&gt;All in all, Rust seems to be looking for our module in all the wrong&amp;nbsp;places.&lt;/p&gt;
&lt;p&gt;Perhaps we can just &lt;em&gt;tell it&lt;/em&gt; where it should be going&amp;nbsp;instead?&amp;#8230;&lt;/p&gt;
&lt;h4&gt;The right&amp;nbsp;path&lt;/h4&gt;
&lt;p&gt;Enter the &lt;code&gt;#[path]&lt;/code&gt; attribute,
which fulfills this exact&amp;nbsp;purpose:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// (foo.rs)&lt;/span&gt;

&lt;span class="cp"&gt;#[cfg(test)]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#[path = &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;./foo_test.rs&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kn"&gt;mod&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;foo_test&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;#[path]&lt;/code&gt; tells the Rust compiler where to look for the &lt;code&gt;mod&lt;/code&gt;ule it is attached to.
Its argument is relative to the location of the outer module (like &lt;code&gt;foo&lt;/code&gt; here),
and can be either a single file, or a directory with &lt;em&gt;mod.rs&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Conceptually, this is similar to a custom &lt;code&gt;ClassLoader&lt;/code&gt; in Java,
or the common &lt;a href="http://xion.org.pl/2012/05/06/hacking-python-imports/"&gt;&lt;code&gt;sys.path&lt;/code&gt; hacks&lt;/a&gt; in Python.
Unlike those two languages, however,
the &lt;code&gt;#[path]&lt;/code&gt; attribute is only relevant at compile&amp;nbsp;time.&lt;/p&gt;
&lt;p&gt;Additionally, and somewhat &lt;a href="https://github.com/rust-lang/rust/issues/13156"&gt;confusingly&lt;/a&gt;,
&lt;code&gt;#[path]&lt;/code&gt; can also be applied &lt;em&gt;retroactively&lt;/em&gt;
to a module that the compiler has already located.
In such case, it will affect &lt;a href="https://doc.rust-lang.org/reference.html#modules"&gt;the lookup of any child modules&lt;/a&gt;
by making &lt;code&gt;rustc&lt;/code&gt; search for them in the new&amp;nbsp;location.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;With &lt;code&gt;#[path]&lt;/code&gt; handy,
it is therefore possible to implement custom layouts
of regular source modules and test&amp;nbsp;files.&lt;/p&gt;
&lt;p&gt;But like with every tool that can be used to defy conventions,
it should be used with the appropriate care.
While a straightforward and self-documenting approach described here
is unlikely to raise any eyebrows,
rewriting module paths willy-nilly is most certainly a bad&amp;nbsp;idea.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Okay, technically it &lt;em&gt;is&lt;/em&gt; possible to completely isolate them,
essentially by abusing the approach I describe later in this post.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="Rust"></category><category term="unit tests"></category><category term="testing"></category><category term="modules"></category></entry><entry><title>__all__ and wild imports inÂ Python</title><link href="http://xion.io/post/code/python-all-wild-imports.html" rel="alternate"></link><updated>2016-12-26T20:51:00-08:00</updated><author><name>Karol Kuczmarski</name></author><id>tag:xion.io,2016-12-26:post/code/python-all-wild-imports.html</id><summary type="html">&lt;p&gt;An often misunderstood piece of Python import machinery is the &lt;code&gt;__all__&lt;/code&gt; attribute.
While it is completely &lt;em&gt;optional&lt;/em&gt;,
it&amp;#8217;s common to see modules with the &lt;code&gt;__all__&lt;/code&gt; list populated&amp;nbsp;explicitly:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;__all__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Foo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c"&gt;# ...&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c"&gt;# ...&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;baz&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c"&gt;# ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Before explaining what the real purpose of &lt;code&gt;__all__&lt;/code&gt; is
(and how it relates to the titular wild imports),
let&amp;#8217;s deconstruct some common misconceptions by highlighting what it &lt;em&gt;isn&amp;#8217;t&lt;/em&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;__all__&lt;/code&gt; doesn&amp;#8217;t prevent any of the module symbols (functions, classes, etc.)
from being &lt;em&gt;directly&lt;/em&gt; imported.
In our the example, the seemingly omitted &lt;code&gt;baz&lt;/code&gt; function (which is not included in &lt;code&gt;__all__&lt;/code&gt;),
is still &lt;em&gt;perfectly importable&lt;/em&gt; by writing &lt;code&gt;from module import baz&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Similarly, &lt;code&gt;__all__&lt;/code&gt; doesn&amp;#8217;t influence what symbols are included in the results of
&lt;code&gt;dir(module)&lt;/code&gt; or &lt;code&gt;vars(module)&lt;/code&gt;. So in the case above, a &lt;code&gt;dir&lt;/code&gt; call would result in a
&lt;code&gt;['Foo', 'bar', 'baz']&lt;/code&gt; list, even though &lt;code&gt;'baz'&lt;/code&gt; does not occur in &lt;code&gt;__all__&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In other words, the content of &lt;code&gt;__all__&lt;/code&gt; is more of a convention
rather than a strict limitation.
Regardless of what you put there, every symbol defined in your module
will still be accessible from the&amp;nbsp;outside.&lt;/p&gt;
&lt;p&gt;This is a clear reflection of the common policy in Python:
assume &lt;a href="https://mail.python.org/pipermail/tutor/2003-October/025932.html"&gt;everyone is a consenting adult&lt;/a&gt;,
and that visibility controls are not necessary.
Without an explicit &lt;code&gt;__all__&lt;/code&gt; list,
Python simply puts all of the module &amp;#8220;public&amp;#8221; symbols there anyway&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h4&gt;The meaning of it &lt;code&gt;__all__&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;So, what does &lt;code&gt;__all__&lt;/code&gt; actually&amp;nbsp;effect?&lt;/p&gt;
&lt;p&gt;This is neatly summed up in this brief
&lt;a href="http://stackoverflow.com/a/2187636/434799"&gt;StackOverflow answer&lt;/a&gt;.
Simply speaking, its purpose is&amp;nbsp;twofold:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;It tells the readers of the source code &amp;#8212; be it humans or automated tools &amp;#8212;
what&amp;#8217;s the conventional &lt;em&gt;public &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/em&gt; exposed by the&amp;nbsp;module.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It lists names to import when performing the so-called &lt;em&gt;wild import&lt;/em&gt;:
&lt;code&gt;from module import *&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Because of the default content of &lt;code&gt;__all__&lt;/code&gt; that I mentioned earlier,
the public &lt;span class="caps"&gt;API&lt;/span&gt; of a module can also be defined implicitly.
Some style guides (like the &lt;a href="https://google.github.io/styleguide/pyguide.html"&gt;Google one&lt;/a&gt;)
are therefore relying on the &lt;code&gt;public&lt;/code&gt; and &lt;code&gt;_private&lt;/code&gt; naming exclusively.
Nevertheless, an explicit &lt;code&gt;__all__&lt;/code&gt; list is still a perfectly valid option,
especially considering that no approach offers any form of &lt;em&gt;actual&lt;/em&gt; access&amp;nbsp;control.&lt;/p&gt;
&lt;h4&gt;Import&amp;nbsp;star&lt;/h4&gt;
&lt;p&gt;The second point, however, has some real runtime&amp;nbsp;significance.&lt;/p&gt;
&lt;p&gt;In Python, like in many other languages,
it is recommended to be explicit about the exact functions and classes we&amp;#8217;re importing.
Commonly, the &lt;code&gt;import&lt;/code&gt; statement will thus take one of the following&amp;nbsp;forms:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;urllib.parse&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;randint&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;fatal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;warning&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;warn&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;urllib.parse&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;urlparse&lt;/span&gt;
&lt;span class="c"&gt;# etc.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In each case, it&amp;#8217;s easy to see the relevant &lt;em&gt;name&lt;/em&gt; being imported.
Regardless of the exact syntax and the possible presence of aliasing (&lt;code&gt;as&lt;/code&gt;),
it&amp;#8217;s always the last (qualified) name in the &lt;code&gt;import&lt;/code&gt; statement,
before a newline or&amp;nbsp;comma.&lt;/p&gt;
&lt;p&gt;Contrast this with an &lt;code&gt;import&lt;/code&gt; that ends with an&amp;nbsp;asterisk:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is called a &lt;em&gt;star&lt;/em&gt; or &lt;em&gt;wild import&lt;/em&gt;, and it isn&amp;#8217;t so straightforward.
This is also the reason why using it is &lt;a href="http://stackoverflow.com/a/3615206/434799"&gt;generally discouraged&lt;/a&gt;,
except for some &lt;a href="http://stackoverflow.com/a/3615238/434799"&gt;very specific situations&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Why? Because you cannot easily see what exact names are being imported here.
For that you&amp;#8217;d have to go to the module&amp;#8217;s source and &amp;#8212; you guessed it &amp;#8212;
look at the &lt;code&gt;__all__&lt;/code&gt; list&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h4&gt;Taming the&amp;nbsp;wild&lt;/h4&gt;
&lt;p&gt;Barring some less important details,
the mechanics of &lt;code&gt;import *&lt;/code&gt; could therefore be expressed in the following Python&amp;nbsp;(pseudo)code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;module&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;__temp&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;__name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;globals&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__temp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;__name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;__temp&lt;/span&gt;
&lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;__name&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;One interesting case to consider is
what happens when &lt;code&gt;__all__&lt;/code&gt; contains a &lt;em&gt;wrong&lt;/em&gt;&amp;nbsp;name.&lt;/p&gt;
&lt;p&gt;What if one of the strings there doesn&amp;#8217;t correspond to any name within the&amp;nbsp;module?&amp;#8230;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# foo.py&lt;/span&gt;
&lt;span class="n"&gt;__all__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Foo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;foo&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;foo&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="ne"&gt;AttributeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;module&amp;#39;&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="n"&gt;no&lt;/span&gt; &lt;span class="n"&gt;attribute&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Foo&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Quite predictably, &lt;code&gt;import *&lt;/code&gt; blows up.&lt;br&gt;
Notice, however, that regular import &lt;em&gt;still works&lt;/em&gt;.&lt;br&gt;&lt;/p&gt;
&lt;p&gt;All in all (ahem), this hints at a cute little trick which is also very&amp;nbsp;self-evident:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;__all__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;DO_NOT_WILD_IMPORT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Put this in a Python module, and no one will be able to &lt;code&gt;import *&lt;/code&gt; from it!&lt;br&gt;
Much more effective than any lint warning ;-)&lt;br&gt;&lt;/p&gt;
&lt;h4&gt;Test &lt;code&gt;__all__&lt;/code&gt; the&amp;nbsp;things&lt;/h4&gt;
&lt;p&gt;Jokes aside, this phenomenon (&lt;code&gt;__all__&lt;/code&gt; with an out-of-place name in it) can also backfire.
Especially when
&lt;a href="https://github.com/Xion/callee/blob/277add8170bd0c758f3c4a3068127e8229d2e2d1/callee/__init__.py#L31"&gt;reexporting&lt;/a&gt;,
it&amp;#8217;s relatively easy to introduce stray &lt;code&gt;'name'&lt;/code&gt; into &lt;code&gt;__all__&lt;/code&gt;:
one which doesn&amp;#8217;t correspond to any &lt;code&gt;name&lt;/code&gt; that&amp;#8217;s &lt;em&gt;actually present&lt;/em&gt; in the&amp;nbsp;namespace.&lt;/p&gt;
&lt;p&gt;If we commit such a mishap, we are inadvertently lying about the public &lt;span class="caps"&gt;API&lt;/span&gt; of our package.
What&amp;#8217;s worse is that this mistake can propagate through documentation generators,
and ultimately mislead our&amp;nbsp;users.&lt;/p&gt;
&lt;p&gt;While some linters may be able to catch this,
a &lt;a href="https://github.com/Xion/callee/blob/277add8170bd0c758f3c4a3068127e8229d2e2d1/tests/test_all.py#L10"&gt;simple test&lt;/a&gt;
like this&amp;nbsp;one:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Test that __all__ contains only names that are actually exported.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;yourpackage&lt;/span&gt;

    &lt;span class="n"&gt;missing&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;yourpackage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__all__&lt;/span&gt;
                  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;yourpackage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEmpty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;missing&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;__all__ contains unresolved names: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s"&gt;&amp;quot;, &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;missing&lt;/span&gt;&lt;span class="p"&gt;),))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;is a quick &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; easy way to ensure this never&amp;nbsp;happens.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;Public&amp;#8221; symbols have names that don&amp;#8217;t begin with underscore (&lt;code&gt;_&lt;/code&gt;).
Of course, &amp;#8220;non-public&amp;#8221; ones are still accessible
but are treated as implicitly unstable &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; discouraged.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;Or check what symbols there don&amp;#8217;t have a leading underscore.&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="Python"></category><category term="modules"></category><category term="imports"></category><category term="testing"></category></entry><entry><title>A tale of twoÂ Rusts</title><link href="http://xion.io/post/programming/rust-nightly-vs-stable.html" rel="alternate"></link><updated>2017-03-28T18:35:00+00:00</updated><author><name>Karol Kuczmarski</name></author><id>tag:xion.io,2016-12-24:post/programming/rust-nightly-vs-stable.html</id><summary type="html">&lt;p&gt;The writing has been on the wall for many months now,
but I think the time has come when we can officially declare&amp;nbsp;it.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Stable Rust is dead. Nightly Rust is the only&amp;nbsp;Rust.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Say&amp;nbsp;what?&lt;/h4&gt;
&lt;p&gt;If you&amp;#8217;re out of the loop,
&lt;a href="http://rust-lang.org/"&gt;Rust&lt;/a&gt; is this newfangled system programming language.
Rust is meant to fit in the niches normally occupied by C,
so its domain includes performance-sensitive and safety-critical applications.
Embedded programming, &lt;span class="caps"&gt;OS&lt;/span&gt; kernels, databases, servers,
and similar low-level pieces of computing and networking infrastructure
are all within its&amp;nbsp;purview.&lt;/p&gt;
&lt;p&gt;Of course, this &amp;#8220;replacing C&amp;#8221; thing is still an ambition that&amp;#8217;s years or decades away.
But in theory, there is nothing preventing it from happening.
The main thing Rust would need here is &lt;em&gt;time&lt;/em&gt;: time to buy trust of developers
by having been used in real-world, production scenarios without&amp;nbsp;issues.&lt;/p&gt;
&lt;p&gt;To facilitate this (and for other reasons),
Rust has been using &lt;a href="https://doc.rust-lang.org/stable/book/release-channels.html"&gt;three &lt;em&gt;release channels&lt;/em&gt;&lt;/a&gt;
with varying frequency of updates.
There are the &lt;em&gt;stable&lt;/em&gt;, &lt;em&gt;beta&lt;/em&gt;, and &lt;em&gt;nightly&lt;/em&gt; Rust.
Of those, beta is pretty much an
&lt;a href="https://en.wikipedia.org/wiki/Software_release_life_cycle#Release_candidate"&gt;&lt;span class="caps"&gt;RC&lt;/span&gt;&lt;/a&gt;
for a future stable release,
so there aren&amp;#8217;t many differences at all between the first two&amp;nbsp;channels.&lt;/p&gt;
&lt;h4&gt;Nightly&amp;nbsp;perks&lt;/h4&gt;
&lt;p&gt;This cannot be said about&amp;nbsp;nightly.&lt;/p&gt;
&lt;p&gt;In fact, nightly Rust is essentially &lt;em&gt;its own language&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;First, there is a number of exclusive language features that are only available on nightly.
They are all guarded by numerous &lt;code&gt;#![feature(...)]&lt;/code&gt; gates
which are required to activate them.
Because stable Rust doesn&amp;#8217;t accept any such directive,
trying to compile code that uses them will fail on a non-nightly&amp;nbsp;compiler.&lt;/p&gt;
&lt;p&gt;This has been justified as a necessary step for testing out new features
in real scenarios, or at least those that resemble (stable) reality as close as possible.
Indeed, many features &lt;em&gt;did&lt;/em&gt; eventually land in stable Rust by going through this route
&amp;#8212; a recent example would be &lt;a href="https://m4rw3r.github.io/rust-questionmark-operator"&gt;the &lt;code&gt;?&lt;/code&gt; operator&lt;/a&gt;,
an error-handling measure analogous to the &lt;code&gt;try!&lt;/code&gt; macro.&lt;/p&gt;
&lt;p&gt;But some features take a lot of time to stabilize.
And few (like &lt;code&gt;zero_one&lt;/code&gt; which guards the numeric traits
&lt;a href="https://doc.rust-lang.org/std/num/trait.Zero.html"&gt;&lt;code&gt;Zero&lt;/code&gt;&lt;/a&gt;
and &lt;a href="https://doc.rust-lang.org/std/num/trait.One.html"&gt;&lt;code&gt;One&lt;/code&gt;&lt;/a&gt;) may even be deprecated
without ever getting out of the nightly&amp;nbsp;channel.&lt;/p&gt;
&lt;h4&gt;Unplugged&lt;/h4&gt;
&lt;p&gt;Secondly, and most importantly, there is at least one feature
that won&amp;#8217;t get stabilized &lt;strong&gt;ever&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#![feature(plugin)]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And it&amp;#8217;s all by&amp;nbsp;design.&lt;/p&gt;
&lt;p&gt;This &lt;code&gt;plugin&lt;/code&gt; switch is what&amp;#8217;s necessary to include &lt;code&gt;#![plugin(...)]&lt;/code&gt; directives.
Those in turn activate &lt;em&gt;compiler plugins&lt;/em&gt;:
user-provided additions to the compiler itself.
Plugins operate against the &lt;span class="caps"&gt;API&lt;/span&gt; provided directly by &lt;code&gt;rustc&lt;/code&gt;
and enhance its capabilities beyond what the language normally&amp;nbsp;provides.&lt;/p&gt;
&lt;p&gt;Although it sounds rather ominous,
the vast majority of plugins in the wild serve a singular purpose: &lt;em&gt;code generation&lt;/em&gt;.
They are written with the sole purpose of combating Rust&amp;#8217;s rigidity,
including the (perfectly expected) lack of dynamic runtime capabilities
and the (disappointingly) stiff limits of its wanting macro&amp;nbsp;system.&lt;/p&gt;
&lt;p&gt;This is how they are utilized by &lt;a href="http://diesel.rs/"&gt;Diesel&lt;/a&gt;, for example,
a popular &lt;span class="caps"&gt;ORM&lt;/span&gt; and &lt;span class="caps"&gt;SQL&lt;/span&gt; query interface;
or &lt;a href="https://serde.rs/"&gt;Serde&lt;/a&gt;, a serialization&amp;nbsp;framework.&lt;/p&gt;
&lt;p&gt;Why compiler plugins can never be stable, though?
It&amp;#8217;s because the internal &lt;span class="caps"&gt;API&lt;/span&gt; they are coded against
goes too deep into the compiler bowels to ever get stabilized.
If it were, it would severely limit the ability to further develop the language
without significant breakage of the established&amp;nbsp;plugins.&lt;/p&gt;
&lt;h4&gt;Pseudo-stable&lt;/h4&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;Wait,&amp;#8221; you may ask, &amp;#8220;how do we even talk about Â«establishedÂ» compiler plugins?
Shouldn&amp;#8217;t they be, by their very definition, &lt;em&gt;unstable&lt;/em&gt;?&amp;#8221;&lt;/p&gt;
&lt;p&gt;Well&amp;#8230; yes. They definitely should. And therein lies the crux of the&amp;nbsp;problem.&lt;/p&gt;
&lt;p&gt;Turns out, plugins &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; nightly Rust are only &lt;em&gt;mostly&lt;/em&gt; treated as&amp;nbsp;unstable.&lt;/p&gt;
&lt;p&gt;In reality, the comfort and convenience provided by nightly versions of many libraries
&amp;#8212; all of which rely on compiler plugins &amp;#8212; is difficult to overstate.
While their stable approximations are available, they at best require rather complicated&amp;nbsp;setup.&lt;/p&gt;
&lt;p&gt;What&amp;#8217;s always involved is a custom build step,
and usually a separate file for the relevant code symbols and declarations.
In the end, we get a bunch of autogenerated modules
whose prior non-existence during development may also confuse IDEs and autocompletion&amp;nbsp;tools.&lt;/p&gt;
&lt;p&gt;For all those reasons and more,
an ecosystem has developed where several popular libraries are &amp;#8220;nightly but pseudo-stable&amp;#8221;.
This includes some key components in many serious applications,
like the aforementioned &lt;span class="caps"&gt;ORM&lt;/span&gt; &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; serialization&amp;nbsp;crates.&lt;/p&gt;
&lt;h4&gt;The&amp;nbsp;precedent&lt;/h4&gt;
&lt;p&gt;And so has been the state of affairs until very recently.
The nightly Rust has been offering some extremely enticing features,
but the stable channel was at least paid a lip service to.
However, the mentality among library authors that &amp;#8220;nightly-first&amp;#8221; is an acceptable policy
had been strong for a long time&amp;nbsp;now.&lt;/p&gt;
&lt;p&gt;No wonder it has finally shifted towards&amp;nbsp;&amp;#8220;nightly-only&amp;#8221;.&lt;/p&gt;
&lt;p&gt;Meet &lt;a href="http://rocket.rs"&gt;Rocket&lt;/a&gt;,
the latest contestant in the already rich lineup of &lt;a href="http://www.arewewebyet.org/topics/frameworks/"&gt;Rust web frameworks&lt;/a&gt;.
Everything about it is really slick:
a flashy designer website; approachable and comprehensive documentation;
and concise, &lt;a href="http://flask.pocoo.org/"&gt;Flask&lt;/a&gt;-like &lt;span class="caps"&gt;API&lt;/span&gt; for
&lt;a href="https://rocket.rs/overview/#anatomy-of-a-rocket-application"&gt;routing&lt;/a&gt;
and response handling.
Predictably, it&amp;#8217;s been making quite a
&lt;a href="https://www.reddit.com/r/rust/comments/5jxv6u/rocket_web_framework_for_rust/"&gt;buzz&lt;/a&gt; on
&lt;a href="https://www.reddit.com/r/programming/comments/5jy64x/rocket_a_web_framework_for_rust/"&gt;Reddit&lt;/a&gt;
and &lt;a href="https://news.ycombinator.com/item?id=13245475"&gt;elsewhere&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There is just an itty bitty little problem: Rocket &lt;em&gt;only works on nightly&lt;/em&gt;.
No alternatives, no codegen shims&amp;#8230;
and no prospects of any change in the foreseeable future.
Yet, there doesn&amp;#8217;t seem to be many people concerned about this,
so clearly this is (a new?)&amp;nbsp;norm.&lt;/p&gt;
&lt;h4&gt;The Rusts&amp;nbsp;split&lt;/h4&gt;
&lt;p&gt;In essence, Rust is now two separate&amp;nbsp;languages.&lt;/p&gt;
&lt;p&gt;The stable-nightly divide has essentially evolved into something that closely resembles
the early stages of the &lt;a href="https://wiki.python.org/moin/Python2orPython3"&gt;2.x vs. 3.x&lt;/a&gt; split in the Python world.
The people still &amp;#8220;stuck&amp;#8221; on 2.7 (i.e. stable) were &amp;#8220;holdouts&amp;#8221;,
and the future was with 3.x (nightly).
Sure, there have been some pithy backports (feature stabilizations),
but the interesting stuff has been happening on the other&amp;nbsp;side.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s astonishing that Rust managed to replicate this phenomenon
without any major version bumps, and with no backwards-incompatible releases.
Technically, everything is still version 1.x..
Not even &lt;a href="http://crates.io"&gt;Cargo&lt;/a&gt;, the Rust package manager, recognizes the stable-nightly&amp;nbsp;distinction.&lt;/p&gt;
&lt;p&gt;But that&amp;#8217;s hardly any consolation when you try to install a nightly-only crate on stable Rust.
You will download it just fine, and get all the way to compiling its code,
only to have it error out due to unsupported &lt;code&gt;#![feature(...)]&lt;/code&gt; declarations.&lt;/p&gt;
&lt;h4&gt;What&amp;nbsp;now?&lt;/h4&gt;
&lt;p&gt;The natural question is, can this situation be effectively&amp;nbsp;addressed?&lt;/p&gt;
&lt;p&gt;I hope it&amp;#8217;s obvious why stable Rust cannot suddenly start supporting compiler plugins.
Given that they rely on &lt;code&gt;rustc&lt;/code&gt; internals which aren&amp;#8217;t standardized,
doing so would be contrary to the very definition of a &amp;#8220;stable&amp;#8221; release&amp;nbsp;channel.&lt;/p&gt;
&lt;p&gt;The other option is to fully embrace nightly as &lt;em&gt;de facto&lt;/em&gt; recommended toolchain.
This has been informally happening already,
despite the &lt;a href="https://doc.rust-lang.org/stable/book/release-channels.html#choosing-a-version"&gt;contrary recommendations&lt;/a&gt;
in the official&amp;nbsp;docs.&lt;/p&gt;
&lt;p&gt;The downsides are obvious here, though: nightly Rust is not a misnomer at all.
The compiler is in active development and its build &lt;a href="https://travis-ci.org/rust-lang/rust/builds"&gt;breaks often&lt;/a&gt;.
Some of those breakages make it into nightly releases with unsatisfying&amp;nbsp;regularity.&lt;/p&gt;
&lt;p&gt;Of course, there was also another option:
stick to the intended purpose of release channels and don&amp;#8217;t build castles on the sand
by publishing nightly-first or nightly-only crates.
This ship seems to have sailed by now, as the community has collectively decided&amp;nbsp;otherwise.&lt;/p&gt;
&lt;p&gt;Oh&amp;nbsp;well.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s just a little ironic that in a language that is so focused on safety,
everyone is perfectly happy with an &lt;em&gt;unstable compiler&lt;/em&gt;.&lt;/p&gt;</summary><category term="Rust"></category><category term="nightly Rust"></category><category term="stable Rust"></category><category term="Rocket.rs"></category></entry><entry><title>Simulating exceptions in Rust with IIFE</title><link href="http://xion.io/post/code/rust-iife.html" rel="alternate"></link><updated>2016-12-18T15:00:00-08:00</updated><author><name>Karol Kuczmarski</name></author><id>tag:xion.io,2016-12-17:post/code/rust-iife.html</id><summary type="html">&lt;p&gt;While many languages use exceptions for handling errors,
Rust prefers a slightly different, yet very classical approach: &lt;em&gt;return values&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Now, they aren&amp;#8217;t exactly the same thing as in C,
where the error is indicated by a special value within the same return type.
In Rust, &lt;a href="https://doc.rust-lang.org/std/result/"&gt;the &lt;code&gt;Result&lt;/code&gt; enum&lt;/a&gt; can neatly separate the two,
in similar vein to how ad-hoc tuples in Go do&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;.
But unlike Go, Rust also offers additional facilities for &lt;em&gt;error propagation&lt;/em&gt;,
including the &lt;a href="https://doc.rust-lang.org/std/macro.try.html"&gt;&lt;code&gt;try!&lt;/code&gt; macro&lt;/a&gt;
and &lt;a href="https://m4rw3r.github.io/rust-questionmark-operator"&gt;the recently stabilized &lt;code&gt;?&lt;/code&gt; operator&lt;/a&gt;.
And finally,
the &lt;code&gt;Result&lt;/code&gt; wrappings can be straightforwardly &lt;a href="https://doc.rust-lang.org/std/result/enum.Result.html#method.unwrap"&gt;unpacked&lt;/a&gt;,
possibly by &lt;a href="https://doc.rust-lang.org/std/result/enum.Result.html#method.unwrap_or"&gt;defaulting&lt;/a&gt; to a known safe&amp;nbsp;value.&lt;/p&gt;
&lt;p&gt;Some conveniences of exceptions may be hard to pass up, though.
The &lt;code&gt;try&lt;/code&gt;-&lt;code&gt;catch&lt;/code&gt; construct is evidently one of them,
and Rust might eventually get it in
&lt;a href="https://github.com/rust-lang/rfcs/blob/master/text/0243-trait-based-exception-handling.md"&gt;one form&lt;/a&gt;
or another.
Before that happens, however, there is a trick that can often work as an acceptable&amp;nbsp;substitute.&lt;/p&gt;
&lt;h4&gt;Many &lt;code&gt;let&lt;/code&gt;s&lt;/h4&gt;
&lt;p&gt;Here&amp;#8217;s an example where it can be very&amp;nbsp;useful.&lt;/p&gt;
&lt;p&gt;Have a look at the following function.
Its purpose is to retrieve a GitHub login of a user who owns a specific &lt;em&gt;gist&lt;/em&gt;
&amp;#8212; a small sample of code posted to the &lt;em&gt;gists.github.com&lt;/em&gt; website&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s assume we have already talked to GitHub &lt;span class="caps"&gt;API&lt;/span&gt;
and received the following &lt;span class="caps"&gt;JSON&lt;/span&gt; response from its relevant&amp;nbsp;endpoint:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;12345678&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;owner&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;login&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Octocat&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="err"&gt;...&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="err"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Parsing it is easy: we can do it with
the &lt;a href="https://crates.io/crates/rustc-serialize"&gt;&lt;em&gt;rustc_serialize&lt;/em&gt; crate&lt;/a&gt;,
among other options.
What proves a little more involved is to dig through the &lt;span class="caps"&gt;JSON&lt;/span&gt; tree
in order to reach the interesting&amp;nbsp;value:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;rustc_serialize&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Json&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;


&lt;span class="c-Doc"&gt;/// Retrieve the gist owner from a JSON received from&lt;/span&gt;
&lt;span class="c-Doc"&gt;/// the /gists/$ID endpoint of the GitHub API.&lt;/span&gt;
&lt;span class="c-Doc"&gt;///&lt;/span&gt;
&lt;span class="c-Doc"&gt;/// If the gist is anonymous, &amp;quot;anonymous&amp;quot; is returned.&lt;/span&gt;
&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;gist_owner_from_info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;Json&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_object&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;owner&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;and_then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_object&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;login&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;and_then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_string&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_owned&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;anonymous&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;into&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Whew! I guess we&amp;#8217;re lucky we don&amp;#8217;t need to go &lt;em&gt;too&lt;/em&gt; deep into that &lt;span class="caps"&gt;JSON&lt;/span&gt;.
The code is clearly exhibiting a rightward slant,
which some people refer to as &lt;a href="https://blog.codinghorror.com/flattening-arrow-code/"&gt;the &amp;#8220;arrow code&amp;#8221;&lt;/a&gt;,
Unsurprisingly, it is generally considered bad for&amp;nbsp;readability.&lt;/p&gt;
&lt;p&gt;There are few other ways of writing this, of course,
including a style reminiscent of JavaScript promises &amp;#8212;
that is, relying completely on
&lt;a href="https://doc.rust-lang.org/std/option/enum.Option.html#method.and_then"&gt;the &lt;code&gt;and_then&lt;/code&gt; method&lt;/a&gt;.
Neither seem very satisfying, though, especially if you compare it with something like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;owner&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;login&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;KeyError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;anonymous&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Yes, exceptions are quite useful&amp;nbsp;sometimes.&lt;/p&gt;
&lt;p&gt;So, how can we get something like this in&amp;nbsp;Rust?&lt;/p&gt;
&lt;h4&gt;JavaScript for the&amp;nbsp;rescue&lt;/h4&gt;
&lt;p&gt;Succor comes from an unexpected direction.
To emulate exceptions &amp;#8212; specifically, the &lt;code&gt;try&lt;/code&gt;-&lt;code&gt;catch&lt;/code&gt; exception blocks &amp;#8212;
we can utilize a technique that is most popular in&amp;#8230;&amp;nbsp;JavaScript.&lt;/p&gt;
&lt;p&gt;At least until &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let"&gt;recently&lt;/a&gt;,
JavaScript did not have a block local scope.
Since every &lt;code&gt;var&lt;/code&gt;iable declaration within a function is &lt;em&gt;hoisted&lt;/em&gt; to the top of that function,
it essentially makes function scope the only usable one (besides global, of&amp;nbsp;course).&lt;/p&gt;
&lt;p&gt;As a result, a variety of JavaScript idioms rely on introducing &amp;#8220;superfluous&amp;#8221; &lt;code&gt;function&lt;/code&gt;s,
solely for the purpose of creating a nested scope.
Many times, those functions are neither named nor stored in any variable;
rather, they are &lt;em&gt;immediately invoked&lt;/em&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is what is commonly understood as Immediately Invoked Function Expression,
or &lt;span class="caps"&gt;IIFE&lt;/span&gt; for&amp;nbsp;short.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;An oft-cited example involves an &lt;span class="caps"&gt;IIFE&lt;/span&gt; which itself returns another&amp;nbsp;function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;$para&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;p#&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// &amp;lt;p id=&amp;quot;0&amp;quot;&amp;gt;, &amp;lt;p id=&amp;quot;1&amp;quot;&amp;gt;, etc.&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;clickHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="c1"&gt;// IIFE!&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Clicked element no. &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;})(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;$para&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;click&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;clickHandler&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The function expression is necessary here,
because it allows to control what exactly goes into the &lt;em&gt;closure&lt;/em&gt; of the inner function.
If the &lt;code&gt;clickHandler&lt;/code&gt;s were assigned the &lt;code&gt;function() { alert(...) }&lt;/code&gt; expression directly,
they would all close over the same loop counter variable.
All would then display the exact same&amp;nbsp;message.&lt;/p&gt;
&lt;p&gt;We don&amp;#8217;t need to employ those workarounds in Rust.
Thanks to local scoping,
a simple pair of &lt;code&gt;{&lt;/code&gt; braces &lt;code&gt;}&lt;/code&gt; would work exactly the same.
You can imagine a direct rewrite of the above example, though,
where an anonymous closure is used to similar&amp;nbsp;effect:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// WARNING: Not idiomatic! (Also not a real DOM library).&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;para&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dom&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_string&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="n"&gt;unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;click_handler&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Event&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dom&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exec_js&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;alert(&amp;#39;Clicked element no. #{}&amp;#39;);&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;para&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_event_listener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Event&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Click&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;click_handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In other words, Rust supports IIFEs just&amp;nbsp;fine.&lt;/p&gt;
&lt;h4&gt;Just put a function on&amp;nbsp;it&lt;/h4&gt;
&lt;p&gt;Okay, this is quite amusing and probably pretty neat.
But does it help us with the error handling story&amp;nbsp;exactly?&amp;#8230;&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s take another stab at rewriting the &lt;code&gt;gist_owner_from_info&lt;/code&gt; routine.
This time, we&amp;#8217;ll extract the meaty part into a separate function.
We will also take advantage of one trivial,
but very useful &lt;a href="https://crates.io/crates/try_opt"&gt;&lt;em&gt;try_opt&lt;/em&gt; crate&lt;/a&gt;
which is essentially an equivalent of the &lt;code&gt;try!&lt;/code&gt; macro for &lt;code&gt;Option&lt;/code&gt;s:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#[macro_use]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;extern&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;crate&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;try_opt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;gist_owner_from_info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;Json&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;gist_owner_from_info_internal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;unwrap_or&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;anonymous&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;into&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;gist_owner_from_info_internal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;Json&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;try_opt&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_object&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;owner&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;try_opt&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;owner&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;and_then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_object&lt;/span&gt;&lt;span class="p"&gt;()));&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;try_opt&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;login&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;and_then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_string&lt;/span&gt;&lt;span class="p"&gt;()));&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_owned&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now this should be a little easier on the eyes.
(And if you want, you can eschew &lt;code&gt;and_then&lt;/code&gt; completely in favor of more &lt;code&gt;try_opt!&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;The downside is that we now have this &lt;code&gt;_internal&lt;/code&gt; function
that&amp;#8217;s awkwardly sticking out.
We could pull it in, and turn it into an &lt;em&gt;inner&lt;/em&gt; function, but why stop half-way?
Let&amp;#8217;s just make it an &lt;span class="caps"&gt;IIFE&lt;/span&gt;&amp;nbsp;already:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;gist_owner_from_info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;Json&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;try_opt&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_object&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;owner&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;try_opt&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;owner&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;and_then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_object&lt;/span&gt;&lt;span class="p"&gt;()));&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;try_opt&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;login&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;and_then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_string&lt;/span&gt;&lt;span class="p"&gt;()));&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nb"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_owned&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}().&lt;/span&gt;&lt;span class="n"&gt;unwrap_or&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;anonymous&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;into&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Not bad, eh? The analogies with exception handling should be pretty evident, too&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The closure itself works as a &lt;code&gt;try&lt;/code&gt; block, with closure&amp;#8217;s body containing the &amp;#8220;guarded&amp;#8221;&amp;nbsp;code.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;unwrap&lt;/code&gt; family of methods (especially &lt;code&gt;unwrap_or_else&lt;/code&gt;) dubs for a &lt;code&gt;catch&lt;/code&gt;/&lt;code&gt;except&lt;/code&gt; section.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sure, we do need &lt;code&gt;try!&lt;/code&gt; (or &lt;code&gt;try_opt!&lt;/code&gt;) macros to mark instructions
that may &amp;#8220;throw an exception&amp;#8221;, but with the &lt;code&gt;?&lt;/code&gt;-based syntax it shouldn&amp;#8217;t be too big of a deal.
And when the time comes, this code will be very easy to port to a
&lt;a href="https://github.com/rust-lang/rfcs/blob/master/text/0243-trait-based-exception-handling.md"&gt;trait-based exception handling&lt;/a&gt;
solution that&amp;#8217;s currently in the&amp;nbsp;works.&lt;/p&gt;
&lt;p&gt;Oh, and the best part? Both Rust and the underlying &lt;span class="caps"&gt;LLVM&lt;/span&gt; are very adept at
&lt;a href="https://ruudvanasseldonk.com/2016/11/30/zero-cost-abstractions"&gt;inlining closures&lt;/a&gt;,
so everything here should compile to optimal&amp;nbsp;code.&lt;/p&gt;
&lt;h4&gt;Bonus: a lifetime&amp;nbsp;conundrum&lt;/h4&gt;
&lt;p&gt;Well, &lt;em&gt;almost&lt;/em&gt; optimal.
There is one more thing left to do before we can call this a truly &lt;em&gt;zero-cost&lt;/em&gt;&amp;nbsp;abstraction.&lt;/p&gt;
&lt;p&gt;We need to stop allocating so damn&amp;nbsp;much!&lt;/p&gt;
&lt;p&gt;It should be pretty obvious that
the function doesn&amp;#8217;t need to create a brand new &lt;code&gt;String&lt;/code&gt; every time it&amp;#8217;s called.
The text is in the input &lt;code&gt;Json&lt;/code&gt;, and we take that &lt;code&gt;Json&lt;/code&gt; by reference already.
It&amp;#8217;s only fair we stop creating &lt;code&gt;String&lt;/code&gt;s and simply return a &lt;code&gt;&amp;amp;str&lt;/code&gt; reference&amp;nbsp;instead.&lt;/p&gt;
&lt;p&gt;In fact, this should be as easy as removing the &lt;code&gt;to_owned&lt;/code&gt;/&lt;code&gt;into&lt;/code&gt; calls,&amp;nbsp;right?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;gist_owner_from_info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;Json&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="kt"&gt;str&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;amp;&lt;/span&gt;&lt;span class="kt"&gt;str&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;try_opt&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_object&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;owner&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;try_opt&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;owner&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;and_then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_object&lt;/span&gt;&lt;span class="p"&gt;()));&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;login&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;and_then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_string&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}().&lt;/span&gt;&lt;span class="n"&gt;unwrap_or&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;anonymous&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Wrong, apparently. If you present this code to the compiler,
it will serve you quite a mouthful of an error,
including helpful tidbits in the vein of &amp;#8220;expected A, found&amp;nbsp;A&amp;#8221;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;error[E0495]: cannot infer an appropriate lifetime for autoref due to conflicting requirements
   --&amp;gt; src/github.rs:3:34
    |
  3 |         let info = try_opt!(info.as_object());
    |                                  ^^^^^^^^^
    |
note: first, the lifetime cannot outlive the anonymous lifetime #1 defined on the block at 1:45...
   --&amp;gt; src/github.rs:1:46
    |
  1 | fn gist_owner_from_info(info: &amp;amp;Json) -&amp;gt; &amp;amp;str {
    |                                              ^
note: ...so that reference does not outlive borrowed content
   --&amp;gt; src/github.rs:3:29
    |
  3 |         let info = try_opt!(info.as_object());
    |                             ^^^^
note: but, the lifetime must be valid for the anonymous lifetime #1 defined on the block at 2:23...
   --&amp;gt; src/github.rs:2:24
    |
  2 |     || -&amp;gt; Option&amp;lt;&amp;amp;str&amp;gt; {
    |                        ^
note: ...so that expression is assignable (expected std::option::Option&amp;lt;&amp;amp;str&amp;gt;, found std::option::Option&amp;lt;&amp;amp;str&amp;gt;)
   --&amp;gt; src/github.rs:5:9
    |
  5 |         owner.get(&amp;quot;login&amp;quot;).and_then(|l| l.as_string())
    |
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The crux of this verbiage is that the Rust compiler is unable to reconcile the lifetime
of the closure&amp;#8217;s return value, the input, and final result of the&amp;nbsp;function.&lt;/p&gt;
&lt;p&gt;It shouldn&amp;#8217;t really be trying very hard, though, for the lifetime is obvious.
It&amp;#8217;s the same as the one implicitly attached to the input &lt;code&gt;&amp;amp;Json&lt;/code&gt;.
Seems like in this case, we need to be a little more helpful and label it&amp;nbsp;explicitly:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;gist_owner_from_info&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nl"&gt;&amp;#39;i&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;&amp;#39;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Json&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;&amp;#39;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;str&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;&amp;#39;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;str&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// (rest as before)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Voila, this should now compile without any&amp;nbsp;issues.&lt;/p&gt;
&lt;p&gt;Once again, &amp;#8220;Keep calm and add more &lt;code&gt;'lifetimes&lt;/code&gt;&amp;#8221; proves to be an effective approach&amp;nbsp;;)&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Technically, they aren&amp;#8217;t called tuples there but
&amp;#8220;&lt;a href="https://golang.org/doc/effective_go.html#multiple-returns"&gt;multiple return values&lt;/a&gt;&amp;#8220;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;This is something I needed to do when rewriting
&lt;a href="https://github.com/Xion/gisht.py"&gt;this Python project of mine&lt;/a&gt; to Rust.&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;This is also the closest Rust can currently get to a &lt;code&gt;do&lt;/code&gt; notation from Haskell,
at least without any macro-based hacks.&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="Rust"></category><category term="IIFE"></category><category term="error handling"></category><category term="exceptions"></category><category term="closures"></category><category term="lambdas"></category></entry></feed>