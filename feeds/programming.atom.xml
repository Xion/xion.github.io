<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Karol Kuczmarski's Blog</title><link href="http://xion.io/" rel="alternate"></link><link href="http://xion.io/feeds/programming.atom.xml" rel="self"></link><id>http://xion.io/</id><updated>2015-12-28T21:26:00-08:00</updated><entry><title>You Don’t Have to Interview like Google</title><link href="http://xion.io/post/programming/dont-interview-like-google.html" rel="alternate"></link><updated>2015-12-28T21:26:00-08:00</updated><author><name>Karol Kuczmarski</name></author><id>tag:xion.io,2015-12-28:post/programming/dont-interview-like-google.html</id><summary type="html">&lt;p&gt;If you look at discussion forums for people in the &lt;span class="caps"&gt;CS&lt;/span&gt; industry &amp;#8212;
like &lt;a href="https://www.reddit.com/r/cscareerquestions/"&gt;/r/cscareequestions&lt;/a&gt; or even just Hacker News &amp;#8212;
you&amp;#8217;ll find lots of talk about the so called &lt;em&gt;Big Four&lt;/em&gt;&amp;nbsp;companies.&lt;/p&gt;
&lt;p&gt;This is mostly in the context of applying to them, or going through their interview process.
Which of the large software corporations are discussed here tends to fluctuate a little bit,
but both Google and Microsoft are invariably included, with Facebook popping up more often than&amp;nbsp;not.&lt;/p&gt;
&lt;p&gt;Because of their privileged positions as very desirable places to work, these companies tend to be taken as models
for others to mimic&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;. Probably the most apparent and direct outcome is the increasing prevalence of
&amp;#8220;Google-style&amp;#8221; interviews, which are now utilized by countless software shops around the&amp;nbsp;world.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Whiteboard coding&lt;/em&gt; is how they are often called. It is a subject of an intense debate, whether or not they &amp;#8220;work&amp;#8221;,
and adequately assess the engineering aptitude of candidates. If some
&lt;a href="https://twitter.com/mxcl/status/608682016205344768"&gt;high profile anecdotes&lt;/a&gt; are of any indication, the most common complaint
is that they fail to recognize competence by ignoring previous professional work, open source contributions,
conference talks, and so&amp;nbsp;on.&lt;/p&gt;
&lt;p&gt;Instead, the whiteboard interview requires demand showing a &amp;#8220;pure&amp;#8221; problem solving ability
within a relatively short time window, all without some broader context or even the usual tools of the trade:
laptop, editor, and a search&amp;nbsp;engine.&lt;/p&gt;
&lt;p&gt;As a Googler who had gone through this process and has now conducted a few of those interviews himself,
I find those complaints mostly valid albeit&amp;nbsp;misdirected.&lt;/p&gt;
&lt;p&gt;The problem isn&amp;#8217;t really that Google interviews like it&amp;nbsp;does.&lt;/p&gt;
&lt;p&gt;What&amp;#8217;s really the issue is &lt;em&gt;other companies&lt;/em&gt; implementing the same process, and not realizing it cannot possibly work for&amp;nbsp;them.&lt;/p&gt;
&lt;h4&gt;Somewhat&amp;nbsp;special&lt;/h4&gt;
&lt;p&gt;It is important to understand that Google&amp;#8217;s stance on interviewing is influenced by some unique&amp;nbsp;circumstances:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;very high and steady influx of potential&amp;nbsp;candidates&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;comparatively long tenure of the average engineer and the general focus on employee&amp;nbsp;retention&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;huge and mostly proprietary software stack working at a scale that almost no others&amp;nbsp;do&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;From this perspective, it makes sense to utilize cautious hiring strategies that may result in a high ratio
of &lt;em&gt;false negatives&lt;/em&gt;&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;. When rejections are cheap but the new hires are supposed to be here for the long run &amp;#8212;
partially because of the long ramp-up time necessary to become productive &amp;#8212; it can be costly to give candidates
the benefit of the&amp;nbsp;doubt.&lt;/p&gt;
&lt;p&gt;The last point also explains why proficiency with specific technologies is less useful than
general flexibility grounded in strong fundamentals. To put it shortly, Google prefers you know
&lt;a href="https://en.wikipedia.org/wiki/Computer_science"&gt;&lt;span class="caps"&gt;CS&lt;/span&gt;&lt;/a&gt; rather than &lt;a href="https://en.wikipedia.org/wiki/Cascading_Style_Sheets"&gt;&lt;span class="caps"&gt;CSS&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Finally, whiteboard coding is just one input to the evaluation process, but it tends to be the most trustworthy one.
Besides programming aptitude, the ideal candidate would show a proven track record of technical leadership while
tackling complex problems that span a broad scope.&lt;br&gt;
Unfortunately, those qualities are difficult to convey &lt;em&gt;efficiently&lt;/em&gt; and &lt;em&gt;reliably&lt;/em&gt; through the usual industry channels:
a resume, references from previous jobs, GitHub profile,&amp;nbsp;etc.&lt;/p&gt;
&lt;h4&gt;Different&amp;nbsp;conditions&lt;/h4&gt;
&lt;p&gt;Given the above reasoning as to why &amp;#8220;Google-style&amp;#8221; interviews seem to work well for Google, I hope it&amp;#8217;s evident why
they are likely a poor choice for companies that don&amp;#8217;t share the same characteristics as the Big&amp;nbsp;4.&lt;/p&gt;
&lt;p&gt;For one, it is highly unusual for a software shop in today&amp;#8217;s market to command a sizeable pool for qualified candidates.
Software engineering vacancies often go unfilled for weeks and months, even if the company isn&amp;#8217;t exactly looking
for &amp;#8220;rockstars&amp;#8221;, &amp;#8220;ninjas&amp;#8221;, &amp;#8220;gunslingers&amp;#8221;, or whatever the silly term &lt;em&gt;du jour&lt;/em&gt; is. Those who meet the requirements
usually have their pick at many different offers,&amp;nbsp;too.&lt;/p&gt;
&lt;p&gt;The reality for many companies (especially startups) is also one where they are unable or unwilling to invest much
in the retention of their employees. Because the employment relationship in this industry tends to be quite volatile
(which isn&amp;#8217;t necessarily a bad thing), it often makes sense for companies to look for a near-immediate payoff
when&amp;nbsp;hiring.&lt;/p&gt;
&lt;p&gt;We owe it to the prevalent open source technologies that this isn&amp;#8217;t entirely unreasonable. If your software stack
is composed entirely of components that are available in the open, you can probably find engineers who are familiar
with most of them. They can be productive members of your team almost literally from day&amp;nbsp;one!&lt;/p&gt;
&lt;h4&gt;Right tool for the&amp;nbsp;job&lt;/h4&gt;
&lt;p&gt;The most important observation is that every company is &lt;em&gt;different&lt;/em&gt;, and following the One True Best Practice™ will likely
prevent you from utilizing the best qualities of your work place. Smaller shops, for example, could take a more personalized
approach to hiring: let candidates actually sit with engineers, solve real-life problems, and have deep technical&amp;nbsp;conversations.&lt;/p&gt;
&lt;p&gt;Of course, you may still find whiteboard coding valuable in its own right. Indeed, a simple test for at least
the basic programming skill appears to be a &lt;a href="http://blog.codinghorror.com/why-cant-programmers-program/"&gt;necessary sanity check&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But a full suite of difficult technical interviews with tough algorithmic problems that last a better part of the day?
Most likely&amp;nbsp;not.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Some seem to have succeeded to such an extent that you may occasionally hear about &amp;#8220;Big N&amp;#8221;.
This often includes some currently large and/or successful but still &amp;#8220;hip&amp;#8221; startups.
&lt;span class="caps"&gt;IT&lt;/span&gt; is such a fashion industry sometimes&amp;#8230;&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;Though on the flip side, it exacerbates the &lt;a href="https://en.wikipedia.org/wiki/Impostor_syndrome"&gt;impostor syndrome&lt;/a&gt;
among people who &lt;em&gt;do&lt;/em&gt; get hired, as their success could easily be construed as mostly luck.&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="Google"></category><category term="interviews"></category><category term="startups"></category><category term="career"></category><category term="hiring"></category></entry><entry><title>Don’t Copy &amp; Paste. Retype.</title><link href="http://xion.io/post/programming/dont-copy-paste-retype.html" rel="alternate"></link><updated>2015-10-03T14:40:00-07:00</updated><author><name>Karol Kuczmarski</name></author><id>tag:xion.io,2015-10-03:post/programming/dont-copy-paste-retype.html</id><summary type="html">&lt;p&gt;In this day and age, Google and &lt;a href="http://stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; are quite essential tools for any developer.
Lately, though, the latter seems to be getting some bad rap. On one side, it&amp;#8217;s because of seemingly peculiar
and sometimes alienating &lt;a href="https://medium.com/@johnslegers/the-decline-of-stack-overflow-7cb69faa575d"&gt;moderation policies&lt;/a&gt;.
But more pertinently, it&amp;#8217;s the apparent rise of a phenomenon that&amp;#8217;s wittily dubbed
&amp;#8220;the &lt;a href="https://www.christianheilmann.com/2015/07/17/the-full-stackoverflow-developer/"&gt;full Stack Overflow developer&lt;/a&gt;&amp;#8220;.&lt;/p&gt;
&lt;p&gt;In a nutshell, individuals deserving to be called that are code slingers who throw software artifacts together mostly by
copying and pasting code samples found in Stack Overflow answers. They may be getting something working pretty quickly,
but they also lack understanding of problems they&amp;#8217;re facing and solutions they&amp;#8217;re using so&amp;nbsp;cheerily.&lt;/p&gt;
&lt;p&gt;Of course, not every instance of code Copy Pasta is to be scorned. I&amp;#8217;m pretty sure most people reading this post
(and certainly the person writing it!) are guilty of replicating at least a few snippets from Stack Overflow, verbatim,
in their own codebase. Heck, we may have even done so with nigh zero interest as to why it has been written this way.
Not every technology is intrinsically fascinating, after all, and deadlines are sometimes too close for&amp;nbsp;comfort.&lt;/p&gt;
&lt;p&gt;But if so, does it mean we are gradually turning into full Stack Overflow developers?&amp;#8230;
Yikes! Surely we don&amp;#8217;t want that to&amp;nbsp;happen!&lt;/p&gt;
&lt;h4&gt;Mitigation&amp;nbsp;tactic&lt;/h4&gt;
&lt;p&gt;Before you shut off your Internet connection altogether while coding, consider employing the following technique
whenever you feel like scraping a piece of code from Stack Overflow, and dumping it in your project&amp;nbsp;source.&lt;/p&gt;
&lt;p&gt;Don&amp;#8217;t use the clipboard. Don&amp;#8217;t copy and paste. &lt;strong&gt;Retype&lt;/strong&gt; the code you&amp;#8217;ve found&amp;nbsp;instead.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s going to take more time, yes. It&amp;#8217;s definitely more cumbersome than just hitting &lt;em&gt;Ctrl+C&lt;/em&gt;/&lt;em&gt;Ctrl+V&lt;/em&gt;.
It may also make little sense: if the end result is the same, why does it matter whether the code was transfered
through the clipboard or&amp;nbsp;not?&lt;/p&gt;
&lt;h4&gt;Rationale&lt;/h4&gt;
&lt;p&gt;I&amp;#8217;d argue, however, that it makes perfect sense. From the least to the most important, the reasons why I think so
are the&amp;nbsp;following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The fact that retyping is slower than copy-pasting is what actually makes it &lt;em&gt;better&lt;/em&gt;. If you vow not to use
the clipboard, you&amp;#8217;re much less likely to just pick whatever&amp;#8217;s the first Stack Overflow result Google has given.
You&amp;#8217;ll weigh different solutions, and you&amp;#8217;ll be rightfully biased towards shorter and simpler&amp;nbsp;ones.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When you type something, you cannot do it completely thoughtlessly. Whether you want it or not, you&amp;#8217;ll absorb
some of the knowledge through sheer osmosis, because the code will flow through your eyes and fingers as it&amp;#8217;s transfered
from the browser to your editor or &lt;span class="caps"&gt;IDE&lt;/span&gt;. Your subconscious brain will latch onto the bits and pieces of information,
and it will sort them out for you to use later. Even if you didn&amp;#8217;t intend to, you will most likely &lt;em&gt;learn something&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;But most importantly, what you type almost certainly won&amp;#8217;t be a perfect copy of the original snippet.
As you progress through the code, you&amp;#8217;ll inevitably deviate from it, if only to conform to a particular style guide
your project is following.&lt;br&gt;
It&amp;#8217;s quite likely, though, that you&amp;#8217;ll make larger changes as well.
You will replace familiar patterns with calls to utility functions.
You&amp;#8217;ll rearrange the code visually for better readability.
You will add comments, or extract functions to make it more self-documenting.
You might even enhance and customize it, so that you can abstract and reuse it multiple&amp;nbsp;times.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Afterwards, what you&amp;#8217;ve just typed won&amp;#8217;t be just some code you have found on the Internet. It&amp;#8217;ll be &lt;em&gt;your code&lt;/em&gt;.&lt;/p&gt;</summary><category term="problem solving"></category><category term="Stack Overflow"></category><category term="typing"></category></entry></feed>