<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Karol Kuczmarski's Blog</title><link href="http://xion.io/" rel="alternate"></link><link href="http://xion.io/feeds/programming.atom.xml" rel="self"></link><id>http://xion.io/</id><updated>2016-05-20T06:56:00-07:00</updated><entry><title>Please don’t use Click</title><link href="http://xion.io/post/programming/python-dont-use-click.html" rel="alternate"></link><updated>2016-05-20T06:56:00-07:00</updated><author><name>Karol Kuczmarski</name></author><id>tag:xion.io,2016-05-20:post/programming/python-dont-use-click.html</id><summary type="html">&lt;p&gt;&lt;em&gt;&amp;#8230;not for standalone programs&amp;nbsp;anyway.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Chances are, you have written some command line programs in Python. This is quite probable even if you normally code
in some other language. And if you have, it is not unlikely that you needed to parse the &lt;code&gt;argv&lt;/code&gt; of your program at one
point or&amp;nbsp;another.&lt;/p&gt;
&lt;p&gt;There are plenty of options here, both in the standard library as well as among third party packages. One does stand out,
however, and it&amp;#8217;s mostly for how it is often overused. I&amp;#8217;m talking about &lt;a href="http://click.pocoo.org/"&gt;Click&lt;/a&gt;&amp;nbsp;here.&lt;/p&gt;
&lt;p&gt;If you wanted to use it in your next Python program, I hereby urge you to&amp;nbsp;reconsider.&lt;/p&gt;
&lt;h4&gt;What&amp;#8217;s the&amp;nbsp;fuss?&lt;/h4&gt;
&lt;p&gt;&lt;img style="float:right; margin-left: 8px; margin: bottom: 7px" src="http://xion.io/images/click-logo.png" alt="click_"&gt;
The somewhat bizarrely named Click library is described as a &amp;#8220;package for creating beautiful
command line interfaces&amp;#8221;. Its main trick is the ability to create subcommands by adorning Python functions with the
&lt;code&gt;@click.command()&lt;/code&gt; decorator&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;. It then makes them coalesce into an argument parser, equipped with the necessary
dispatching&amp;nbsp;logic.&lt;/p&gt;
&lt;p&gt;This idea isn&amp;#8217;t new, of course. Prior art goes back at least seven years to the now-abandoned
&lt;a href="https://opster.readthedocs.io"&gt;opster&lt;/a&gt; package. Click, however, was the first one of its kind to garner noticeable
popularity, which is easily attributed to &lt;a href="http://lucumr.pocoo.org/"&gt;whom it&amp;#8217;s been authored by&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So while my arguments against using this kind of &lt;span class="caps"&gt;CLI&lt;/span&gt; framework would apply to any package implementing the paradigm,
it just happens that Click is currently its most prominent example. Purely for the sake of convenience, I will therefore
refer to it as if it was interchangeable with the whole concept. Because why not? Whatever you may say about
the library&amp;#8217;s name, it&amp;#8217;s hard to imagine a more concise moniker than a simple &lt;em&gt;Click&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;What&amp;#8217;s wrong, then, with the way Click handles command line&amp;nbsp;interfaces?&lt;/p&gt;
&lt;h4&gt;&lt;span class="caps"&gt;CLI&lt;/span&gt;: Little&amp;nbsp;Interfaces&lt;/h4&gt;
&lt;p&gt;It&amp;#8217;s how it encourages to treat them as an &lt;em&gt;accidental afterthought&lt;/em&gt; rather than a deliberate design&amp;nbsp;decision.&lt;/p&gt;
&lt;p&gt;For applications invoked repeatedly from a terminal, their command line arguments and flags are the primary means of
user interaction&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;. It is how users communicate their intent to perform an action; provide the neccessary input data
to carry it throgh; decide how they want to receive the output; and control many other aspects of the programs execution.
Absent graphical components and widgets, the command line is virtually the only way to interact with a terminal&amp;nbsp;program.&lt;/p&gt;
&lt;p&gt;In other words, it is &lt;strong&gt;the &lt;span class="caps"&gt;UI&lt;/span&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;And how important the &lt;span class="caps"&gt;UI&lt;/span&gt; is for &lt;em&gt;any&lt;/em&gt; application? It seems to be important enough that entire fields of study are devoted
to reducing friction of human-computer interaction. In many projects, the emphasis on user interface design is on par
with that of actual software engineering.&lt;br&gt;
Like everything, of course, it is susceptible to trends and fads (such as the recent &amp;#8220;mobile/responsive everything!&amp;#8221;
craze). But its significance remains undiminished. Quite the opposite: in the age of ubiquitous computing,
user interfaces are probably more important than&amp;nbsp;ever.&lt;/p&gt;
&lt;p&gt;Yes, this includes &lt;span class="caps"&gt;CLI&lt;/span&gt;. One of the main reasons we turn to the command line are &lt;em&gt;speed&lt;/em&gt; and &lt;em&gt;efficacy&lt;/em&gt;. Common tasks must
utilize short and convenient syntax that is quick to integrate into user&amp;#8217;s muscle memory. Others should not only be
possible, but &lt;em&gt;discoverable&lt;/em&gt; and &lt;em&gt;accessible&lt;/em&gt; without going through reams of &lt;code&gt;man&lt;/code&gt; pages.&lt;/p&gt;
&lt;p&gt;Any terminal program intended for frequent use by humans should therefore strive to excel in those two qualities.
But except for &lt;a href="http://linux.die.net/man/1/echo"&gt;the simplest of cases&lt;/a&gt;, it won&amp;#8217;t happen by itself.
Designing an efficient &lt;span class="caps"&gt;CLI&lt;/span&gt; for any non-trivial application is a challenging and demanding&amp;nbsp;task.&lt;/p&gt;
&lt;h4&gt;It doesn&amp;#8217;t&amp;nbsp;click&lt;/h4&gt;
&lt;p&gt;With Click, however, we&amp;#8217;re encouraged to just wing&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;Click tells us to slap some decorators on our top-level functions and call it a day. Sure, you can dig deep enough
and uncover the underlying layers of abstraction that may eventually allow you do things for which &lt;code&gt;argparse&lt;/code&gt; has
a &lt;a href="https://docs.python.org/3/library/argparse.html#mutual-exclusion"&gt;first-class support&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;By default, however, Click shoehorns your programs into
&lt;a href="http://click.pocoo.org/5/quickstart/#basic-concepts"&gt;predefined patterns&lt;/a&gt; that, incidentally, mirror those of some
&lt;a href="http://click.pocoo.org/5/complex/#building-a-git-clone"&gt;least intuitive&lt;/a&gt; command-line tools in&amp;nbsp;existence.&lt;/p&gt;
&lt;p&gt;Indeed, the whole idea of subdiving your program into several distinct is already suspect, for it appears at odds
with the fundamental Unix philosophy of
&lt;a href="https://en.wikipedia.org/wiki/Unix_philosophy#Do_One_Thing_and_Do_It_Well"&gt;doing one thing well&lt;/a&gt;. While it is
occasionally justified, it shouldn&amp;#8217;t be the first thing that comes to your mind. But that&amp;#8217;s completely at odds with the
Click&amp;#8217;s approach, where &lt;em&gt;not&lt;/em&gt; ending up with multiple distinct commands is something you have to consciously&amp;nbsp;avoid.&lt;/p&gt;
&lt;h4&gt;&amp;#8230;though it sometimes&amp;nbsp;might&lt;/h4&gt;
&lt;p&gt;So, what &lt;em&gt;am&lt;/em&gt; I suggesting you use instead libraries such as Click?&amp;#8230; Nothing outrageous,&amp;nbsp;really.&lt;/p&gt;
&lt;p&gt;If you care about your command line interface, consider just using
&lt;a href="https://docs.python.org/3/library/argparse.html"&gt;the &lt;code&gt;argparse&lt;/code&gt; module&lt;/a&gt;. Yes, it will force you to create parser objects,
add arguments &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; flags to it, and in general pay some attention to the whole business. When it comes to &lt;span class="caps"&gt;UI&lt;/span&gt;, it&amp;#8217;s always
good to make it an explicit concern, maybe even sufficient to warrant
&lt;a href="https://github.com/Xion/gisht/blob/e86af37388573f00a4d6f282feca76ead88725d8/gisht/args/parser.py"&gt;its own module&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Alternatively, the &lt;a href="https://github.com/docopt/docopt"&gt;&lt;code&gt;docopt&lt;/code&gt; library&lt;/a&gt; provides another take on the &lt;span class="caps"&gt;UI&lt;/span&gt;-first approach
to &lt;span class="caps"&gt;CLI&lt;/span&gt;, though it is more limited in its capabilities&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Finally, I&amp;#8217;m not advocating to ditch Click in &lt;em&gt;all&lt;/em&gt; scenarios. There&amp;#8217;s plenty of situations when we&amp;#8217;re interested in
getting &lt;em&gt;any&lt;/em&gt; &lt;span class="caps"&gt;CLI&lt;/span&gt; up and running, and not so much in making the most efficient and intuitive interface possible. The prime
example is any kind of automation scripts that are ancillary to some bigger project, like &lt;em&gt;manage.py&lt;/em&gt; is in Django&lt;sup id="fnref:4"&gt;&lt;a class="footnote-ref" href="#fn:4" rel="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt;.
The Python ecosystem doesn&amp;#8217;t really have dedicated task runners that are as featureful as &lt;a href="http://gruntjs.com"&gt;Grunt&lt;/a&gt;
or &lt;a href="http://gulpjs.com/"&gt;Gulp&lt;/a&gt;, and that makes Click a viable and compelling option&lt;sup id="fnref:5"&gt;&lt;a class="footnote-ref" href="#fn:5" rel="footnote"&gt;5&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;But for standalone programs whose &lt;span class="caps"&gt;CLI&lt;/span&gt; is the main interface? Yeah, not&amp;nbsp;really.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Oddly enough, that pair of parentheses seems to be mandatory.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;Environment variables and config files deserve a honorary mention, of course. But those are usually derivatives of
the command line arguments, containing e.g. the default values for flags.&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;Click&amp;#8217;s &lt;a href="http://click.pocoo.org/5/why/#why-not-docopt-etc"&gt;own documentation&lt;/a&gt; actually describes quite nicely
how theirs and docopt&amp;#8217;s philosophies differ in a way that&amp;#8217;s consistent with this article.&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:4"&gt;
&lt;p&gt;Incidentally, this appears to be a major motivation behind creating Click in the first place:
to support web applications built upon on the &lt;a href="http://flask.pocoo.org/"&gt;Flask&lt;/a&gt; framework, and possibly obviate the need
for extensions such as &lt;a href="http://flask-script.readthedocs.io/en/latest/"&gt;Flask-Script&lt;/a&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:4" rev="footnote" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:5"&gt;
&lt;p&gt;This saying, there are some task runners which offer similar experience, like &lt;a href="http://pyinvoke.org"&gt;Invoke&lt;/a&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:5" rev="footnote" title="Jump back to footnote 5 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="Python"></category><category term="CLI"></category><category term="UI"></category><category term="Click"></category></entry><entry><title>Package managers’ appreciation day</title><link href="http://xion.io/post/programming/package-management.html" rel="alternate"></link><updated>2016-03-26T09:17:00-07:00</updated><author><name>Karol Kuczmarski</name></author><id>tag:xion.io,2016-03-26:post/programming/package-management.html</id><summary type="html">&lt;p&gt;By now you have probably heard about the infamous &amp;#8220;npm-gate&amp;#8221; that swept through the developer community
over the last week. It has been
&lt;a href="https://medium.com/@azerbike/i-ve-just-liberated-my-modules-9045c06be67c#.hp7p1aolc"&gt;brought up&lt;/a&gt;,
&lt;a href="https://medium.com/@mproberts/a-discussion-about-the-breaking-of-the-internet-3d4d2a83aa4d#.rlnh89inz"&gt;discussed&lt;/a&gt;,
&lt;a href="http://www.theregister.co.uk/2016/03/23/npm_left_pad_chaos/"&gt;covered&lt;/a&gt;,
&lt;a href="http://www.haneycodes.net/npm-left-pad-have-we-forgotten-how-to-program"&gt;meta-discussed&lt;/a&gt;,
&lt;a href="http://left-pad.io/"&gt;satirized&lt;/a&gt;, and even featured by
&lt;a href="http://www.businessinsider.com/npm-left-pad-controversy-explained-2016-3"&gt;some mainstream media&lt;/a&gt;.
Evidently the nerds have managed to stir up some serious trouble again, and it only took them 11 lines of
that strange thing they call&amp;nbsp;&amp;#8220;code&amp;#8221;.&lt;/p&gt;
&lt;h4&gt;No good things in small&amp;nbsp;packages&lt;/h4&gt;
&lt;p&gt;When looking for a culprit, the one party that everyone pounced on immediately was of course
the &lt;a href="http://npmjs.com"&gt;npm&lt;/a&gt; itself. With its myriad of packages that could each fit in a tweet, it invites to create
the exact house of cards we&amp;#8217;ve seen&amp;nbsp;collapse.&lt;/p&gt;
&lt;p&gt;This serves as a good wake-up call, of course. But it also compels to throw the baby out with the bathwater,
and draw a conclusion that may be a little too far-fetched. Like perhaps declaring the &lt;em&gt;entire idea&lt;/em&gt; of
managing dependencies &amp;#8220;the npm way&amp;#8221; suspect. If packages tend to degenerate into something as ludicrous as
&lt;a href="https://www.npmjs.com/package/isarray"&gt;&lt;code&gt;isArray&lt;/code&gt;&lt;/a&gt; &amp;#8212; to say nothing of
&lt;a href="https://www.npmjs.com/package/left-pad"&gt;&lt;code&gt;left-pad&lt;/code&gt;&lt;/a&gt;, which started the whole debacle &amp;#8212; then maybe this approach
to software reusability has simply bankrupted&amp;nbsp;itself?&lt;/p&gt;
&lt;h4&gt;A world without&amp;nbsp;*pm&lt;/h4&gt;
&lt;p&gt;I&amp;#8217;m right away responding to that with a resounding &amp;#8220;No!&amp;#8221;. Package management as a concept is not responsible for
the poor decision making of one specific developer collective. And anyone who might think tools like npm do more
harm than good I ask: have you recently written any&amp;nbsp;C++?&lt;/p&gt;
&lt;p&gt;See, C++ is the odd one among languages that at least pretend to be keeping up with the times. It doesn&amp;#8217;t present
a package management story at all. That&amp;#8217;s right &amp;#8212; the C++ &amp;#8220;ecosystem&amp;#8221;, as it stands now,&amp;nbsp;has:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;no package&amp;nbsp;manager&lt;/li&gt;
&lt;li&gt;no repository of&amp;nbsp;packages&lt;/li&gt;
&lt;li&gt;no unified way of managing&amp;nbsp;dependencies&lt;/li&gt;
&lt;li&gt;no way to isolate development environments of different projects from one&amp;nbsp;another&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Adding any kind of third-party dependency to a C++ project &amp;#8212; especially a portable one, which is allegedly one of C++&amp;#8217;s
strengths &amp;#8212; is a considerable pain, even when it doesn&amp;#8217;t require any additional libraries by itself. And environment
isolation? Some people are using Linux containers (!) for this, which is like dealing with a mosquito by shooting it
with a&amp;nbsp;howitzer.&lt;/p&gt;
&lt;p style="text-align: center"&gt;
    &lt;img src="http://xion.io/images/carl-sagan.jpg" alt="Billions upon billions of lines"&gt;&lt;/br&gt;
    &lt;small&gt;To build a C++ binary, you must first build the userspace.&lt;/small&gt;
&lt;/p&gt;

&lt;p&gt;But hey, at least they can use &lt;code&gt;apt-get&lt;/code&gt;,&amp;nbsp;right?&amp;#8230;&lt;/p&gt;
&lt;p&gt;So, string padding incidents aside, package managers are absolutely &lt;em&gt;essential&lt;/em&gt;. Sure, we can and should discuss
the merits of their particular flavors and implementation details &amp;#8212;like whether it&amp;#8217;s prudent to allow &amp;#8220;delisting&amp;#8221;
of packages. As a whole, however, package managers deserve recognition as a crucial part of modern language tooling
that we cannot really do&amp;nbsp;without.&lt;/p&gt;</summary><category term="packages"></category><category term="package manager"></category><category term="node.js"></category><category term="npm"></category><category term="C++"></category></entry><entry><title>You Don’t Have to Interview like Google</title><link href="http://xion.io/post/programming/dont-interview-like-google.html" rel="alternate"></link><updated>2015-12-28T21:26:00-08:00</updated><author><name>Karol Kuczmarski</name></author><id>tag:xion.io,2015-12-28:post/programming/dont-interview-like-google.html</id><summary type="html">&lt;p&gt;If you look at discussion forums for people in the &lt;span class="caps"&gt;CS&lt;/span&gt; industry &amp;#8212;
like &lt;a href="https://www.reddit.com/r/cscareerquestions/"&gt;/r/cscareequestions&lt;/a&gt; or even just Hacker News &amp;#8212;
you&amp;#8217;ll find lots of talk about the so called &lt;em&gt;Big Four&lt;/em&gt;&amp;nbsp;companies.&lt;/p&gt;
&lt;p&gt;This is mostly in the context of applying to them, or going through their interview process.
Which of the large software corporations are discussed here tends to fluctuate a little bit,
but both Google and Microsoft are invariably included, with Facebook popping up more often than&amp;nbsp;not.&lt;/p&gt;
&lt;p&gt;Because of their privileged positions as very desirable places to work, these companies tend to be taken as models
for others to mimic&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;. Probably the most apparent and direct outcome is the increasing prevalence of
&amp;#8220;Google-style&amp;#8221; interviews, which are now utilized by countless software shops around the&amp;nbsp;world.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Whiteboard coding&lt;/em&gt; is how they are often called. It is a subject of an intense debate, whether or not they &amp;#8220;work&amp;#8221;,
and adequately assess the engineering aptitude of candidates. If some
&lt;a href="https://twitter.com/mxcl/status/608682016205344768"&gt;high profile anecdotes&lt;/a&gt; are of any indication, the most common complaint
is that they fail to recognize competence by ignoring previous professional work, open source contributions,
conference talks, and so&amp;nbsp;on.&lt;/p&gt;
&lt;p&gt;Instead, the whiteboard interview requires demand showing a &amp;#8220;pure&amp;#8221; problem solving ability
within a relatively short time window, all without some broader context or even the usual tools of the trade:
laptop, editor, and a search&amp;nbsp;engine.&lt;/p&gt;
&lt;p&gt;As a Googler who had gone through this process and has now conducted a few of those interviews himself,
I find those complaints mostly valid albeit&amp;nbsp;misdirected.&lt;/p&gt;
&lt;p&gt;The problem isn&amp;#8217;t really that Google interviews like it&amp;nbsp;does.&lt;/p&gt;
&lt;p&gt;What&amp;#8217;s really the issue is &lt;em&gt;other companies&lt;/em&gt; implementing the same process, and not realizing it cannot possibly work for&amp;nbsp;them.&lt;/p&gt;
&lt;h4&gt;Somewhat&amp;nbsp;special&lt;/h4&gt;
&lt;p&gt;It is important to understand that Google&amp;#8217;s stance on interviewing is influenced by some unique&amp;nbsp;circumstances:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;very high and steady influx of potential&amp;nbsp;candidates&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;comparatively long tenure of the average engineer and the general focus on employee&amp;nbsp;retention&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;huge and mostly proprietary software stack working at a scale that almost no others&amp;nbsp;do&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;From this perspective, it makes sense to utilize cautious hiring strategies that may result in a high ratio
of &lt;em&gt;false negatives&lt;/em&gt;&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;. When rejections are cheap but the new hires are supposed to be here for the long run &amp;#8212;
partially because of the long ramp-up time necessary to become productive &amp;#8212; it can be costly to give candidates
the benefit of the&amp;nbsp;doubt.&lt;/p&gt;
&lt;p&gt;The last point also explains why proficiency with specific technologies is less useful than
general flexibility grounded in strong fundamentals. To put it shortly, Google prefers you know
&lt;a href="https://en.wikipedia.org/wiki/Computer_science"&gt;&lt;span class="caps"&gt;CS&lt;/span&gt;&lt;/a&gt; rather than &lt;a href="https://en.wikipedia.org/wiki/Cascading_Style_Sheets"&gt;&lt;span class="caps"&gt;CSS&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Finally, whiteboard coding is just one input to the evaluation process, but it tends to be the most trustworthy one.
Besides programming aptitude, the ideal candidate would show a proven track record of technical leadership while
tackling complex problems that span a broad scope.&lt;br&gt;
Unfortunately, those qualities are difficult to convey &lt;em&gt;efficiently&lt;/em&gt; and &lt;em&gt;reliably&lt;/em&gt; through the usual industry channels:
a resume, references from previous jobs, GitHub profile,&amp;nbsp;etc.&lt;/p&gt;
&lt;h4&gt;Different&amp;nbsp;conditions&lt;/h4&gt;
&lt;p&gt;Given the above reasoning as to why &amp;#8220;Google-style&amp;#8221; interviews seem to work well for Google, I hope it&amp;#8217;s evident why
they are likely a poor choice for companies that don&amp;#8217;t share the same characteristics as the Big&amp;nbsp;4.&lt;/p&gt;
&lt;p&gt;For one, it is highly unusual for a software shop in today&amp;#8217;s market to command a sizeable pool for qualified candidates.
Software engineering vacancies often go unfilled for weeks and months, even if the company isn&amp;#8217;t exactly looking
for &amp;#8220;rockstars&amp;#8221;, &amp;#8220;ninjas&amp;#8221;, &amp;#8220;gunslingers&amp;#8221;, or whatever the silly term &lt;em&gt;du jour&lt;/em&gt; is. Those who meet the requirements
usually have their pick at many different offers,&amp;nbsp;too.&lt;/p&gt;
&lt;p&gt;The reality for many companies (especially startups) is also one where they are unable or unwilling to invest much
in the retention of their employees. Because the employment relationship in this industry tends to be quite volatile
(which isn&amp;#8217;t necessarily a bad thing), it often makes sense for companies to look for a near-immediate payoff
when&amp;nbsp;hiring.&lt;/p&gt;
&lt;p&gt;We owe it to the prevalent open source technologies that this isn&amp;#8217;t entirely unreasonable. If your software stack
is composed entirely of components that are available in the open, you can probably find engineers who are familiar
with most of them. They can be productive members of your team almost literally from day&amp;nbsp;one!&lt;/p&gt;
&lt;h4&gt;Right tool for the&amp;nbsp;job&lt;/h4&gt;
&lt;p&gt;The most important observation is that every company is &lt;em&gt;different&lt;/em&gt;, and following the One True Best Practice™ will likely
prevent you from utilizing the best qualities of your work place. Smaller shops, for example, could take a more personalized
approach to hiring: let candidates actually sit with engineers, solve real-life problems, and have deep technical&amp;nbsp;conversations.&lt;/p&gt;
&lt;p&gt;Of course, you may still find whiteboard coding valuable in its own right. Indeed, a simple test for at least
the basic programming skill appears to be a &lt;a href="http://blog.codinghorror.com/why-cant-programmers-program/"&gt;necessary sanity check&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But a full suite of difficult technical interviews with tough algorithmic problems that last a better part of the day?
Most likely&amp;nbsp;not.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Some seem to have succeeded to such an extent that you may occasionally hear about &amp;#8220;Big N&amp;#8221;.
This often includes some currently large and/or successful but still &amp;#8220;hip&amp;#8221; startups.
&lt;span class="caps"&gt;IT&lt;/span&gt; is such a fashion industry sometimes&amp;#8230;&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;Though on the flip side, it exacerbates the &lt;a href="https://en.wikipedia.org/wiki/Impostor_syndrome"&gt;impostor syndrome&lt;/a&gt;
among people who &lt;em&gt;do&lt;/em&gt; get hired, as their success could easily be construed as mostly luck.&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="Google"></category><category term="interviews"></category><category term="startups"></category><category term="career"></category><category term="hiring"></category></entry><entry><title>Don’t Copy &amp; Paste. Retype.</title><link href="http://xion.io/post/programming/dont-copy-paste-retype.html" rel="alternate"></link><updated>2015-10-03T14:40:00-07:00</updated><author><name>Karol Kuczmarski</name></author><id>tag:xion.io,2015-10-03:post/programming/dont-copy-paste-retype.html</id><summary type="html">&lt;p&gt;In this day and age, Google and &lt;a href="http://stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; are quite essential tools for any developer.
Lately, though, the latter seems to be getting some bad rap. On one side, it&amp;#8217;s because of seemingly peculiar
and sometimes alienating &lt;a href="https://medium.com/@johnslegers/the-decline-of-stack-overflow-7cb69faa575d"&gt;moderation policies&lt;/a&gt;.
But more pertinently, it&amp;#8217;s the apparent rise of a phenomenon that&amp;#8217;s wittily dubbed
&amp;#8220;the &lt;a href="https://www.christianheilmann.com/2015/07/17/the-full-stackoverflow-developer/"&gt;full Stack Overflow developer&lt;/a&gt;&amp;#8220;.&lt;/p&gt;
&lt;p&gt;In a nutshell, individuals deserving to be called that are code slingers who throw software artifacts together mostly by
copying and pasting code samples found in Stack Overflow answers. They may be getting something working pretty quickly,
but they also lack understanding of problems they&amp;#8217;re facing and solutions they&amp;#8217;re using so&amp;nbsp;cheerily.&lt;/p&gt;
&lt;p&gt;Of course, not every instance of code Copy Pasta is to be scorned. I&amp;#8217;m pretty sure most people reading this post
(and certainly the person writing it!) are guilty of replicating at least a few snippets from Stack Overflow, verbatim,
in their own codebase. Heck, we may have even done so with nigh zero interest as to why it has been written this way.
Not every technology is intrinsically fascinating, after all, and deadlines are sometimes too close for&amp;nbsp;comfort.&lt;/p&gt;
&lt;p&gt;But if so, does it mean we are gradually turning into full Stack Overflow developers?&amp;#8230;
Yikes! Surely we don&amp;#8217;t want that to&amp;nbsp;happen!&lt;/p&gt;
&lt;h4&gt;Mitigation&amp;nbsp;tactic&lt;/h4&gt;
&lt;p&gt;Before you shut off your Internet connection altogether while coding, consider employing the following technique
whenever you feel like scraping a piece of code from Stack Overflow, and dumping it in your project&amp;nbsp;source.&lt;/p&gt;
&lt;p&gt;Don&amp;#8217;t use the clipboard. Don&amp;#8217;t copy and paste. &lt;strong&gt;Retype&lt;/strong&gt; the code you&amp;#8217;ve found&amp;nbsp;instead.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s going to take more time, yes. It&amp;#8217;s definitely more cumbersome than just hitting &lt;em&gt;Ctrl+C&lt;/em&gt;/&lt;em&gt;Ctrl+V&lt;/em&gt;.
It may also make little sense: if the end result is the same, why does it matter whether the code was transfered
through the clipboard or&amp;nbsp;not?&lt;/p&gt;
&lt;h4&gt;Rationale&lt;/h4&gt;
&lt;p&gt;I&amp;#8217;d argue, however, that it makes perfect sense. From the least to the most important, the reasons why I think so
are the&amp;nbsp;following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The fact that retyping is slower than copy-pasting is what actually makes it &lt;em&gt;better&lt;/em&gt;. If you vow not to use
the clipboard, you&amp;#8217;re much less likely to just pick whatever&amp;#8217;s the first Stack Overflow result Google has given.
You&amp;#8217;ll weigh different solutions, and you&amp;#8217;ll be rightfully biased towards shorter and simpler&amp;nbsp;ones.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When you type something, you cannot do it completely thoughtlessly. Whether you want it or not, you&amp;#8217;ll absorb
some of the knowledge through sheer osmosis, because the code will flow through your eyes and fingers as it&amp;#8217;s transfered
from the browser to your editor or &lt;span class="caps"&gt;IDE&lt;/span&gt;. Your subconscious brain will latch onto the bits and pieces of information,
and it will sort them out for you to use later. Even if you didn&amp;#8217;t intend to, you will most likely &lt;em&gt;learn something&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;But most importantly, what you type almost certainly won&amp;#8217;t be a perfect copy of the original snippet.
As you progress through the code, you&amp;#8217;ll inevitably deviate from it, if only to conform to a particular style guide
your project is following.&lt;br&gt;
It&amp;#8217;s quite likely, though, that you&amp;#8217;ll make larger changes as well.
You will replace familiar patterns with calls to utility functions.
You&amp;#8217;ll rearrange the code visually for better readability.
You will add comments, or extract functions to make it more self-documenting.
You might even enhance and customize it, so that you can abstract and reuse it multiple&amp;nbsp;times.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Afterwards, what you&amp;#8217;ve just typed won&amp;#8217;t be just some code you have found on the Internet. It&amp;#8217;ll be &lt;em&gt;your code&lt;/em&gt;.&lt;/p&gt;</summary><category term="problem solving"></category><category term="Stack Overflow"></category><category term="typing"></category></entry></feed>