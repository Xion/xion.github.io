<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Karol Kuczmarski's Blog</title><link href="http://xion.io/" rel="alternate"></link><link href="http://xion.io/feeds/code.atom.xml" rel="self"></link><id>http://xion.io/</id><updated>2016-06-20T22:07:00-07:00</updated><entry><title>…or lambda?</title><link href="http://xion.io/post/code/python-or-lambda.html" rel="alternate"></link><updated>2016-06-20T22:07:00-07:00</updated><author><name>Karol Kuczmarski</name></author><id>tag:xion.io,2016-06-20:post/code/python-or-lambda.html</id><summary type="html">&lt;p&gt;&lt;em&gt;a.k.a. Curious Facts about Python&amp;nbsp;Syntax&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In Python 3.3,
a new method has been &lt;a href="https://docs.python.org/3/library/stdtypes.html#str.casefold"&gt;added&lt;/a&gt; to the &lt;code&gt;str&lt;/code&gt; type: &lt;code&gt;casefold&lt;/code&gt;.
Its purpose is to return a &amp;#8220;sanitized&amp;#8221; version of the string
that&amp;#8217;s suitable for case-insensitive comparison.
For older versions of Python,
an alternative way that&amp;#8217;s &lt;em&gt;mostly&lt;/em&gt; compatible is to use the &lt;code&gt;str.lower&lt;/code&gt; method,
which simply changes all letters in the string to&amp;nbsp;lowercase.&lt;/p&gt;
&lt;h4&gt;Syntax is&amp;nbsp;hard&lt;/h4&gt;
&lt;p&gt;Easy enough for a compatibility shim, right?
That&amp;#8217;s exactly what I thought when I came up with&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;casefold&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;casefold&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let&amp;#8217;s ignore for a moment
the fact that for a correct handling of &lt;code&gt;unicode&lt;/code&gt; objects in Python 2,
a &lt;a href="http://stackoverflow.com/a/32838944/434799"&gt;much more sophisticated approach&lt;/a&gt; is necessary.
What&amp;#8217;s rather more pertinent is that this simple code &lt;em&gt;doesn&amp;#8217;t parse&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  File &amp;quot;foo.py&amp;quot;, line 42
    getattr(str, &amp;#39;casefold&amp;#39;, None) or lambda s: s.lower()
                                      ^
SyntaxError: invalid syntax
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It&amp;#8217;s not very often that you would produce a &lt;code&gt;SyntaxError&lt;/code&gt; with code
that looks perfectly valid to most pythonistas.
The &lt;a href="http://xion.org.pl/2012/04/16/the-infernal-comma/"&gt;last time I had it happen&lt;/a&gt;,
the explanation was rather surprising and not exactly trivial to come&amp;nbsp;by.&lt;/p&gt;
&lt;p&gt;Fortunately, there is always one place
where we can definitively resolve any syntactic confusion.
That place is the &lt;a href="https://docs.python.org/2/reference/grammar.html"&gt;full grammar specification&lt;/a&gt;
of the Python&amp;nbsp;language.&lt;/p&gt;
&lt;p&gt;It may be a little intimidating at first,
especially if you&amp;#8217;re not familiar with the &lt;a href="https://en.wikipedia.org/wiki/Extended_Backus%E2%80%93Naur_Form"&gt;&lt;span class="caps"&gt;ENBF&lt;/span&gt; notation&lt;/a&gt; it uses.
All the Python&amp;#8217;s language constructs are there, though,
so the &lt;code&gt;SyntaxError&lt;/code&gt; from above should be traceable to a some rule of the grammar&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h4&gt;The&amp;nbsp;culprit&lt;/h4&gt;
&lt;p&gt;And indeed, the offending bit is right&amp;nbsp;here:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;or_test: and_test (&amp;#39;or&amp;#39; and_test)*
and_test: not_test (&amp;#39;and&amp;#39; not_test)*
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It says, essentially, that Python defines the &lt;code&gt;or&lt;/code&gt; expression (&lt;code&gt;or_test&lt;/code&gt;)
as a sequence of &lt;code&gt;and&lt;/code&gt; expressions (&lt;code&gt;and_test&lt;/code&gt;).
If you follow the syntax definition further, however,
you will notice that &lt;code&gt;and_test&lt;/code&gt; expands to
comparisons (&lt;code&gt;a &amp;lt; b&lt;/code&gt;, etc.),
arithmetic expressions (&lt;code&gt;x + y&lt;/code&gt;, etc.),
&lt;code&gt;list&lt;/code&gt; &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; &lt;code&gt;dict&lt;/code&gt; constructors (&lt;code&gt;[foo, bar]&lt;/code&gt;, etc.),
and finally to &lt;em&gt;atoms&lt;/em&gt; such as literal strings and&amp;nbsp;numbers.&lt;/p&gt;
&lt;p&gt;What you &lt;em&gt;won&amp;#8217;t&lt;/em&gt; see along the way are lambda&amp;nbsp;definitions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;lambdef: &amp;#39;lambda&amp;#39; [varargslist] &amp;#39;:&amp;#39; test
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In fact, the branch to allow them is directly above the &lt;code&gt;or_test&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;test: or_test [&amp;#39;if&amp;#39; or_test &amp;#39;else&amp;#39; test] | lambdef
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see, the rule puts lambdas at the same syntactical level as conditional expressions
(&lt;code&gt;x if a else b&lt;/code&gt;), which is &lt;em&gt;very&lt;/em&gt; high up.
The only thing you can do with a &lt;code&gt;lambda&lt;/code&gt; to make a larger expression
is to add a &lt;code&gt;yield&lt;/code&gt; keyword before it&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;, or follow it with a comma to create a tuple&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;You cannot, however, pass it as an argument to a binary operator,
even if it otherwise makes sense and even &lt;em&gt;looks&lt;/em&gt; unambiguous.
This is also why the nonsensical expressions such as this&amp;nbsp;one:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;will fail not with &lt;code&gt;TypeError&lt;/code&gt;, but also with &lt;code&gt;SyntaxError&lt;/code&gt;,
as they won&amp;#8217;t even be&amp;nbsp;evaluated.&lt;/p&gt;
&lt;h4&gt;More&amp;nbsp;parentheses&lt;/h4&gt;
&lt;p&gt;Savvy readers may have noticed that this phenomenon is very much reminiscent
of the issue of &lt;em&gt;operator precedence&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Indeed, in Python and in many other languages it is the grammar
that ultimately specifies the order of operations.
It does so simply by defining how expressions can be&amp;nbsp;constructed.&lt;/p&gt;
&lt;p&gt;Addition, for example, will be of lower priority than multiplication
simply because a &lt;em&gt;sum&lt;/em&gt; is said to comprise of terms that are &lt;em&gt;products&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;arith_expr: term ((&amp;#39;+&amp;#39;|&amp;#39;-&amp;#39;) term)*
term: factor ((&amp;#39;*&amp;#39;|&amp;#39;/&amp;#39;|&amp;#39;%&amp;#39;|&amp;#39;//&amp;#39;) factor)*
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This makes operator precedence a syntactic feature,
and its resolution is baked into the language parser and handled implicitly&lt;sup id="fnref:4"&gt;&lt;a class="footnote-ref" href="#fn:4" rel="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;We know, however, that precedence can be worked around where necessary
by enclosing the operator and its arguments in a pair of parenthesis.
On the syntax level, this means creating an entirely new, top-level&amp;nbsp;expression:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;atom: &amp;#39;(&amp;#39; [yield_expr|testlist_comp] &amp;#39;)&amp;#39; |  # parenthesized expression
       &amp;#39;[&amp;#39; [listmaker] &amp;#39;]&amp;#39; |
       &amp;#39;{&amp;#39; [dictorsetmaker] &amp;#39;}&amp;#39; |
       &amp;#39;`&amp;#39; testlist1 &amp;#39;`&amp;#39; |
       NAME | NUMBER | STRING+)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There, it is again possible to use even the highest-level constructs,
including also the silly stuff such as trying to add a number to a&amp;nbsp;function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This expression will now parse correctly,
 and produce &lt;code&gt;TypeError&lt;/code&gt; as&amp;nbsp;expected.&lt;/p&gt;
&lt;p&gt;In the end, the resolution of our initial dilemma is therefore rather&amp;nbsp;simple:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;casefold&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;casefold&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Such rules are sometimes called &lt;em&gt;productions&lt;/em&gt; of the grammar,
a &lt;a href="https://en.wikipedia.org/wiki/Production_%28computer_science%29"&gt;term&lt;/a&gt; from computational linguistics.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;Yes, &lt;code&gt;yield foo&lt;/code&gt; is an expression.
Its result is the value sent &lt;em&gt;to&lt;/em&gt; the generator by outer code via the &lt;code&gt;send&lt;/code&gt; method.
Since most generators are used as iterables, typically no values are passed this way
so the result of a &lt;code&gt;yield&lt;/code&gt; expression is &lt;code&gt;None&lt;/code&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;There are also a legacy corner cases of lambdas in &lt;code&gt;list&lt;/code&gt;/&lt;code&gt;dict&lt;/code&gt;/etc. comprehensions,
but those only apply under Python 2.x.&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:4"&gt;
&lt;p&gt;This saying, there are languages where the order is resolved at later stage,
after the expressions have already been parsed. They usually allow the programmer
to change the precedence of their own operators,
as it&amp;#8217;s the case in &lt;a href="https://www.haskell.org/tutorial/functions.html#sect3.2.2"&gt;Haskell&lt;/a&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:4" rev="footnote" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="Python"></category><category term="syntax"></category><category term="lambda"></category><category term="operators"></category></entry><entry><title>patterns</title><link href="http://xion.io/post/code/rust-patterns-ref.html" rel="alternate"></link><updated>2016-06-02T17:00:00-07:00</updated><author><name>Karol Kuczmarski</name></author><id>tag:xion.io,2016-06-02:post/code/rust-patterns-ref.html</id><summary type="html">&lt;p&gt;Rust is one of those nice languages with &lt;em&gt;pattern matching&lt;/em&gt;.
If you don&amp;#8217;t know, it can be thought of as a generalization of the &lt;code&gt;switch&lt;/code&gt; statement:
comparing objects not just by value (or overloaded equality operator, etc.)
but by &lt;em&gt;structure&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;hashmap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;do_something_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;None&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;panic&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Oh noes!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It doesn&amp;#8217;t end here. As you can see above, objects can also be
&lt;em&gt;destructured&lt;/em&gt; during the match (&lt;code&gt;Some(value)&lt;/code&gt;),
their parts assigned to &lt;em&gt;bindings&lt;/em&gt; (&lt;code&gt;value&lt;/code&gt;),
and those bindings can subsequently be used in the &lt;code&gt;match&lt;/code&gt; branch.&lt;/p&gt;
&lt;p&gt;Neat? Definitely.
In Rust, pattern matching is bread-and-butter of not only the &lt;code&gt;match&lt;/code&gt; statement,
but also &lt;code&gt;for&lt;/code&gt;, (&lt;code&gt;if&lt;/code&gt;)&lt;code&gt;let&lt;/code&gt;, and even ordinary function&amp;nbsp;arguments.&lt;/p&gt;
&lt;h4&gt;Mixing in Rust&amp;nbsp;semantics&lt;/h4&gt;
&lt;p&gt;For a long time, however, I was somewhat confused as to what happens
when references and borrowing is involved in matching.
The two &amp;#8220;operators&amp;#8221; that often occur there are &lt;code&gt;&amp;amp;&lt;/code&gt; (ampersand) and &lt;code&gt;ref&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You should readily recognize the first one,
as it is used pervasively in Rust to create references (and reference types).
The second one quite obviously hints towards references as well.
Yet those two constructs serve &lt;em&gt;very&lt;/em&gt; different purposes when used within a&amp;nbsp;pattern.&lt;/p&gt;
&lt;p&gt;To add to the confusion, they are quite often encountered&amp;nbsp;together:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;hyper&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Url&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// print query string params of some URL&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Url&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;some_url&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;query_params&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query_pairs&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;unwrap_or&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vec&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[]);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;ref&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;ref&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;query_params&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;println&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{}={}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Lack of one or the other will be (at best) pointed out to you by the compiler,
along with a suggestion where to add it.
But addressing problems in this manner can only go so far.
So how about we delve deeper and see what it&amp;#8217;s really&amp;nbsp;about?&lt;/p&gt;
&lt;h4&gt;Part of the reference, part of the&amp;nbsp;pattern&lt;/h4&gt;
&lt;p&gt;Rust is very flexible as to what value can be a subject of pattern matching.
You would be very hard pressed to find anything that &lt;em&gt;cannot&lt;/em&gt; be used within a &lt;code&gt;match&lt;/code&gt; statement, really.
Both actual objects and references to objects are perfectly&amp;nbsp;allowed:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;println&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Matched!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the latter case, however, we aren&amp;#8217;t typically interested in the reference itself (like above).
Instead, we want to determine some facts about the object it &lt;em&gt;points&lt;/em&gt;&amp;nbsp;to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;println&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Matched with number {}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see, this is where the ampersand comes into play.
Just like a type constructor (&lt;code&gt;Some&lt;/code&gt;, &lt;code&gt;Ok&lt;/code&gt;, or &lt;code&gt;Foo&lt;/code&gt; above),
the &lt;code&gt;&amp;amp;&lt;/code&gt; operator informs the Rust compiler what kind of value we&amp;#8217;re expecting from the match.
When it sees the ampersand, it knows we&amp;#8217;re looking for &lt;em&gt;references&lt;/em&gt; to certain objects,
and not for the objects&amp;nbsp;themselves.&lt;/p&gt;
&lt;p&gt;Why is the distinction between an object and its reference important, though?
In many other places, Rust is perfectly happy to blur the gap between references and actual objects&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; &amp;#8212;
for example when calling most of their&amp;nbsp;methods.&lt;/p&gt;
&lt;p&gt;Pattern matching, however,
due to its ability to unpack values into their constituent parts,
is a &lt;em&gt;destructive&lt;/em&gt; operation. Anything we apply &lt;code&gt;match&lt;/code&gt; (or similar construct) to
will be &lt;em&gt;moved&lt;/em&gt; into the block by&amp;nbsp;default:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;maybe_name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Alice&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;maybe_name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;println&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello, {}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;do_something_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;maybe_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Following the typical &lt;a href="https://doc.rust-lang.org/book/ownership.html"&gt;ownership semantics&lt;/a&gt;,
this will prevent any subsequent moves and essentially consume the&amp;nbsp;value:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;error: use of partially moved value: `maybe_name` [E0382]
    do_something_with(maybe_name);
                      ^~~~~~~~~~
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So just like the aforementioned type constructors (&lt;code&gt;Some&lt;/code&gt;, etc.),
the ampersand operator is simply &lt;em&gt;part of the pattern&lt;/em&gt; that we match against.
And just like with &lt;code&gt;Some&lt;/code&gt; and friends, there is an obvious symmetry here:
if &lt;code&gt;&amp;amp;&lt;/code&gt; was used to create the value, it needs to be used when unpacking&amp;nbsp;it.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The syntax used in a pattern that destructures an object
is analogous to one used by the expression which created&amp;nbsp;it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Preventing the&amp;nbsp;move&lt;/h4&gt;
&lt;p&gt;Errors like the one above often contain helpful&amp;nbsp;notes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;note: `(maybe_name:core::option::Option::Some).0` moved here because it has type `collections::string::String`, which is moved by default
         Some(n) =&amp;gt; println!(&amp;quot;Hello, {}&amp;quot;, n),
              ^
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;as well as hints for resolving&amp;nbsp;them:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;help: if you would like to borrow the value instead, use a `ref` binding as shown:
        Some(ref n) =&amp;gt; println!(&amp;quot;Hello, {}&amp;quot;, n),
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here&amp;#8217;s where &lt;code&gt;ref&lt;/code&gt; enters the&amp;nbsp;scene.&lt;/p&gt;
&lt;p&gt;The message tells us that if we add a &lt;code&gt;ref&lt;/code&gt; keyword in the suggested spot,
we will switch from moving to &lt;em&gt;borrowing&lt;/em&gt; for the &lt;code&gt;match&lt;/code&gt; binding that follows (here, &lt;code&gt;n&lt;/code&gt;).
It will still capture its value exactly as before,
but it will no longer assume &lt;em&gt;ownership&lt;/em&gt; of&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;This is the crucial&amp;nbsp;difference.&lt;/p&gt;
&lt;p&gt;Unlike the ampersand, &lt;code&gt;ref&lt;/code&gt; is &lt;strong&gt;not&lt;/strong&gt; something we match against.
It doesn&amp;#8217;t affect what values match the pattern it&amp;#8217;s in, and what values don&amp;#8217;t&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;The only thing it changes is how parts of the matched value
are &lt;em&gt;captured&lt;/em&gt; by the pattern&amp;#8217;s&amp;nbsp;bindings:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;by default, without &lt;code&gt;ref&lt;/code&gt;, they are &lt;em&gt;moved&lt;/em&gt; into the &lt;code&gt;match&lt;/code&gt; arms&lt;/li&gt;
&lt;li&gt;with &lt;code&gt;ref&lt;/code&gt;, they are &lt;em&gt;borrowed&lt;/em&gt; instead and represented as&amp;nbsp;references&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Looking at our example, the &lt;code&gt;n&lt;/code&gt; binding in &lt;code&gt;Some(n)&lt;/code&gt; is of type &lt;code&gt;String&lt;/code&gt;:
the actual field type from the matched structure.
By contrast, the other &lt;code&gt;n&lt;/code&gt; in &lt;code&gt;Some(ref n)&lt;/code&gt; is a &lt;code&gt;&amp;amp;String&lt;/code&gt; &amp;#8212;
that is, a &lt;em&gt;reference&lt;/em&gt; to the&amp;nbsp;field.&lt;/p&gt;
&lt;p&gt;One is a move, the other one is a&amp;nbsp;borrow.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;ref&lt;/code&gt; annotates pattern bindings to make them borrow rather than move.
It is &lt;em&gt;not&lt;/em&gt; a part of the pattern as far as matching is&amp;nbsp;concerned.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Used&amp;nbsp;together&lt;/h4&gt;
&lt;p&gt;To finish off, let&amp;#8217;s untangle the confusing example from the beginning of this&amp;nbsp;post:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;ref&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;ref&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;query_params&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;println&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{}={}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Since we know &lt;code&gt;ref&lt;/code&gt; doesn&amp;#8217;t affect whether or not the pattern matches,
we could just as well have something like &lt;code&gt;&amp;amp;(a, b)&lt;/code&gt;.
And this should be quite a bit easier to read:
it clearly denotes we expect a reference to a 2-tuple of simple objects.
Not coincidentally,
such tuples are items from the vector we&amp;#8217;re iterating&amp;nbsp;over.&lt;/p&gt;
&lt;p&gt;Problem is,
without the &lt;code&gt;ref&lt;/code&gt;s we will attempt to &lt;em&gt;move&lt;/em&gt; those items into the loop scope.
But due to the way the vector is iterated over (&lt;code&gt;&amp;amp;query_params&lt;/code&gt;),
we&amp;#8217;re only &lt;em&gt;borrowing&lt;/em&gt; each item, so this is actually impossible.
In fact, it would be a classic attempt to move out of a borrowed&amp;nbsp;context.&lt;/p&gt;
&lt;p&gt;It is also wholly unnecessary.
The only thing this loop does is printing the items out,
so accessing them through references is perfectly&amp;nbsp;fine.&lt;/p&gt;
&lt;p&gt;And this is exactly what the &lt;code&gt;ref&lt;/code&gt; operator gives us.
Adding the keyword back,
we will switch from moving the values to just borrowing them&amp;nbsp;instead.&lt;/p&gt;
&lt;h4&gt;To sum&amp;nbsp;up&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&amp;amp;&lt;/code&gt; denotes that your pattern &lt;strong&gt;expects a reference&lt;/strong&gt; to an object.
Hence &lt;code&gt;&amp;amp;&lt;/code&gt; is a part of said pattern:
&lt;code&gt;&amp;amp;Foo&lt;/code&gt; matches &lt;em&gt;different&lt;/em&gt; objects than &lt;code&gt;Foo&lt;/code&gt; does.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ref&lt;/code&gt; indicates that you want a &lt;strong&gt;reference to an unpacked value&lt;/strong&gt;.
It is &lt;em&gt;not&lt;/em&gt; matched against:
&lt;code&gt;Foo(ref foo)&lt;/code&gt; matches &lt;em&gt;the same&lt;/em&gt; objects as &lt;code&gt;Foo(foo)&lt;/code&gt;. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;The technical term for this is
a &lt;a href="https://doc.rust-lang.org/book/deref-coercions.html"&gt;&lt;em&gt;&lt;code&gt;Deref&lt;/code&gt; coercion&lt;/em&gt;&lt;/a&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;We can say that it doesn&amp;#8217;t affect the &lt;em&gt;satisfiability&lt;/em&gt;
(or conversely, &lt;em&gt;refutability&lt;/em&gt;) of the pattern.&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="Rust"></category><category term="pattern matching"></category><category term="borrowing"></category><category term="references"></category></entry><entry><title>Mock.configure_mock fix for Python</title><link href="http://xion.io/post/code/python-mock-configure.html" rel="alternate"></link><updated>2016-05-07T17:12:00-07:00</updated><author><name>Karol Kuczmarski</name></author><id>tag:xion.io,2016-05-07:post/code/python-mock-configure.html</id><summary type="html">&lt;p&gt;Python&amp;#8217;s &lt;a href="https://docs.python.org/3/library/unittest.mock.html"&gt;mocking library&lt;/a&gt; is rather uncomplicated.
Most of what it does is creating &lt;em&gt;mock objects&lt;/em&gt;: veritable sponges that absorb every interaction with any code
that we pass them&amp;nbsp;to.&lt;/p&gt;
&lt;p&gt;This simplicity is also surfaced in the &lt;span class="caps"&gt;API&lt;/span&gt;, especially in the main part of it &amp;#8212; the &lt;code&gt;mock.Mock&lt;/code&gt; constructor:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;some_mock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Mock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;http://example.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;some_mock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;http://example.com&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Any arguments that we pass there become attributes on the resulting mock object. This is really useful when
&lt;a href="https://docs.python.org/3/library/unittest.mock.html#the-patchers"&gt;patching&lt;/a&gt;, because it allows us to completely specify
the replacement object within a &lt;code&gt;@mock.patch&lt;/code&gt; decorator:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nd"&gt;@patch.object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;get&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Mock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;return_value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Mock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_404&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertRaises&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NotFoundError&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;do_stuff&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You have to keep in mind, however, that the &lt;code&gt;mock.Mock&lt;/code&gt; class also has some
&lt;a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock"&gt;constructor arguments&lt;/a&gt; of its own.
For this reason, there exists some potential for name collision: some of the &lt;code&gt;Mock&lt;/code&gt;&lt;span class="quo"&gt;&amp;#8216;&lt;/span&gt;s own arguments may have the same
names as the &lt;em&gt;attributes&lt;/em&gt; we&amp;#8217;d like to set on the mock&amp;nbsp;object:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;some_mock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Mock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;John Doe&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c"&gt;# doesn&amp;#39;t set the `name` attribute&lt;/span&gt;
&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;some_mock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;John Doe&amp;quot;&lt;/span&gt;  &lt;span class="c"&gt;# blows up!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here, the &lt;code&gt;name&lt;/code&gt; argument is inherent to the &lt;code&gt;Mock&lt;/code&gt; class. Its constructor will interpret it in a special way,
and so it &lt;em&gt;won&amp;#8217;t&lt;/em&gt; set a &lt;code&gt;name&lt;/code&gt; attribute on the resulting mock. Other possible culprits include the &lt;code&gt;spec&lt;/code&gt; and &lt;code&gt;wraps&lt;/code&gt;
parameters, both of which have relatively common names that we may want to use as object attributes&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h4&gt;Collision&amp;nbsp;avoidance&lt;/h4&gt;
&lt;p&gt;It&amp;#8217;s trivial to fix the issue, of&amp;nbsp;course:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;some_mock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Mock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;some_mock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;John Doe&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;sock_mock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;John Doe&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;but this approach has a downside. Creating and configuring a mock is no longer a single expression, which means we cannot
use it with patchers as easily as&amp;nbsp;before:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nd"&gt;@patch.object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_something&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mock_bar&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;mock_bar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;John Doe&amp;quot;&lt;/span&gt;
    &lt;span class="c"&gt;# (...rest of the test...)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can either configure the mock after patching, like above, or perhaps introduce some utility functions to be called
inside the &lt;code&gt;@patch&lt;/code&gt; decorator.&lt;/p&gt;
&lt;h4&gt;The almost-there&amp;nbsp;method&lt;/h4&gt;
&lt;p&gt;In any case, this is somewhat disappointing. And it is even more so when we discover that there is
&lt;a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.configure_mock"&gt;a method called &lt;code&gt;configure_mock&lt;/code&gt;&lt;/a&gt;
which &lt;em&gt;looks&lt;/em&gt; like it was designed to solve this very issue. Its arguments are always interpreted as attributes
of the mock: it has no &amp;#8220;special&amp;#8221; or &amp;#8220;reserved&amp;#8221; names. Indeed, this method is what allows us to actually
write the mock setup as a single&amp;nbsp;expression:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;some_mock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;configure_mock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;John Doe&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Problem is, this expression returns &lt;code&gt;None&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Yes, &lt;code&gt;configure_mock&lt;/code&gt; returns nothing.&lt;br&gt;
Or in other words, it doesn&amp;#8217;t return anything.&lt;br&gt;
In fact, it has &lt;a href="https://github.com/testing-cabal/mock/blob/286792b2cd5b5baa8338260538ed207391280e34/mock/mock.py#L671"&gt;no &lt;code&gt;return&lt;/code&gt; statement&lt;/a&gt;&amp;nbsp;whatsoever.&lt;/p&gt;
&lt;p&gt;Most importantly, it doesn&amp;#8217;t have the &lt;code&gt;return self&lt;/code&gt; line that&amp;#8217;d enable us to write&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;some_mock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Mock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;configure_mock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;John Doe&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Well, that is &lt;em&gt;quite&lt;/em&gt; a&amp;nbsp;let-down.&lt;/p&gt;
&lt;h4&gt;Fixing&amp;nbsp;it&lt;/h4&gt;
&lt;p&gt;But hey, this is Python! Shortcomings like that don&amp;#8217;t necessarily mean we have to fork whole libraries.
Let&amp;#8217;s just add the missing &lt;code&gt;return&lt;/code&gt;, shall&amp;nbsp;we?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mock&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Mock&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;_Mock&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Mock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_Mock&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;configure_mock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Mock&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;configure_mock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;  &lt;span class="c"&gt;# &amp;lt;-- there!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Whew, that was&amp;nbsp;quick!&lt;/p&gt;
&lt;p&gt;&amp;#8230;Alright, that&amp;#8217;s actually the &lt;em&gt;whole&lt;/em&gt; fix, but it&amp;#8217;s close. To complete it, we need to apply the same treatment to
three more &lt;code&gt;Mock&lt;/code&gt; classes: &lt;a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.MagicMock"&gt;&lt;code&gt;MagicMock&lt;/code&gt;&lt;/a&gt;,
&lt;a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.NonCallableMock"&gt;&lt;code&gt;NonCallableMock&lt;/code&gt;&lt;/a&gt;,
and &lt;a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.NonCallableMagicMock"&gt;&lt;code&gt;NonCallableMagicMock&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A complete solution can be seen in &lt;a href="https://gist.github.com/Xion/8b98733d4b6be354be0ebae815ebd22d"&gt;this gist&lt;/a&gt;.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Collision may also occur with &lt;code&gt;mock.patch&lt;/code&gt; constructs. The most likely offender there is probably
the &lt;a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.patch"&gt;&lt;code&gt;new&lt;/code&gt; parameter&lt;/a&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="Python"></category><category term="mock"></category><category term="patching"></category></entry><entry><title>Source code of a Python lambda</title><link href="http://xion.io/post/code/python-get-lambda-code.html" rel="alternate"></link><updated>2016-04-19T07:43:00-07:00</updated><author><name>Karol Kuczmarski</name></author><id>tag:xion.io,2016-04-19:post/code/python-get-lambda-code.html</id><summary type="html">&lt;p&gt;&lt;em&gt;&amp;#8230;or: The Most Hideous Hack I&amp;#8217;ve (Almost)&amp;nbsp;Done&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In &lt;a href="http://github.com/Xion/callee"&gt;callee&lt;/a&gt;, the &lt;a href="http://callee.readthedocs.org"&gt;argument matcher library for Python&lt;/a&gt; that
&lt;a href="http://xion.io/post/news/callee-intro.html"&gt;I released recently&lt;/a&gt;, there is this lovely
&lt;a href="https://github.com/Xion/callee/blob/f695ff4e1c45bfd45445ebb8014a202029a93dce/callee/general.py#L55"&gt;&lt;code&gt;TODO&lt;/code&gt; note&lt;/a&gt;
for a seemingly simple feature. When using the
&lt;a href="http://callee.readthedocs.org/en/stable/reference/general.html#callee.general.Matching"&gt;&lt;code&gt;Matching&lt;/code&gt; construct&lt;/a&gt;
with a simple &lt;code&gt;lambda&lt;/code&gt; predicate:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;mock_foo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assert_called_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Matching&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;it would be great to see its &lt;em&gt;code&lt;/em&gt; in the error message if the assertion fails. Right now it&amp;#8217;s just going to say
something like &lt;code&gt;&amp;lt;Matching &amp;lt;function &amp;lt;lambda&amp;gt; at 0x7f5d8a06eb18&amp;gt;&amp;gt;&lt;/code&gt;. Provided you don&amp;#8217;t possess a supernatural ability
of dereferencing pointers in your head, this won&amp;#8217;t give you any immediate hint as to what went wrong. Wouldn&amp;#8217;t it be nice
if it read as, say, &lt;code&gt;&amp;lt;Matching \x: x % 2&amp;gt;&lt;/code&gt; instead?&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;So I thought: why not try and implement such a mechanism? This is Python, after all &amp;#8212; a language where you can spawn
&lt;a href="https://blog.ionelmc.ro/2015/02/09/understanding-python-metaclasses/#simple-metaclass-use"&gt;completely new classes&lt;/a&gt;
at runtime, walk the stack &lt;a href="https://docs.python.org/2/library/inspect.html#the-interpreter-stack"&gt;backwards&lt;/a&gt;
(or even &lt;a href="https://docs.python.org/2/library/sys.html#sys.settrace"&gt;forward&lt;/a&gt;) and read the local variables,
or change the behavior of the &lt;a href="http://xion.org.pl/2012/05/06/hacking-python-imports/"&gt;import system itself&lt;/a&gt;.
Surely it would be possible &amp;#8212; nay, easy &amp;#8212; to get the source code of a short lambda function,&amp;nbsp;right?&lt;/p&gt;
&lt;p&gt;Boy, was I &lt;em&gt;wrong&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Make no mistake, though: the task turned out to be absolutely doable, at least in the scope I wanted it done.
But what would you think of a solution that involves not just the usual Python hackery, but also &lt;span class="caps"&gt;AST&lt;/span&gt; inspection,
transformations of the source code as text, &lt;em&gt;and&lt;/em&gt; bytecode&amp;nbsp;shenanigans?&amp;#8230;&lt;/p&gt;
&lt;h4&gt;The code, all the code, and&amp;#8230; much more than the&amp;nbsp;code&lt;/h4&gt;
&lt;p&gt;Let&amp;#8217;s start from the beginning, though. Here&amp;#8217;s a short lambda function, the kind of which we&amp;#8217;d like to obtain
the source code&amp;nbsp;of:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;is_even&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If the documentation for Python standard library is to be believed, this should be pretty easy.
In the &lt;a href="https://docs.python.org/2/library/inspect.html"&gt;&lt;code&gt;inspect&lt;/code&gt; module&lt;/a&gt;,
there is a function called no different than
&lt;a href="https://docs.python.org/2/library/inspect.html#inspect.getsource"&gt;&lt;code&gt;getsource&lt;/code&gt;&lt;/a&gt;. For our purposes, however,
&lt;a href="https://docs.python.org/2/library/inspect.html#inspect.getsourcelines"&gt;&lt;code&gt;getsourcelines&lt;/code&gt;&lt;/a&gt; is a little more
convienient, because we can easily tell when the lambda is too&amp;nbsp;long:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_short_lambda_source&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lambda_func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;source_lines&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getsourcelines&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lambda_func&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;IOError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source_lines&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;source_lines&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Of course if you programmed in Python for any longer period of time, you know very well that the standard docs
are &lt;em&gt;not&lt;/em&gt; to be trusted. And it&amp;#8217;s not just that the &lt;code&gt;except&lt;/code&gt; clause should also include &lt;code&gt;TypeError&lt;/code&gt;, because it
will be thrown when you try to pass any of the Python builtins to &lt;code&gt;getsourcelines&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;More important is the ambiguity of what does &amp;#8220;source lines for an object&amp;#8221; actually mean. &amp;#8220;Source lines &lt;em&gt;containing&lt;/em&gt;
the object definition&amp;#8221; would be much more accurate, and this seemingly small distinction is rather crucial here.
Passing a lambda function to either &lt;code&gt;getsourcelines&lt;/code&gt; or &lt;code&gt;getsource&lt;/code&gt;, we&amp;#8217;ll get its source &lt;em&gt;and everything else&lt;/em&gt;
that the returned lines&amp;nbsp;included.&lt;/p&gt;
&lt;p&gt;That&amp;#8217;s right. Say hello to the complete &lt;code&gt;is_even =&lt;/code&gt; assignment, and the entire &lt;code&gt;assert_called_with&lt;/code&gt; invocation!
And in case you are wondering: yes, the result will also include any end-of-line comments. No token left&amp;nbsp;behind!&lt;/p&gt;
&lt;h4&gt;Trim&amp;nbsp;left&lt;/h4&gt;
&lt;p&gt;Clearly this is more than we&amp;#8217;ve bargained for. Maybe there is a way to strip away the unnecessary cruft? Python does
know how to parse itself, after all: the standard &lt;a href="https://docs.python.org/2/library/ast.html"&gt;&lt;code&gt;ast&lt;/code&gt; module&lt;/a&gt;
is a manifestation of this knowledge. Perhaps we can use it to retrieve the &lt;code&gt;lambda&lt;/code&gt; &lt;span class="caps"&gt;AST&lt;/span&gt; node in order to turn it &amp;#8212;
and just it &amp;#8212; back into Python&amp;nbsp;code?&amp;#8230;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_short_lambda_ast_node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lambda_func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;source_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_short_lambda_source&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lambda_func&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;source_text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;source_ast&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source_text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;walk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source_ast&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                     &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Lambda&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But as it turns out, getting the source text back this way is only &lt;em&gt;mostly&lt;/em&gt;&amp;nbsp;possible.&lt;/p&gt;
&lt;p&gt;See, every substantial &lt;span class="caps"&gt;AST&lt;/span&gt; node &amp;#8212; which is either an expression (&lt;code&gt;ast.expr&lt;/code&gt;) or a statement (&lt;code&gt;ast.stmt&lt;/code&gt;) &amp;#8212;
has two common attributes: &lt;code&gt;lineno&lt;/code&gt; and &lt;code&gt;col_offset&lt;/code&gt;. When combined, they point to a place in the original source code
where the node was parsed from. This is how we can find out where to look for the definition of our lambda&amp;nbsp;function.&lt;/p&gt;
&lt;p&gt;Looks promising, right? The only problem is we don&amp;#8217;t know when to &lt;em&gt;stop&lt;/em&gt; looking.
That&amp;#8217;s right: nodes created by &lt;code&gt;ast.parse&lt;/code&gt; are annotated with their start offset, but not with length nor the end offset.
As a result, the best we can do when it comes to carving out the lambda source from the very first example is&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So close! Those hanging parentheses are evidently just taunting us, but how can we remove them? &lt;code&gt;lambda&lt;/code&gt; is basically
just a Python expression, so in principle it can be followed by almost anything. This is doubly true for lambdas inside
the &lt;code&gt;Matching&lt;/code&gt; construct, as they may be a part of some larger mock&amp;nbsp;assertion:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;mock_foo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assert_called_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Matching&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;GreaterThan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here, the extraneous suffix is the entirety of &lt;code&gt;), Integer() &amp;amp; GreaterThan(42))&lt;/code&gt;, quite a lot of more than just &lt;code&gt;))&lt;/code&gt;.
And that&amp;#8217;s of course nowhere near the limit of possiblities: for one, there may be more &lt;code&gt;lambda&lt;/code&gt;s in there,&amp;nbsp;too!&lt;/p&gt;
&lt;h4&gt;Back off, &lt;em&gt;slowly&lt;/em&gt;&lt;/h4&gt;
&lt;p&gt;It seems, however, that there is one thing those troublesome tails have in common: &lt;em&gt;they aren&amp;#8217;t syntactically valid&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Intuitively, a &lt;code&gt;lambda&lt;/code&gt; node nested within some other syntactical constructs will have their closing fragments (e.g. &lt;code&gt;)&lt;/code&gt;)
appear somewhere after its end. Without the corresponding openings (e.g. &lt;code&gt;Matching(&lt;/code&gt;), those fragments won&amp;#8217;t&amp;nbsp;parse.&lt;/p&gt;
&lt;p&gt;So here&amp;#8217;s the crazy idea. What we have is invalid Python, but only because of some unspecified number of extra characters.
How about we just try and remove them, one by one, until we get something that &lt;em&gt;is&lt;/em&gt; syntactically correct?
If we are not mistaken, this will finally be our lambda and nothing&amp;nbsp;else.&lt;/p&gt;
&lt;p&gt;The fortune favors the brave, so let&amp;#8217;s go ahead and try&amp;nbsp;it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# ... continuing get_short_lambda_source() ...&lt;/span&gt;

&lt;span class="n"&gt;source_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;source_lines&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;lambda_node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_short_lambda_ast_node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lambda_func&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;lambda_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;source_text&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;lambda_node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;col_offset&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
&lt;span class="n"&gt;min_length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;lambda:_&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c"&gt;# shortest possible lambda expression&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lambda_text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;min_length&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lambda_text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;lambda_text&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;SyntaxError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;lambda_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lambda_text&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Considering that we&amp;#8217;re basically taking lessons from the dusty old tomes in the Restricted Section of Hogwarts library,
the magic here looks quite simple. As long as there is something that can pass for a lambda definition,
we try to parse it and see if it succeeds. The line that says &lt;code&gt;except SyntaxError:&lt;/code&gt; is obviously not something for
the faint of heart, but at least we are specifying
&lt;a href="https://docs.python.org/2/howto/doanddont.html#except"&gt;&lt;em&gt;what&lt;/em&gt; exception&lt;/a&gt; we anticipate&amp;nbsp;catching.&lt;/p&gt;
&lt;p&gt;And the kicker? It &lt;em&gt;works&lt;/em&gt;. By that I mean it doesn&amp;#8217;t return garbage results for a few obvious and not so obvious
test cases, which is already more than you would normally expect from hacks of this magnitude.
All the lambdas defined until this paragraph, for example, can have their source code extracted without&amp;nbsp;issue.&lt;/p&gt;
&lt;h4&gt;Just one more&amp;nbsp;thing&lt;/h4&gt;
&lt;p&gt;So&amp;#8230; victory? Not quite. Astute readers may recall my promise of some bytecode arcana, and now&amp;#8217;s the time for&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;Despite the initial success of our gradual, character dropping approach, there are cases where it doesn&amp;#8217;t produce
the correct result. Consider, for example, a lambda definition that&amp;#8217;s nestled within a tuple&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;get_short_lambda_source&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We would of course expect the result to be &lt;code&gt;lambda _: True&lt;/code&gt;, without a comma or&amp;nbsp;zero.&lt;/p&gt;
&lt;p&gt;Unfortunately, here&amp;#8217;s where our earlier assumption fails rather spectacularly. The line of code extracted from &lt;span class="caps"&gt;AST&lt;/span&gt;
is syntactically valid even &lt;em&gt;with&lt;/em&gt; the extra characters. As a result, &lt;code&gt;ast.parse&lt;/code&gt; succeeds too early and returns an
incorrect definition. It should have been of a lambda contained within a tuple, but tuple is apparently what the lambda
&lt;em&gt;returns&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;You may say that this is the sharp end of a narrow edge case, and anyone who defines functions like that deserves all
the trouble they get. And sure, I wouldn&amp;#8217;t mind if we just threw hands in the air and tell them we&amp;#8217;re simply unable
to retrieve the source here. But my opinion is that it doesn&amp;#8217;t justify serving them obviously &lt;em&gt;wrong&lt;/em&gt;&amp;nbsp;results!&lt;/p&gt;
&lt;h4&gt;A halting&amp;nbsp;problem&lt;/h4&gt;
&lt;p&gt;Not if we can help it, anyway. Have a look at the expected source code and the one we&amp;#8217;ve extracted, side by&amp;nbsp;side:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The second line isn&amp;#8217;t just longer: it is also &lt;em&gt;doing more&lt;/em&gt;. It isn&amp;#8217;t just defining a lambda; it defines it,
conjures up a constant &lt;code&gt;0&lt;/code&gt;, and then packs them both into a tuple. That&amp;#8217;s at least two additional steps compared to
the&amp;nbsp;original.&lt;/p&gt;
&lt;p&gt;Those steps have a more precise name, too: they are the &lt;em&gt;bytecode instructions&lt;/em&gt;. Every piece of Python source is compiled
to a binary bytecode before it&amp;#8217;s executed, because the interpreter can only work with this representation.
Compilation typically happens when a Python module is first imported, producing a &lt;em&gt;.pyc&lt;/em&gt; file corresponding to its
&lt;em&gt;.py&lt;/em&gt; file. Subsequent imports will simply reuse the cached&amp;nbsp;bytecode.&lt;/p&gt;
&lt;p&gt;Moreover, any function or class object has its bytecode accessible (read-only) at runtime. There is even a
&lt;a href="http://late.am/post/2012/03/26/exploring-python-code-objects.html"&gt;dedicated data type&lt;/a&gt; to hold it &amp;#8212; called simply
&lt;code&gt;code&lt;/code&gt; &amp;#8212; with a buffer of raw bytes under one of its&amp;nbsp;attributes.&lt;/p&gt;
&lt;p&gt;Finally, the bytecode compiler itself is also available to Python programs as a built-in
&lt;a href="https://docs.python.org/2/library/functions.html#compile"&gt;&lt;code&gt;compile&lt;/code&gt; function&lt;/a&gt;. You don&amp;#8217;t see it used as often as its
counterparts &lt;a href="https://docs.python.org/2/library/functions.html#eval"&gt;&lt;code&gt;eval&lt;/code&gt;&lt;/a&gt;
and &lt;a href="https://docs.python.org/2/reference/simple_stmts.html#exec"&gt;&lt;code&gt;exec&lt;/code&gt;&lt;/a&gt; (which hopefully are a rare sight themselves!),
but it taps into the same internal machinery of&amp;nbsp;Python.&lt;/p&gt;
&lt;p&gt;So how does it all add up? The idea is, basically, to cross-check the alleged source code of the lambda with its own
&lt;em&gt;byte&lt;/em&gt;code. Any junk that&amp;#8217;s still left to trim &amp;#8212; even if syntactically valid &amp;#8212; will surface as a divergence after
compilation. Thus we can simply continue dropping characters until the bytecodes&amp;nbsp;match:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;lambda_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;source_text&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;lambda_node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;col_offset&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
&lt;span class="n"&gt;lambda_body_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;source_text&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;lambda_node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;col_offset&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
&lt;span class="n"&gt;min_length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;lambda:_&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c"&gt;# shortest possible lambda expression&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lambda_text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;min_length&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lambda_body_text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;lt;unused filename&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;eval&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;co_code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lambda_func&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__code__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;co_code&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;lambda_text&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;SyntaxError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;
    &lt;span class="n"&gt;lambda_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lambda_text&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;lambda_body_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lambda_body_text&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Okay, maybe not the exact bytes&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;, but stopping at the identical bytecode &lt;em&gt;length&lt;/em&gt; is good enough a strategy.
As an obvious bonus, &lt;code&gt;compile&lt;/code&gt; will also take care of detecting syntax errors in the candidate source code,
so we don&amp;#8217;t need the &lt;code&gt;ast&lt;/code&gt; parsing&amp;nbsp;anymore.&lt;/p&gt;
&lt;h4&gt;That escalated&amp;nbsp;quickly!&lt;/h4&gt;
&lt;p&gt;Believe it or not, but there aren&amp;#8217;t any more objections to this solution, You can view it in its glorious entirety
by looking at &lt;a href="https://gist.github.com/Xion/617c1496ff45f3673a5692c3b0e3f75a"&gt;this gist&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Does it mean it is also making its cameo in the &lt;a href="https://github.com/Xion/callee"&gt;&lt;em&gt;callee&lt;/em&gt; library&lt;/a&gt;?&amp;#8230;&lt;/p&gt;
&lt;p&gt;No, I&amp;#8217;m afraid&amp;nbsp;not.&lt;/p&gt;
&lt;p&gt;Normally, I&amp;#8217;m not the one to shy away from, ahem, &lt;em&gt;bold&lt;/em&gt; solutions to tough problems. But in this case, the magnitude
of hackery required is just too great, the result not satisfactory enough, the feature&amp;#8217;s priority isn&amp;#8217;t really
all that high, and the maintenance burden it&amp;#8217;d introduce is most likely too&amp;nbsp;large.&lt;/p&gt;
&lt;p&gt;In the end, it was great fun figuring it out: yet another example of how you can fiddle with Python to do basically
anything. Still, we must not get too preoccupied with whether or not we can as to forget if we &lt;em&gt;should&lt;/em&gt;.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Backslash (&lt;code&gt;\&lt;/code&gt;) is how lambda functions are denoted in Haskell. We want to be short and sweet, so it feels
like a natural choice.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;This isn&amp;#8217;t an actual snippet from a Python &lt;span class="caps"&gt;REPL&lt;/span&gt;, because &lt;code&gt;inspect.getsourcelines&lt;/code&gt; requires the object to be
defined in a &lt;em&gt;.py&lt;/em&gt; file.&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;Why we won&amp;#8217;t always get an identical bytecode? The short answer is that some instructions may be swapped
for their approximate equivalents.&lt;br/&gt;
The long answer is that with &lt;code&gt;compile&lt;/code&gt;, we aren&amp;#8217;t able to replicate the exact closure environment of the original lambda.
When a function refers to an &lt;em&gt;free variable&lt;/em&gt; (like &lt;code&gt;foo&lt;/code&gt; in &lt;code&gt;lambda x: x + foo&lt;/code&gt;), it is its closure where the value
for that variable comes from. For ad-hoc lambdas, this is typically the local scope of its &lt;em&gt;outer function&lt;/em&gt;.&lt;/br&gt;
Code produced by &lt;code&gt;compile&lt;/code&gt;, however, isn&amp;#8217;t associated with any such local scope. All free names are thus assumed
to refer to &lt;em&gt;global&lt;/em&gt; variables. Because Python uses different bytecode instructions for referencing local and global
names (&lt;code&gt;LOAD_FAST&lt;/code&gt; vs &lt;code&gt;LOAD_GLOBAL&lt;/code&gt;), the result of &lt;code&gt;compile&lt;/code&gt; may differ from a piece of bytecode produced in the regular
manner.&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="Python"></category><category term="functions"></category><category term="AST"></category><category term="bytecode"></category></entry><entry><title>Pipe `xargs` into `find`</title><link href="http://xion.io/post/code/shell-xargs-into-find.html" rel="alternate"></link><updated>2016-04-03T12:23:00-07:00</updated><author><name>Karol Kuczmarski</name></author><id>tag:xion.io,2016-04-03:post/code/shell-xargs-into-find.html</id><summary type="html">&lt;p&gt;Here&amp;#8217;s a trick that&amp;#8217;s hardly new, but if you haven&amp;#8217;t heard about, it will save you a trip to a man page or&amp;nbsp;two.&lt;/p&gt;
&lt;p&gt;Assuming you&amp;#8217;re a person who mostly prefers the terminal over some fancy &lt;span class="caps"&gt;GUI&lt;/span&gt;, you&amp;#8217;ve probably used the &lt;code&gt;find&lt;/code&gt; command
along with &lt;code&gt;xargs&lt;/code&gt; at least a few times. It&amp;#8217;s very common, for example, to use the results of &lt;code&gt;find&lt;/code&gt; as arguments
to some other program. It could something as simple as figuring out which modules in your project have grown
slightly too&amp;nbsp;large:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ find . -name &amp;#39;*.py&amp;#39; | xargs wc -l | sort -hr
1467 total
 322 callee/base.py
 261 callee/general.py
 251 callee/collections.py
# etc.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We find them all first, and then use &lt;code&gt;xargs&lt;/code&gt; to build a long &lt;code&gt;wc&lt;/code&gt; invocation, and we finally display results
in the reverse order. Pretty easy stuff: I don&amp;#8217;t usually have to try more than a dozen times to get it right!&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;But how about the opposite situation? Let&amp;#8217;s say you have a list of &lt;em&gt;directories&lt;/em&gt; you want to search through with &lt;code&gt;find&lt;/code&gt;.
Doing so may seem easy enough&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ cat packagedirs.txt | xargs find -name &amp;#39;__init__.py&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Except it&amp;#8217;s not going to work. Like a few other Unix commands, &lt;code&gt;find&lt;/code&gt; is very particular about the order of arguments
it receives. Not only are the predicate flags (like &lt;code&gt;-name&lt;/code&gt;) considered in sequence, but they also have to appear
&lt;em&gt;after&lt;/em&gt; the directories we want to search&amp;nbsp;through.&lt;/p&gt;
&lt;p&gt;But in the &lt;code&gt;xargs&lt;/code&gt; invocation above, essentially the opposite is going to&amp;nbsp;happen.&lt;/p&gt;
&lt;h4&gt;The replacement&amp;nbsp;flag&lt;/h4&gt;
&lt;p&gt;So how to remedy this? Enter the &lt;code&gt;-I&lt;/code&gt; flag to &lt;code&gt;xargs&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ cat packagedirs.txt | xargs -I{} find {} -name &amp;#39;__init__.py&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This flag will tell &lt;code&gt;xargs&lt;/code&gt; quite a few&amp;nbsp;things.&lt;/p&gt;
&lt;p&gt;The most important one is to stop putting the arguments at the end of the command invocation.
Instead, it shall place them wherever it sees the &lt;em&gt;replacement string&lt;/em&gt; &amp;#8212; here, pair of braces&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;: &lt;code&gt;{}&lt;/code&gt;.
And because we placed the braces where &lt;code&gt;find&lt;/code&gt; is normally expecting the list of directories to search through,
the command will now get us exactly the results we&amp;nbsp;wanted.&lt;/p&gt;
&lt;p&gt;What&amp;#8217;s almost impossible to see, however, is that it may not use the exact &lt;em&gt;way&lt;/em&gt; we intended to obtain those results.
The difference is easier to spot when we replace &lt;code&gt;find&lt;/code&gt; with &lt;code&gt;echo&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ cat &amp;gt;/tmp/list
foo
bar
$ cat /tmp/list | xargs echo
foo bar
$ cat /tmp/list | xargs -I{} echo {}
foo
bar
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;or, better yet, use &lt;code&gt;xargs&lt;/code&gt; with the &lt;code&gt;-t&lt;/code&gt; flag to print the commands on stderr before executing&amp;nbsp;them:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ cat packagedirs.txt | xargs -I{} -t find {} -name &amp;#39;__init__.py&amp;#39; &amp;gt;/dev/null
find callee -name &amp;#39;__init__.py&amp;#39;
find tests -name &amp;#39;__init__.py&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see, we actually have more than one &lt;code&gt;find&lt;/code&gt; invocation&amp;nbsp;here!&lt;/p&gt;
&lt;p&gt;This is the second effect of &lt;code&gt;-I&lt;/code&gt;: it causes &lt;code&gt;xargs&lt;/code&gt; to execute given command line &lt;em&gt;for each argument separately&lt;/em&gt;.
It so happens that it doesn&amp;#8217;t really make any difference for our usage of &lt;code&gt;find&lt;/code&gt;, which is why it wasn&amp;#8217;t at all obvious
we were running it multiple&amp;nbsp;times.&lt;/p&gt;
&lt;p&gt;To avoid problems, though, you should definitely be cognizant of this fact when calling other programs with &lt;code&gt;xargs -I&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;Make arguments spaced&amp;nbsp;again&lt;/h4&gt;
&lt;p&gt;Incidentally, I&amp;#8217;m not aware of any method that&amp;#8217;d actually make &lt;code&gt;xargs&lt;/code&gt; produce &lt;code&gt;find foo bar -name ...&lt;/code&gt; calls.
If you need this exact form, probably the easiest way is to use plain old shell&amp;nbsp;variables:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ (d=$(cat packagedirs.txt); find $d -name &amp;#39;*.py&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This takes advantage of the &lt;a href="http://mywiki.wooledge.org/WordSplitting"&gt;word splitting&lt;/a&gt; feature of Bash and a few other
compatible shells. Caveat is, you may be using a shell where this behavior is disabled by default. The result would be
making &lt;code&gt;find&lt;/code&gt; interpret the content of &lt;code&gt;$d&lt;/code&gt; as a &lt;em&gt;single&lt;/em&gt; directory name: &lt;code&gt;foo bar&lt;/code&gt; rather than &lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;bar&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;zsh is one such shell. Although &lt;a href="http://zsh.sourceforge.net/FAQ/zshfaq03.html#l18"&gt;probably a good thing overall&lt;/a&gt;,
in times like these you&amp;#8217;d want to bring the &amp;#8220;normal&amp;#8221; behavior back. In zsh, it&amp;#8217;s fortunately pretty&amp;nbsp;simple:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ (d=$(cat packagedirs.txt); find ${=d} -name &amp;#39;*.py&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What about a portable solution? As far as I can tell, the only certain way you can ensure word splitting occurs
is to use &lt;code&gt;eval&lt;/code&gt;. Here, the &lt;code&gt;xargs&lt;/code&gt; command can actually come in handy again, albeit only as a&amp;nbsp;prop:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ (d=$(cat packagedirs.txt | xargs echo); eval &amp;quot;find $d -name &amp;#39;*.py&amp;#39;&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;One would hope such hacks aren&amp;#8217;t needed very&amp;nbsp;often.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;A completely kosher version would also use the &lt;code&gt;-print0&lt;/code&gt; flag to &lt;code&gt;find&lt;/code&gt; and the &lt;code&gt;-0&lt;/code&gt; flag to &lt;code&gt;xargs&lt;/code&gt;.
It&amp;#8217;s not necessary here because Python module files cannot contain spaces.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;Purists shall excuse my use of &lt;code&gt;cat&lt;/code&gt; here, it&amp;#8217;s merely for illustrative purposes.&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;This use of braces in &lt;code&gt;find&lt;/code&gt; has of course nothing to do with the &lt;em&gt;other&lt;/em&gt; possible occurrences of &lt;code&gt;{}&lt;/code&gt; there,
like in the &lt;code&gt;-exec&lt;/code&gt; flag. Since you cannot force &lt;code&gt;find&lt;/code&gt; to expect a different placeholder, you should use something else
for &lt;code&gt;xargs&lt;/code&gt; in those cases, .e.g: &lt;code&gt;xargs -I^ find ^ -name '__main__.py' -exec 'python {}' \;&lt;/code&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="shell scripting"></category><category term="Bash"></category><category term="xargs"></category><category term="find"></category><category term="zsh"></category></entry><entry><title>Tricks with ownership in Rust</title><link href="http://xion.io/post/code/rust-borrowchk-tricks.html" rel="alternate"></link><updated>2016-02-06T16:42:00-08:00</updated><author><name>Karol Kuczmarski</name></author><id>tag:xion.io,2016-03-07:post/code/rust-borrowchk-tricks.html</id><summary type="html">&lt;p&gt;&lt;em&gt;&amp;#8230;or how I learned to stop worrying and love the borrow&amp;nbsp;checker.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Having no equivalents in other languages, the &lt;a href="https://doc.rust-lang.org/book/ownership.html"&gt;borrow checker&lt;/a&gt;
is arguably the most difficult thing to come to terms with when learning Rust. It&amp;#8217;s easy to understand why it&amp;#8217;s immensely
useful, especially if you recall
&lt;a href="https://googleonlinesecurity.blogspot.com/2016/02/cve-2015-7547-glibc-getaddrinfo-stack.html"&gt;the various vulnerabities&lt;/a&gt;
stemming from memory mismanagement. But that knowledge doesn&amp;#8217;t exactly help when the compiler is whining about what
seems like a perfectly correct&amp;nbsp;code.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s face it: it will take some time to become productive writing efficient and safe code. It&amp;#8217;s not entirely unlike
adjusting to a different paradigm such as functional programming when you&amp;#8217;ve been writing mostly imperative code.
Before that happens, though, you can use some tricks to make the transition a little&amp;nbsp;easier.&lt;/p&gt;
&lt;h4&gt;Just &lt;code&gt;clone&lt;/code&gt; it&lt;/h4&gt;
&lt;p&gt;Ideally, we&amp;#8217;d want our code to be both correct &lt;em&gt;and&lt;/em&gt; fast. But if we cannot quite get to the &amp;#8220;correctness&amp;#8221; part yet &amp;#8212;
because our program doesn&amp;#8217;t, you know, &lt;em&gt;compile&lt;/em&gt; &amp;#8212; then how about paying for it with a small (and refundable)
performance&amp;nbsp;hit?&lt;/p&gt;
&lt;p&gt;This is where the &lt;code&gt;clone&lt;/code&gt; method comes in handy. Many problems with the borrow checker stem from trying to spread
object ownership too thin. It is a precious resource and it&amp;#8217;s not very cheap to &amp;#8220;produce&amp;#8221;, which is why good Rust code
often deals with just immutable or mutable&amp;nbsp;references.&lt;/p&gt;
&lt;p&gt;But if that proves difficult, then &amp;#8220;making more objects&amp;#8221; is a great intermediate solution. Incidentally, this is what
higher level languages are doing all the time, and often transparently. To ease the transition to Rust from
those languages, we can start off by replicating their&amp;nbsp;behavior.&lt;/p&gt;
&lt;p&gt;As an example, consider a function that tries to convert some value to &lt;code&gt;String&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;maybe_to_string&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// omitted&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If we attempt to build upon it and create a &lt;code&gt;Vec&lt;/code&gt;tor&amp;nbsp;version:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;maybe_all_to_string&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;maybe_to_string&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;collect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_err&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Err&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;unwrap&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="n"&gt;collect&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;then we&amp;#8217;ll be unpleasantly surprised by a borrow checker&amp;nbsp;error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;error: cannot move out of borrowed content [E0507]
    Ok(results.iter().map(|r| r.ok().unwrap()).collect())
                              ^
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Much head scratching will ensue, and we may eventually find an idiomatic and efficient solution.
However, a simple stepping stone in the shape of additional &lt;code&gt;clone()&lt;/code&gt; call can help move things forward just
a little&amp;nbsp;quicker:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#[derive(Clone)]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="nb"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clone&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;unwrap&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="n"&gt;collect&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The performance tradeoff is explicit, and easy to find later on with a simple &lt;code&gt;grep clone\(\)&lt;/code&gt; or similar.
When you learn to do things the Rusty way, it won&amp;#8217;t be hard to go back to your &amp;#8220;hack&amp;#8221; and fix it&amp;nbsp;properly.&lt;/p&gt;
&lt;h4&gt;Refcounting to the&amp;nbsp;rescue&lt;/h4&gt;
&lt;p&gt;Adding &lt;code&gt;clone()&lt;/code&gt; willy-nilly to make the code compile is a valid workaround when we&amp;#8217;re just learning. Sometimes, however,
even some gratuitous cloning doesn&amp;#8217;t &lt;em&gt;quite&lt;/em&gt; solve the problem, because the &lt;code&gt;clone()&lt;/code&gt; itself can become an&amp;nbsp;issue.&lt;/p&gt;
&lt;p&gt;For one, it requires our objects to implement the &lt;a href="https://doc.rust-lang.org/std/clone/trait.Clone.html"&gt;&lt;code&gt;Clone&lt;/code&gt; trait&lt;/a&gt;.
This was apparent even in our previous example, since we had to add a &lt;code&gt;#[derive(Clone)]&lt;/code&gt; attribute to the &lt;code&gt;struct Error&lt;/code&gt;
in order to make it &lt;code&gt;clone&lt;/code&gt;-able.&lt;/p&gt;
&lt;p&gt;Fortunately, in the vast majority of cases this will be all that&amp;#8217;s necessary, as most built-in types in Rust implement
&lt;code&gt;Clone&lt;/code&gt; already. One notable exception are &lt;em&gt;function traits&lt;/em&gt; (&lt;code&gt;FnOnce&lt;/code&gt;, &lt;code&gt;Fn&lt;/code&gt;, and &lt;code&gt;FnMut&lt;/code&gt;) which are used to store
and refer to &lt;em&gt;closures&lt;/em&gt;&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;. Structures and other custom types that contain them (or those which &lt;em&gt;may&lt;/em&gt; contain them)
cannot therefore implement &lt;code&gt;Clone&lt;/code&gt; through a simple &lt;code&gt;#[derive]&lt;/code&gt; annotation:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c-Doc"&gt;/// A value that&amp;#39;s either there already&lt;/span&gt;
&lt;span class="c-Doc"&gt;/// or can be obtained by calling a function.&lt;/span&gt;
&lt;span class="cp"&gt;#[derive(Clone)]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;enum&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;LazyValue&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Clone&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Immediate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Deferred&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Fn&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;!-- --&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;error: the trait `core::marker::Sized` is not implemented for the type `core::ops::Fn() -&amp;gt; T + &amp;#39;static` [E0277]
    #[derive(Clone)]
             ^~~~~
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What can we do in this case, then? Well, there is yet another kind of performance concessions we can make,
and this one will likely sound familiar if you&amp;#8217;ve ever worked with a higher level language before. Instead of actually
cloning an object, you can merely increment its &lt;em&gt;reference counter&lt;/em&gt;. As the most rudimentary kind of garbage collection,
this allows to safely share the object between multiple &amp;#8220;owners&amp;#8221;, where each can behave as if it had
its own copy of&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;Rust&amp;#8217;s pointer type that provides reference counting capabilities is called &lt;code&gt;std::rc::Rc&lt;/code&gt;. Conceptually, it is analogous
to &lt;code&gt;std::shared_ptr&lt;/code&gt; from C++, and it similarly keeps the refcount updated when the pointer is &amp;#8220;acquired&amp;#8221; (&lt;code&gt;clone&lt;/code&gt;-ed)
and &amp;#8220;released&amp;#8221; (&lt;code&gt;drop&lt;/code&gt;-ed). Because no data is moved around during either of those two operations, &lt;code&gt;Rc&lt;/code&gt; can refer even
to types whose size isn&amp;#8217;t known at compilation time, like abstract&amp;nbsp;closures:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;rc&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Rc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="cp"&gt;#[derive(Clone)]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;enum&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;LazyValue&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Clone&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Immediate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Deferred&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Rc&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Fn&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Wrapping them in &lt;code&gt;Rc&lt;/code&gt; therefore makes them &amp;#8220;cloneable&amp;#8221;. They aren&amp;#8217;t actually cloned, of course, but because of
the inherent immutability of Rust types they will appear so to any outside observer&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h4&gt;Move&amp;nbsp;it!&lt;/h4&gt;
&lt;p&gt;Ultimately, most problems with the borrow checker boil down to unskillful mixing of the two ways you handle data in Rust.
There is &lt;em&gt;ownership&lt;/em&gt;, which is passed around by moving the values; and there is &lt;em&gt;borrowing&lt;/em&gt;, which means operating
on them through&amp;nbsp;references.&lt;/p&gt;
&lt;p&gt;When you try to switch from one to the other, some friction is bound to occur. Code that uses references, for example,
has to be copiously sprinkled with &lt;code&gt;&amp;amp;&lt;/code&gt; and &lt;code&gt;&amp;amp;mut&lt;/code&gt;, and may sometimes require explicit lifetime annotations. All these
have to be added or removed, and changes like that tend to propagate quite readily to the upper layers
of the program&amp;#8217;s&amp;nbsp;logic.&lt;/p&gt;
&lt;p&gt;Therefore it is generally preferable, if at all possible, to deal with data directly
and not through references. To maintain efficiency, however, we need to learn how to move the objects through the various
stages of our algorithms. It turns out it&amp;#8217;s surprisingly easy to inadvertently borrow something, hindering the possibility
of producing a moved&amp;nbsp;value.&lt;/p&gt;
&lt;p&gt;Take our first example. The intuitively named &lt;code&gt;Vec::iter&lt;/code&gt; method produces an iterator that we can &lt;code&gt;map&lt;/code&gt; over, but does
it really go over the actual &lt;em&gt;items&lt;/em&gt; in the vector? Nope! It gives us a &lt;em&gt;reference&lt;/em&gt; to each one &amp;#8212; a borrow, if you will
&amp;#8212; which is exactly why we originally had to use &lt;code&gt;clone&lt;/code&gt; to get out of this&amp;nbsp;bind.&lt;/p&gt;
&lt;p&gt;Instead, why not just get the elements themselves, by moving them out of the vector? &lt;code&gt;Vec::into_iter&lt;/code&gt; allows to do exactly&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;into_iter&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;unwrap&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="n"&gt;collect&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and enables us to remove the &lt;code&gt;clone()&lt;/code&gt; call. The family of similar &lt;code&gt;into_X&lt;/code&gt; (or even just &lt;code&gt;into&lt;/code&gt;) methods can be reliably counted
on at least in the standard library. They are also part of a more-or-less official
&lt;a href="https://aturon.github.io/style/naming.html#conversions"&gt;naming convention&lt;/a&gt; that you should also follow in your own&amp;nbsp;code.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Note how this is different from function &lt;em&gt;types&lt;/em&gt;, i.e. &lt;code&gt;fn(A, B, C, ...) -&amp;gt; Ret&lt;/code&gt;. It is because plain functions
do not carry their closure environments along with them. This makes them little more than just pointers to some code,
and those can be freely &lt;code&gt;Clone&lt;/code&gt;-d (or even &lt;code&gt;Copy&lt;/code&gt;-ed).&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;If you want both shared ownership (&amp;#8220;fake cloneability&amp;#8221;) &lt;em&gt;and&lt;/em&gt; the ability to mutate the shared value,
take a look at the &lt;a href="https://doc.rust-lang.org/std/cell/struct.RefCell.html"&gt;&lt;code&gt;RefCell&lt;/code&gt; type&lt;/a&gt; and how it can be
&lt;a href="http://doc.rust-lang.org/nightly/book/choosing-your-guarantees.html#composition"&gt;wrapped in &lt;code&gt;Rc&lt;/code&gt;&lt;/a&gt; to achieve both.&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="Rust"></category><category term="borrow checker"></category><category term="reference counting"></category><category term="traits"></category></entry><entry><title>Requirements for Python’s pip</title><link href="http://xion.io/post/code/python-pip-requirements.html" rel="alternate"></link><updated>2016-02-21T09:01:00-08:00</updated><author><name>Karol Kuczmarski</name></author><id>tag:xion.io,2016-02-21:post/code/python-pip-requirements.html</id><summary type="html">&lt;p&gt;In this post I&amp;#8217;ll describe all (hopefully all!) the various ways you can specify a single dependency for a Python&amp;nbsp;package.&lt;/p&gt;
&lt;p&gt;This assumes &lt;em&gt;pip&lt;/em&gt; is used for installation. The list of dependencies then goes either in &lt;code&gt;install_requires=&lt;/code&gt;
parameter of the &lt;code&gt;setup&lt;/code&gt; function within &lt;em&gt;setup.py&lt;/em&gt;, or as a separate &lt;em&gt;requirements.txt&lt;/em&gt; file. Commonly, it will actually
go in both places, with the latter being the canonical source of&amp;nbsp;truth:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;setuptools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;requirements.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;rf&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="c"&gt;# ...&lt;/span&gt;
        &lt;span class="n"&gt;install_requires&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;rf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readlines&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;More details about this approach can be found in
&lt;a href="http://xion.org.pl/2014/01/27/anathomy-of-a-python-package/"&gt;one of my previous posts&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here, I will concentrate on the format of a single line in &lt;em&gt;requirements.txt&lt;/em&gt; that defines a dependency.
There are numerous variants that &lt;em&gt;pip&lt;/em&gt; supports, and they are all described in excruciating detail in
&lt;a href="https://www.python.org/dev/peps/pep-0440/"&gt;&lt;span class="caps"&gt;PEP&lt;/span&gt; 440&lt;/a&gt;. This post shall serve as a short reference on the most useful&amp;nbsp;ones.&lt;/p&gt;
&lt;h4&gt;Package name (and&amp;nbsp;version)&lt;/h4&gt;
&lt;p&gt;The simplest and most common option is to identify a dependency by its package&amp;nbsp;name:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;SQLAlchemy
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will locate it in a global index of packages, which is sometimes called a &amp;#8220;cheese shop&amp;#8221;. Currently,
by far the most popular package registry for Python is &lt;a href="https://pypi.python.org"&gt;PyPI&lt;/a&gt;, and &lt;em&gt;pip&lt;/em&gt; uses it by default&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Without any further modifiers, &lt;em&gt;pip&lt;/em&gt; will download and install the &amp;#8220;current&amp;#8221; version of the package &amp;#8212; either the newest,
or the one designated explicitly by a maintainer. This obviously makes the dependency somewhat unpredictable,
for it can mean unintended upgrades that introduce breaking changes to your&amp;nbsp;code.&lt;/p&gt;
&lt;p&gt;To prevent this, you&amp;#8217;d normally &lt;em&gt;pin&lt;/em&gt; the dependency to an exact version&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;SQLAlchemy==0.9.10
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Other comparison operators are also&amp;nbsp;available:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;SQLAlchemy&amp;gt;=0.9.10
SQLAlchemy&amp;lt;1.0.0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and can even be&amp;nbsp;combined:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;SQLAlchemy&amp;gt;=0.9,&amp;lt;1.0.0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Specs like that will make &lt;em&gt;pip&lt;/em&gt; find the newest version that&amp;#8217;s within given range. Assuming your dependency follows
the &lt;a href="http://semver.org/"&gt;semantic versioning&lt;/a&gt; scheme, this will allow you to stay on top of any minor bugfixes
and improvements to an older release (0.9.x here), without the risk of accidentally upgrading to a new one (1.x)
that your code is not compatible with&amp;nbsp;yet.&lt;/p&gt;
&lt;h4&gt;Repository &lt;span class="caps"&gt;URL&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;Sometimes you want to live on the bleeding edge, though, and depend not just on the latest &lt;em&gt;release&lt;/em&gt;,
but the head &lt;em&gt;commit&lt;/em&gt; to the package&amp;#8217;s repository. This makes sense especially in large systems
that are distributed among multiple repos, and where development happens in&amp;nbsp;lockstep.&lt;/p&gt;
&lt;p&gt;For those occasions, and a few others, &lt;em&gt;pip&lt;/em&gt; can recognize direct repository URLs. They are in the&amp;nbsp;format:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$VCS+$PROTOCOL://$URL@$LABEL#egg=$PACKAGE
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;where the &lt;code&gt;$PROTOCOL&lt;/code&gt; part can be optional if the version control system has a default there. That&amp;#8217;s for example
the case for &lt;code&gt;git&lt;/code&gt;, which is of course the most important &lt;span class="caps"&gt;VCS&lt;/span&gt; you&amp;#8217;d be interested in&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git://git.example.com/somepackage#egg=somepackage
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that the &lt;code&gt;#egg=$PACKAGE&lt;/code&gt; part is not a part of the &lt;code&gt;$URL&lt;/code&gt;, and it&amp;#8217;s only there to give a local name for the package
distribution. This is what makes it possible to refer to it later via &lt;em&gt;pip&lt;/em&gt;, if only to remove it with
&lt;code&gt;pip uninstall $PACKAGE&lt;/code&gt;.
Of course, the sanest practice is to use the PyPI moniker if&amp;nbsp;possible.&lt;/p&gt;
&lt;p&gt;When no &lt;code&gt;$LABEL&lt;/code&gt; is given, &lt;em&gt;pip&lt;/em&gt; will use the &lt;span class="caps"&gt;HEAD&lt;/span&gt;, trunk, tip, or the equivalent default/current revision from the repo.
Often though (at least in case of Git), you would also pick a branch, tag, or even a particular &lt;em&gt;commit hash&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git+https://github.com/Xion/unmatcher.git@0.1.3.1#egg=unmatcher
git+ssh://github.com/You/yourpackage.git@master#egg=yourpackage
git+https://github.com/mitsuhiko/jinja2.git@5b498453b5898257b2287f14ef6c363799f1405a#egg=Jinja2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The last two options could be a good choice even with third party packages, when you don&amp;#8217;t want to wait for a new PyPI
release to get a necessary feature or an urgent bug&amp;nbsp;fix.&lt;/p&gt;
&lt;h4&gt;Local&amp;nbsp;filesystem&lt;/h4&gt;
&lt;p&gt;Lastly, you can ask &lt;em&gt;pip&lt;/em&gt; to install a package from a local directory or archive. The former option is often used
with the &lt;code&gt;-e&lt;/code&gt; (&lt;code&gt;--editable&lt;/code&gt;) flag for &lt;code&gt;pip install&lt;/code&gt;. This installs the package in the so-called &lt;em&gt;development mode&lt;/em&gt;,
allowing you to edit its source code&amp;nbsp;in-place:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ pip install -e /home/me/Code/myotherpackage
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You almost certainly don&amp;#8217;t want to put this line in &lt;em&gt;requirements.txt&lt;/em&gt;: you should still be pulling the other package
from PyPI. But if it&amp;#8217;s your own one  &amp;#8212; maybe a self-contained utility library used by your main program &amp;#8212;
this setup will be very helpful for making changes to it, informed by your own usage of the&amp;nbsp;package.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;This can be changed with &lt;code&gt;--index_url&lt;/code&gt; flag to &lt;code&gt;pip install&lt;/code&gt;. Running local indexes is a good practice
for Python shops, especially those that rely on &lt;code&gt;pip install&lt;/code&gt; as part of their deployment process.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;If the package uses &lt;a href="http://semver.org/"&gt;semantic versioning&lt;/a&gt;, a possible alternative to &lt;code&gt;==&lt;/code&gt; is &lt;code&gt;~=&lt;/code&gt;,
which means &amp;#8220;compatible&amp;#8221; version. The precise meaning of this is
&lt;a href="https://www.python.org/dev/peps/pep-0440/#compatible-release"&gt;somewhat complicated&lt;/a&gt;, but it roughly means that upgrades
are permitted as long as nothing in the public interface changes.&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;&lt;a href="https://pip.pypa.io/en/latest/reference/pip_install/#vcs-support"&gt;Other options&lt;/a&gt; include &lt;code&gt;hg&lt;/code&gt; (Mercurial),
&lt;code&gt;svn&lt;/code&gt;, and &lt;code&gt;bzr&lt;/code&gt; (Bazaar).&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="Python"></category><category term="pip"></category><category term="packages"></category><category term="dependencies"></category></entry></feed>