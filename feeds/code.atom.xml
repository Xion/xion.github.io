<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Karol Kuczmarski's Blog</title><link href="http://xion.io/" rel="alternate"></link><link href="http://xion.io/feeds/code.atom.xml" rel="self"></link><id>http://xion.io/</id><updated>2016-12-17T19:09:00+01:00</updated><entry><title>Simulating exceptions in Rust with IIFE</title><link href="http://xion.io/post/code/rust-iife.html" rel="alternate"></link><updated>2016-12-17T19:09:00+01:00</updated><author><name>Karol Kuczmarski</name></author><id>tag:xion.io,2016-12-17:post/code/rust-iife.html</id><summary type="html">&lt;p&gt;While many languages use exceptions for handling errors,
Rust prefers a slightly different, yet very classical approach: &lt;em&gt;return values&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Now, they aren&amp;#8217;t exactly the same thing as in C,
where the error is indicated by a special value within the same return type.
In Rust, &lt;a href="https://doc.rust-lang.org/std/result/"&gt;the &lt;code&gt;Result&lt;/code&gt; enum&lt;/a&gt; can neatly separate the two,
in similar vein to how ad-hoc tuples in Go do&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;.
But unlike Go, Rust also offers additional facilities for &lt;em&gt;error propagation&lt;/em&gt;,
including the &lt;a href="https://doc.rust-lang.org/std/macro.try.html"&gt;&lt;code&gt;try!&lt;/code&gt; macro&lt;/a&gt;
and &lt;a href="https://m4rw3r.github.io/rust-questionmark-operator"&gt;the recently stabilized &lt;code&gt;?&lt;/code&gt; operator&lt;/a&gt;.
And finally,
the &lt;code&gt;Result&lt;/code&gt; wrappings can be straightforwardly &lt;a href="https://doc.rust-lang.org/std/result/enum.Result.html#method.unwrap"&gt;unpacked&lt;/a&gt;,
possibly by &lt;a href="https://doc.rust-lang.org/std/result/enum.Result.html#method.unwrap_or"&gt;defaulting&lt;/a&gt; to a known safe&amp;nbsp;value.&lt;/p&gt;
&lt;p&gt;Some conveniences of exceptions may be hard to pass up, though.
The &lt;code&gt;try&lt;/code&gt;-&lt;code&gt;catch&lt;/code&gt; construct is evidently one of them,
and Rust might eventually get it in
&lt;a href="https://github.com/rust-lang/rfcs/blob/master/text/0243-trait-based-exception-handling.md"&gt;one form&lt;/a&gt;
or another.
Before that happens, however, there is a trick that can often work as an acceptable&amp;nbsp;substitute.&lt;/p&gt;
&lt;h4&gt;Many &lt;code&gt;let&lt;/code&gt;s&lt;/h4&gt;
&lt;p&gt;Here&amp;#8217;s an example where it can be very&amp;nbsp;useful.&lt;/p&gt;
&lt;p&gt;Have a look at the following function.
Its purpose is to retrieve a GitHub login of a user who owns a specific &lt;em&gt;gist&lt;/em&gt;
&amp;#8212; a small sample of code posted to the &lt;em&gt;gists.github.com&lt;/em&gt; website&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s assume we have already talked to GitHub &lt;span class="caps"&gt;API&lt;/span&gt;
and received the following &lt;span class="caps"&gt;JSON&lt;/span&gt; response from its relevant&amp;nbsp;endpoint:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;12345678&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;owner&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;login&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Octocat&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="err"&gt;...&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="err"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Parsing it is easy: we can do it with
the &lt;a href="https://crates.io/crates/rustc-serialize"&gt;&lt;em&gt;rustc_serialize&lt;/em&gt; crate&lt;/a&gt;,
among other options.
What proves a little more involved is to dig through the &lt;span class="caps"&gt;JSON&lt;/span&gt; tree
in order to reach the interesting&amp;nbsp;value:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;rustc_serialize&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Json&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;


&lt;span class="c-Doc"&gt;/// Retrieve the gist owner from a JSON received from&lt;/span&gt;
&lt;span class="c-Doc"&gt;/// the /gists/$ID endpoint of the GitHub API.&lt;/span&gt;
&lt;span class="c-Doc"&gt;///&lt;/span&gt;
&lt;span class="c-Doc"&gt;/// If the gist is anonymous, &amp;quot;anonymous&amp;quot; is returned.&lt;/span&gt;
&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;gist_owner_from_info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;Json&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_object&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;owner&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;and_then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_object&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;login&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;and_then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_string&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_owned&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;anonymous&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;into&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Whew! I guess we&amp;#8217;re lucky we don&amp;#8217;t need to go &lt;em&gt;too&lt;/em&gt; deep into that &lt;span class="caps"&gt;JSON&lt;/span&gt;.
The code is clearly exhibiting a rightward slant,
which some people refer to as &lt;a href="https://blog.codinghorror.com/flattening-arrow-code/"&gt;the &amp;#8220;arrow code&amp;#8221;&lt;/a&gt;,
Unsurprisingly, it is generally considered bad for&amp;nbsp;readability.&lt;/p&gt;
&lt;p&gt;There are few other ways of writing this, of course,
including a style reminiscent of JavaScript promises &amp;#8212;
that is, relying completely on
&lt;a href="https://doc.rust-lang.org/std/option/enum.Option.html#method.and_then"&gt;the &lt;code&gt;and_then&lt;/code&gt; method&lt;/a&gt;.
Neither seem very satisfying, though, especially if you compare it with something like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;owner&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;login&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;KeyError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;anonymous&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Yes, exceptions are quite useful&amp;nbsp;sometimes.&lt;/p&gt;
&lt;p&gt;So, how can we get something like this in&amp;nbsp;Rust?&lt;/p&gt;
&lt;h4&gt;JavaScript for the&amp;nbsp;rescue&lt;/h4&gt;
&lt;p&gt;Succor comes from an unexpected direction.
To emulate exceptions &amp;#8212; specifically, the &lt;code&gt;try&lt;/code&gt;-&lt;code&gt;catch&lt;/code&gt; exception blocks &amp;#8212;
we can utilize a technique that is most popular in&amp;#8230;&amp;nbsp;JavaScript.&lt;/p&gt;
&lt;p&gt;At least until &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let"&gt;recently&lt;/a&gt;,
JavaScript did not have a block local scope.
Since every &lt;code&gt;var&lt;/code&gt;iable declaration within a function is &lt;em&gt;hoisted&lt;/em&gt; to the top of that function,
it essentially makes function scope the only usable one (besides global, of&amp;nbsp;course).&lt;/p&gt;
&lt;p&gt;As a result, a variety of JavaScript idioms rely on introducing &amp;#8220;superfluous&amp;#8221; &lt;code&gt;function&lt;/code&gt;s,
solely for the purpose of creating a nested scope.
Many times, those functions are neither named nor stored in any variable;
rather, they are &lt;em&gt;immediately invoked&lt;/em&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is what is commonly understood as Immediately Invoked Function Expression,
or &lt;span class="caps"&gt;IIFE&lt;/span&gt; for&amp;nbsp;short.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;An oft-cited example involves an &lt;span class="caps"&gt;IIFE&lt;/span&gt; which itself returns another&amp;nbsp;function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;$para&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;p#&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// &amp;lt;p id=&amp;quot;0&amp;quot;&amp;gt;, &amp;lt;p id=&amp;quot;1&amp;quot;&amp;gt;, etc.&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;clickHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="c1"&gt;// IIFE!&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Clicked element no. &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;})(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;$para&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;click&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;clickHandler&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The function expression is necessary here,
because it allows to control what exactly goes into the &lt;em&gt;closure&lt;/em&gt; of the inner function.
If the &lt;code&gt;clickHandler&lt;/code&gt;s were assigned the &lt;code&gt;function() { alert(...) }&lt;/code&gt; expression directly,
they would all close over the same loop counter variable.
All would then display the exact same&amp;nbsp;message.&lt;/p&gt;
&lt;p&gt;We don&amp;#8217;t need to employ those workarounds in Rust.
Thanks to local scoping,
a simple pair of &lt;code&gt;{&lt;/code&gt; bracers &lt;code&gt;}&lt;/code&gt; would work exactly the same.
You can imagine a direct rewrite of the above example, though,
where an anonymous closure is used to similar&amp;nbsp;effect:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// WARNING: Not idiomatic! (Also not a real DOM library).&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;para&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dom&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_string&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="n"&gt;unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;click_handler&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Event&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dom&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exec_js&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;alert(&amp;#39;Clicked element no. #{}&amp;#39;);&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;para&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_event_listener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Event&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Click&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;click_handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In other words, Rust supports IIFEs just&amp;nbsp;fine.&lt;/p&gt;
&lt;h4&gt;Just put a function on&amp;nbsp;it&lt;/h4&gt;
&lt;p&gt;Okay, this is quite amusing and probably pretty neat.
But does it help us with the error handling story&amp;nbsp;exactly?&amp;#8230;&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s take another stab at rewriting the &lt;code&gt;gist_owner_from_info&lt;/code&gt; routine.
This time, we&amp;#8217;ll extract the meaty part into a separate function.
We will also take advantage of one trivial,
but very useful &lt;a href="https://crates.io/crates/try_opt"&gt;&lt;em&gt;try_opt&lt;/em&gt; crate&lt;/a&gt;
which is essentially an equivalent of the &lt;code&gt;try!&lt;/code&gt; macro for &lt;code&gt;Option&lt;/code&gt;s:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#[macro_use]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;extern&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;crate&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;try_opt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;gist_owner_from_info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;Json&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;gist_owner_from_info_internal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;unwrap_or&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;anonymous&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;into&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;gist_owner_from_info_internal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;Json&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;try_opt&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_object&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;owner&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;try_opt&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;owner&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;and_then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_object&lt;/span&gt;&lt;span class="p"&gt;()));&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;try_opt&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;login&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;and_then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_string&lt;/span&gt;&lt;span class="p"&gt;()));&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_owned&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now this should be a little easier on the eyes.
(And if you want, you can eschew &lt;code&gt;and_then&lt;/code&gt; completely in favor of more &lt;code&gt;try_opt!&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;The downside is that we now have this &lt;code&gt;_internal&lt;/code&gt; function
that&amp;#8217;s awkwardly sticking out.
We could pull it in, and turn it into an &lt;em&gt;inner&lt;/em&gt; function, but why stop half-way?
Let&amp;#8217;s just make it an &lt;span class="caps"&gt;IIFE&lt;/span&gt;&amp;nbsp;already:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;gist_owner_from_info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;Json&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;try_opt&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_object&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;owner&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;try_opt&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;owner&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;and_then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_object&lt;/span&gt;&lt;span class="p"&gt;()));&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;try_opt&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;login&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;and_then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_string&lt;/span&gt;&lt;span class="p"&gt;()));&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nb"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_owned&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}().&lt;/span&gt;&lt;span class="n"&gt;unwrap_or&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;anonymous&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;into&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Not bad, eh? The analogies with exception handling should be pretty evident, too&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The closure itself works as a &lt;code&gt;try&lt;/code&gt; block, with closure&amp;#8217;s body containing the &amp;#8220;guarded&amp;#8221;&amp;nbsp;code.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;unwrap&lt;/code&gt; family of methods (especially &lt;code&gt;unwrap_or_else&lt;/code&gt;) dubs for a &lt;code&gt;catch&lt;/code&gt;/&lt;code&gt;except&lt;/code&gt; section.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sure, we do need &lt;code&gt;try!&lt;/code&gt; (or &lt;code&gt;try_opt!&lt;/code&gt;) macros to mark instructions
that may &amp;#8220;throw an exception&amp;#8221;, but with the &lt;code&gt;?&lt;/code&gt;-based syntax it shouldn&amp;#8217;t be too big of a deal.
And when the time comes, this code will be very easy to port to a
&lt;a href="https://github.com/rust-lang/rfcs/blob/master/text/0243-trait-based-exception-handling.md"&gt;trait-based exception handling&lt;/a&gt;
solution that&amp;#8217;s currently in the&amp;nbsp;works.&lt;/p&gt;
&lt;p&gt;Oh, and the best part? Both Rust and the underlying &lt;span class="caps"&gt;LLVM&lt;/span&gt; are very adept at
&lt;a href="https://ruudvanasseldonk.com/2016/11/30/zero-cost-abstractions"&gt;inlining closures&lt;/a&gt;,
so everything here should compile to optimal&amp;nbsp;code.&lt;/p&gt;
&lt;h4&gt;Bonus: a lifetime&amp;nbsp;conundrum&lt;/h4&gt;
&lt;p&gt;Well, &lt;em&gt;almost&lt;/em&gt; optimal.
There is one more thing left to do before we can call this a truly &lt;em&gt;zero-cost&lt;/em&gt;&amp;nbsp;abstraction.&lt;/p&gt;
&lt;p&gt;We need to stop allocating so damn&amp;nbsp;much!&lt;/p&gt;
&lt;p&gt;It should be pretty obvious that
the function doesn&amp;#8217;t need to create a brand new &lt;code&gt;String&lt;/code&gt; every time it&amp;#8217;s called.
The text is in the input &lt;code&gt;Json&lt;/code&gt;, and we take that &lt;code&gt;Json&lt;/code&gt; by reference already.
It&amp;#8217;s only fair we stop creating &lt;code&gt;String&lt;/code&gt;s and simply return a &lt;code&gt;&amp;amp;str&lt;/code&gt; reference&amp;nbsp;instead.&lt;/p&gt;
&lt;p&gt;In fact, this should be as easy as removing the &lt;code&gt;to_owned&lt;/code&gt;/&lt;code&gt;into&lt;/code&gt; calls,&amp;nbsp;right?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;gist_owner_from_info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;Json&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="kt"&gt;str&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;amp;&lt;/span&gt;&lt;span class="kt"&gt;str&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;try_opt&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_object&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;owner&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;try_opt&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;owner&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;and_then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_object&lt;/span&gt;&lt;span class="p"&gt;()));&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;login&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;and_then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_string&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}().&lt;/span&gt;&lt;span class="n"&gt;unwrap_or&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;anonymous&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Wrong, apparently. If you present this code to the compiler,
it will serve you quite a mouthful of an error,
including helpful tidbits in the vein of &amp;#8220;expected A, found&amp;nbsp;A&amp;#8221;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;error[E0495]: cannot infer an appropriate lifetime for autoref due to conflicting requirements
   --&amp;gt; src/github.rs:3:34
    |
  3 |         let info = try_opt!(info.as_object());
    |                                  ^^^^^^^^^
    |
note: first, the lifetime cannot outlive the anonymous lifetime #1 defined on the block at 1:45...
   --&amp;gt; src/github.rs:1:46
    |
  1 | fn gist_owner_from_info(info: &amp;amp;Json) -&amp;gt; &amp;amp;str {
    |                                              ^
note: ...so that reference does not outlive borrowed content
   --&amp;gt; src/github.rs:3:29
    |
  3 |         let info = try_opt!(info.as_object());
    |                             ^^^^
note: but, the lifetime must be valid for the anonymous lifetime #1 defined on the block at 2:23...
   --&amp;gt; src/github.rs:2:24
    |
  2 |     || -&amp;gt; Option&amp;lt;&amp;amp;str&amp;gt; {
    |                        ^
note: ...so that expression is assignable (expected std::option::Option&amp;lt;&amp;amp;str&amp;gt;, found std::option::Option&amp;lt;&amp;amp;str&amp;gt;)
   --&amp;gt; src/github.rs:5:9
    |
  5 |         owner.get(&amp;quot;login&amp;quot;).and_then(|l| l.as_string())
    |
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The crux of this verbiage is that the Rust compiler is unable to reconcile the lifetime
of the closure&amp;#8217;s return value, the input, and final result of the&amp;nbsp;function.&lt;/p&gt;
&lt;p&gt;It shouldn&amp;#8217;t really be trying very hard, though, for the lifetime is obvious.
It&amp;#8217;s the same as the one implicitly attached to the input &lt;code&gt;&amp;amp;Json&lt;/code&gt;.
Seems like in this case, we need to be a little more helpful and label it&amp;nbsp;explicitly:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;gist_owner_from_info&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nl"&gt;&amp;#39;i&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;&amp;#39;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Json&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;&amp;#39;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;str&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;&amp;#39;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;str&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// (rest as before)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Voila, this should now compile without any&amp;nbsp;issues.&lt;/p&gt;
&lt;p&gt;Once again, &amp;#8220;Keep calm and add more &lt;code&gt;'lifetimes&lt;/code&gt;&amp;#8221; proves to be an effective approach&amp;nbsp;;)&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Technically, they aren&amp;#8217;t called tuples there but
&amp;#8220;&lt;a href="https://golang.org/doc/effective_go.html#multiple-returns"&gt;multiple return values&lt;/a&gt;&amp;#8220;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;This is something I needed to do when rewriting
&lt;a href="https://github.com/Xion/gisht"&gt;this Python project of mine&lt;/a&gt; to Rust.&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;This is also the closest Rust can currently get to a &lt;code&gt;do&lt;/code&gt; notation from Haskell,
at least without any macro-based hacks.&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="Rust"></category><category term="IIFE"></category><category term="error handling"></category><category term="exceptions"></category><category term="closures"></category><category term="lambdas"></category></entry><entry><title>Optional arguments in Rust 1.12</title><link href="http://xion.io/post/code/rust-optional-args.html" rel="alternate"></link><updated>2016-09-29T19:51:00-07:00</updated><author><name>Karol Kuczmarski</name></author><id>tag:xion.io,2016-09-29:post/code/rust-optional-args.html</id><summary type="html">&lt;p&gt;Today&amp;#8217;s &lt;a href="https://blog.rust-lang.org/2016/09/29/Rust-1.12.html"&gt;announcement of Rust 1.12&lt;/a&gt; contains,
among other things, this innocous little&amp;nbsp;tidbit:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Option&lt;/code&gt; implements &lt;code&gt;From&lt;/code&gt; for its contained&amp;nbsp;type&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you&amp;#8217;re not very familiar with it,
&lt;code&gt;From&lt;/code&gt; is a basic &lt;a href="https://doc.rust-lang.org/std/convert/trait.From.html"&gt;converstion trait&lt;/a&gt;
which any Rust type can implement.
By doing so, it defines how to create its values &lt;em&gt;from&lt;/em&gt; some other type &amp;#8212; hence its&amp;nbsp;name.&lt;/p&gt;
&lt;p&gt;Perhaps the most widespread application of this trait (and its &lt;code&gt;from&lt;/code&gt; method)
is allocating owned &lt;code&gt;String&lt;/code&gt; objects from literal &lt;code&gt;str&lt;/code&gt; values:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello, world!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What the change above means is that we can do similar thing with the &lt;code&gt;Option&lt;/code&gt; type:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;maybe_int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;At a first glance, this doesn&amp;#8217;t look like a big deal at all.
For one, this syntax is much more wordy than the traditional &lt;code&gt;Some(42)&lt;/code&gt;,
so it&amp;#8217;s not very clear what benefits it&amp;nbsp;offers.&lt;/p&gt;
&lt;p&gt;But this first impression is rather deceptive.
In many cases, this change can actually &lt;em&gt;reduce&lt;/em&gt; the number of times we have to type &lt;code&gt;Some(x)&lt;/code&gt;,
allowing us to replace it with just &lt;code&gt;x&lt;/code&gt;.
That&amp;#8217;s because this new &lt;code&gt;impl&lt;/code&gt; brings Rust quite a bit closer to having &lt;em&gt;optional function arguments&lt;/em&gt;
as a first class feature in the&amp;nbsp;language.&lt;/p&gt;
&lt;p&gt;Until now, a function defined like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;maybe_plus_5&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unwrap_or&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;was the closest Rust had to default argument values.
While this works perfectly &amp;#8212; and is bolstered by compile-time checks! &amp;#8212;
callers are unfortunately required to build the &lt;code&gt;Option&lt;/code&gt; objects&amp;nbsp;manually:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;maybe_plus_5&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// OK&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;maybe_plus_5&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;None&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;// OK&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;maybe_plus_5&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// error!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; implements &lt;code&gt;From&amp;lt;T&amp;gt;&lt;/code&gt;, however, this can change for the better.
&lt;em&gt;Much&lt;/em&gt; better, in fact, for the last line above can be made valid.
All that is necessary is to take advantage of this new &lt;code&gt;impl&lt;/code&gt; in the function&amp;nbsp;definition:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;maybe_plus_5&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;From&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;unwrap_or&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Unfortunately, this results in quite a bit of complexity,
up to and including the &lt;code&gt;where&lt;/code&gt; clause: a telltale sign of convoluted, generic code.
Still, this trade-off may be well worth it,
as a function defined once can be called many times throughout the code base,
and possibly across multiple crates if it&amp;#8217;s a part of the public &lt;span class="caps"&gt;API&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;But we can do better than this.
Indeed, using the &lt;code&gt;From&lt;/code&gt; trait to constrain argument types is just complicating things for no good reason.
What we should so instead is use the symmetrical trait, &lt;a href="https://doc.rust-lang.org/std/convert/trait.Into.html"&gt;&lt;code&gt;Into&lt;/code&gt;&lt;/a&gt;,
and take advantage of its standard &lt;code&gt;impl&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;impl&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;U&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Into&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;U&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;U&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;From&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once we translate it to the &lt;code&gt;Option&lt;/code&gt; case (now that &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; implements &lt;code&gt;From&amp;lt;T&amp;gt;&lt;/code&gt;),
we can switch the trait bounds around and get rid of the &lt;code&gt;where&lt;/code&gt; clause&amp;nbsp;completely:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;maybe_plus_5&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Into&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;into&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;unwrap_or&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As a small bonus, the function body has also gotten a little&amp;nbsp;simpler.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;So, should you go wild and change all your functions taking &lt;code&gt;Option&lt;/code&gt;als to look like this?&amp;#8230;
Well, technically you can, although the benefits may not outweigh the downsides
for small, private functions that are called&amp;nbsp;infrequently.&lt;/p&gt;
&lt;p&gt;On the other hand, if you can afford to only support Rust 1.12 and up,
this technique can make it much more pleasant to use the external &lt;span class="caps"&gt;API&lt;/span&gt; of your&amp;nbsp;crates.&lt;/p&gt;
&lt;p&gt;What&amp;#8217;s best is the &lt;em&gt;full backward compatibility&lt;/em&gt; with any callers that still pass &lt;code&gt;Some(x)&lt;/code&gt;:
for them, the old syntax will continue to work exactly like before.
Also note that the Rust compiler is smart about eliding the no-op conversion calls like the &lt;code&gt;Into::into&lt;/code&gt; above,
so you shouldn&amp;#8217;t observe any changes in the performance department&amp;nbsp;either.&lt;/p&gt;
&lt;p&gt;And who knows, maybe at some point Rust makes the final leap, and allows skipping the &lt;code&gt;None&lt;/code&gt;s?&amp;#8230;&lt;/p&gt;</summary><category term="Rust"></category><category term="arguments"></category><category term="parameters"></category><category term="functions"></category></entry><entry><title>Flappy Bird in 1234 bytes of Bash</title><link href="http://xion.io/post/code/bash-flappy-bird.html" rel="alternate"></link><updated>2016-08-25T22:07:00-07:00</updated><author><name>Karol Kuczmarski</name></author><id>tag:xion.io,2016-08-25:post/code/bash-flappy-bird.html</id><summary type="html">&lt;p&gt;Contrary to an infamous opinion from a bygone era,
&lt;span class="caps"&gt;640KB&lt;/span&gt; is not really sufficient for anyone anymore.
A typical website exceeds that easily,
and executable programs are usually measured in&amp;nbsp;megabytes.&lt;/p&gt;
&lt;p&gt;But what if you only had 1234 &lt;em&gt;bytes&lt;/em&gt; to work&amp;nbsp;with?&amp;#8230;&lt;/p&gt;
&lt;p&gt;A friend of mine, &lt;a href="http://gynvael.coldwind.pl/?blog=1&amp;amp;lang=en"&gt;Gynvael Coldwind&lt;/a&gt;,
organized a game programming compo&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; that had precisely this limitation.
Unlike most demoscene ones, however, the size limit here
applies to either the final binary &lt;em&gt;or&lt;/em&gt; its source code.
This can be chosen at the participant&amp;#8217;s&amp;nbsp;discretion.&lt;/p&gt;
&lt;p&gt;Since my currently favorite compiled language produces
&lt;a href="https://lifthrasiir.github.io/rustlog/why-is-a-rust-executable-large.html"&gt;the exact opposite of small binaries&lt;/a&gt;,
I was quite intrigued by the source code option.
But as the rules say, the final game must run
on a &lt;em&gt;clean&lt;/em&gt; installation (only standard packages) of either Windows or Ubuntu Linux.
The choice of viable languages and technologies was therefore rather&amp;nbsp;limited.&lt;/p&gt;
&lt;p&gt;It was time to get &lt;em&gt;a little&lt;/em&gt;&amp;nbsp;creative.&lt;/p&gt;
&lt;h4&gt;Game&amp;nbsp;theory&lt;/h4&gt;
&lt;p&gt;What must an environment provide to be a suitable platform for game development?
Not much, really. We only need to be able&amp;nbsp;to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;put stuff on the&amp;nbsp;screen&lt;/li&gt;
&lt;li&gt;react to user&amp;nbsp;input&lt;/li&gt;
&lt;li&gt;execute time-dependent&amp;nbsp;logic&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You could arguably get away without the last one,
but the kind of games you would end up with
had gone out of fashion about &lt;a href="https://en.wikipedia.org/wiki/Zork"&gt;half a century ago&lt;/a&gt;.
For the &amp;#8220;real&amp;#8221; arcade games, we really ought to run our code at least a dozen times per&amp;nbsp;second.&lt;/p&gt;
&lt;p&gt;There&amp;#8217;s only a handful of standard technologies that allow all of this out of the&amp;nbsp;box.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m a wee bit out of touch with Windows these days
but on Linux, there&amp;#8217;s one thing that I really wanted to take for a serious spin.
And luckily for me, it also has one extremely terse language to go hand in hand&amp;nbsp;with.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m talking, of course, about the &lt;strong&gt;&lt;span class="caps"&gt;ANSI&lt;/span&gt; terminal&lt;/strong&gt; that can be scripted in Bash.
If there ever was anything that worked anywhere by default,
then this got to be it&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h4&gt;&amp;#8230;put into&amp;nbsp;practice&lt;/h4&gt;
&lt;p&gt;Note that I&amp;#8217;ve stressed the &amp;#8220;terminal&amp;#8221; part.
The shell itself is a neat instrument,
but (perhaps surprisingly) it doesn&amp;#8217;t actually concern itself
with displaying anything on the&amp;nbsp;screen.&lt;/p&gt;
&lt;p&gt;This has traditionally been the job of a &lt;em&gt;terminal emulator&lt;/em&gt;.
To this end, it has a couple of &lt;a href="http://wiki.bash-hackers.org/scripting/terminalcodes"&gt;special codes&lt;/a&gt;
that are undoubtedly useful for an aspiring indie shell game developer.
They are what allows us to display things in a specific position on the screen,
complete with chosen color, background color, and (text)&amp;nbsp;style.&lt;/p&gt;
&lt;p&gt;So this nails down our first requisite&amp;nbsp;feature.&lt;/p&gt;
&lt;p&gt;As for the second one, the vanilla &lt;a href="http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_08_02.html"&gt;&lt;code&gt;read&lt;/code&gt; command&lt;/a&gt;
supports everything we may need for handling user input.
The only real &amp;#8220;trick&amp;#8221; is passing the &lt;code&gt;-n&lt;/code&gt; flag
which makes it wait for a specific number of characters (e.g. one)
rather than a whole line ending with &lt;em&gt;Enter&lt;/em&gt;.
Add a few more flags &amp;#8212; like the one that prevents text from being echoed back to the console &amp;#8212;
and you can make a rudimentary input&amp;nbsp;loop:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;KEY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; :&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="nb"&gt;read&lt;/span&gt; -rsn &lt;span class="m"&gt;1&lt;/span&gt; KEY
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I can imagine, however, that you&amp;#8217;d want to do other things besides just waiting for input.
Stuff like &amp;#8220;updating the game state&amp;#8221; and &amp;#8220;drawing the next frame&amp;#8221;
is generally considered pretty important in&amp;nbsp;games.&lt;/p&gt;
&lt;p&gt;Normally, we would deal with those things in between checking for input events,
leading to a particular structure of the so-called &lt;a href="http://gameprogrammingpatterns.com/game-loop.html"&gt;real-time loop&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But the shell doesn&amp;#8217;t really handle input via &amp;#8220;events&amp;#8221;.
Instead, you just ask for some text and wait until you get it.
There is no &amp;#8220;peek mode&amp;#8221; that&amp;#8217;d allow to squeeze in some rendering logic before the next key&amp;nbsp;press.&lt;/p&gt;
&lt;p&gt;What do we do, then, with a tight loop that leaves us no wiggle&amp;nbsp;room?&amp;#8230;&lt;/p&gt;
&lt;p&gt;Why, we take a crowbar and pry it&amp;nbsp;open!&lt;/p&gt;
&lt;h5&gt;(Don&amp;#8217;t) be&amp;nbsp;alarmed&lt;/h5&gt;
&lt;p&gt;Let&amp;#8217;s start by noticing that to run some code whenever there is nothing else to do
has a rough equivalent of running it &lt;em&gt;periodically&lt;/em&gt;.
This isn&amp;#8217;t an exactly new observation:
the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setTimeout"&gt;&lt;code&gt;setTimeout&lt;/code&gt; function&lt;/a&gt; in JavaScript
has been the basis of &amp;#8220;real-time&amp;#8221; animation
since the 90s era of falling snowflakes, and up to the contemporary browser games&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Neither does the shell nor the hosting terminal support anything like &lt;code&gt;setTimeout&lt;/code&gt;, though.
But fortunately, they don&amp;#8217;t need to: Linux itself does.
And it accomplishes it quite effortlessly, due to the sole fact of &lt;em&gt;being an operating system&lt;/em&gt;.
All we have to do is access some of its capabilities directly from the shell&amp;nbsp;script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;KEY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;DT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0.05  &lt;span class="c"&gt;# timeout value in seconds&lt;/span&gt;

tick&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;# .. do stuff ...&lt;/span&gt;
    &lt;span class="o"&gt;(&lt;/span&gt; sleep &lt;span class="nv"&gt;$DT&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;kill &lt;/span&gt;ALRM &lt;span class="nv"&gt;$$&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="nb"&gt;trap &lt;/span&gt;tick ALRM
tick
&lt;span class="k"&gt;while&lt;/span&gt; :&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="nb"&gt;read&lt;/span&gt; -rsn &lt;span class="m"&gt;1&lt;/span&gt; KEY
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What we&amp;#8217;re doing here is set up the &lt;code&gt;tick&lt;/code&gt; function to be
a &lt;em&gt;&lt;a href="https://en.wikipedia.org/wiki/Unix_signal"&gt;signal&lt;/a&gt; handler&lt;/em&gt;.
A callback, if you&amp;nbsp;will.&lt;/p&gt;
&lt;p&gt;Inside of this callback, we can do all the state updates and drawing we need,
as long as we follow it with &amp;#8220;scheduling&amp;#8221; of the next &lt;code&gt;tick&lt;/code&gt; call.
As a direct equivalent of a &lt;code&gt;setTimeout&lt;/code&gt; invocation, this can be done&amp;nbsp;by:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;starting a subshell to run in the background (with &lt;code&gt;&amp;amp;&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;letting it sleep for however long we want to delay the next&amp;nbsp;update&lt;/li&gt;
&lt;li&gt;sending a signal to the main script (&lt;code&gt;kill $$&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The signal we chose is of course &lt;code&gt;SIGALRM&lt;/code&gt;&lt;sup id="fnref:4"&gt;&lt;a class="footnote-ref" href="#fn:4" rel="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt;.
Technically, however, it can be anything,
as long as we can set up a &lt;code&gt;trap&lt;/code&gt; to actually handle&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;In any case, success! Bash is officially a game programming&amp;nbsp;platform!&lt;/p&gt;
&lt;h4&gt;Integration in&amp;nbsp;parts&lt;/h4&gt;
&lt;p&gt;And so having figured out the technicalities,
I was faced with the crucial dilemma: &lt;em&gt;what&lt;/em&gt; game could I actually&amp;nbsp;write?&lt;/p&gt;
&lt;p&gt;Nothing too complicated, that&amp;#8217;s for sure.
After the initial scaffolding has used up about 1/4 of the harsh size limit,
I knew that radical simplicity was the order of the&amp;nbsp;day.&lt;/p&gt;
&lt;p&gt;And so I went for possibly &lt;a href="https://en.wikipedia.org/wiki/Flappy_Bird"&gt;the most trivial game ever&lt;/a&gt;.&lt;/p&gt;
&lt;p style="text-align: center"&gt;
    &lt;img src="https://upload.wikimedia.org/wikipedia/en/5/52/Flappy_Bird_gameplay.png" alt="flap flap"&gt;&lt;/br&gt;
    &lt;small&gt;Sorry, Pong!&lt;/small&gt;
&lt;/p&gt;

&lt;p&gt;Then, after hours of (&lt;em&gt;ahem&lt;/em&gt;) &lt;a href="https://www.flappybird.com/"&gt;meticulous research&lt;/a&gt;,
I managed to reverse-engineer the core&amp;nbsp;mechanic:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;let the bird fall down with a constant&amp;nbsp;acceleration&lt;/li&gt;
&lt;li&gt;to jump, give it some upwards-facing&amp;nbsp;velocity&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Actually &lt;a href="https://github.com/Xion/flappybash/blob/0372ef9173c921ff79c64553974cea0b02c2bb3f/flappybash.sh"&gt;coding this&lt;/a&gt;
in Bash was mostly a matter of finding out how to perform floating-point calculations.
Rather unsurprisingly, this is done through
&lt;a href="https://en.wikipedia.org/wiki/Bc_(programming_language)#Using_bc_in_shell_scripts"&gt;an external program&lt;/a&gt;,
while truncating of the fractional part involves &amp;#8212; wait for it &amp;#8212;
&lt;a href="http://unix.stackexchange.com/a/167059"&gt;&lt;em&gt;string formatting&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Pipe&amp;nbsp;dream&lt;/h4&gt;
&lt;p&gt;Based on the above nuggets of Stack Overflow wisdom,
you&amp;#8217;ve probably figured out that Bash isn&amp;#8217;t exactly what you would call &lt;em&gt;a programming language&lt;/em&gt;.
With a little bit of perseverance, however, we can make it do our bidding&amp;#8230;
&lt;em&gt;some&lt;/em&gt; fraction of the&amp;nbsp;time.&lt;/p&gt;
&lt;p&gt;So far, I had the player character &amp;#8212; a beautiful red rectangle &amp;#8212;
fall down under the constant force of gravity, and maybe ascend if the Space key has been pressed.
But a heroic protagonist necessitates the presence of formidable adversaries,
so my next step was to figure out how to implement this crucial gameplay&amp;nbsp;mechanic.&lt;/p&gt;
&lt;p&gt;Which one?&amp;#8230; Pipes, of&amp;nbsp;course.&lt;/p&gt;
&lt;p&gt;Pipes in &lt;em&gt;Bash&lt;/em&gt;.&lt;/p&gt;
&lt;p style="text-align: center"&gt;
    &lt;img src="http://xion.io/images/irony-sign.jpg" alt="...ahem"&gt;
&lt;/p&gt;

&lt;p&gt;It was pretty evident I&amp;#8217;m gonna need to represent them somehow,
and Bash isn&amp;#8217;t exactly known for its strong repertoire of data structures.
Starting from version 4.0, it does however have &lt;a href="http://tldp.org/LDP/abs/html/arrays.html"&gt;arrays&lt;/a&gt;,
so there is at least something we can work&amp;nbsp;with.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s not get &lt;em&gt;too&lt;/em&gt; carried away, though.
The somewhat obvious idea of mirroring the entire game field in a (pseudo) 2D array
of pipe/not-pipe turned out to be completely unworkable.
The fill rate of most (all?) terminal emulators is nowhere near sufficient
to permit redrawing of the whole screen &lt;em&gt;and&lt;/em&gt; maintaining &lt;span class="caps"&gt;FPS&lt;/span&gt; value above the slideshow&amp;nbsp;threshold.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/Xion/flappybash/commit/467fe6429fa8dcc7005f5324278804243204ec9a"&gt;What I went with instead&lt;/a&gt;
was a 1D array for the pipe itself, and a separate variable to denote its horizontal position.
Working from there, it wasn&amp;#8217;t too hard to
&lt;a href="https://github.com/Xion/flappybash/commit/5e3281e408767eab2ade2fa2f9299fee60681bdc"&gt;make it move&lt;/a&gt;,
and eventually to check for its collision with the player&amp;nbsp;object.&lt;/p&gt;
&lt;h4&gt;Fitting&amp;nbsp;in&lt;/h4&gt;
&lt;p&gt;That, of course,
was &lt;a href="https://github.com/Xion/flappybash/commit/ff3260e1dd5fa61695310578091ff922acf06e71"&gt;the most important milestone&lt;/a&gt;.
&lt;br/&gt;
I added &lt;em&gt;an objective&lt;/em&gt;.&lt;/br&gt;
It was &lt;em&gt;an actual game&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;And I still had about 100 bytes&amp;nbsp;left!&lt;/p&gt;
&lt;p&gt;Speaking of size, this is probably a good moment
to talk about making the most of those meager 1234 bytes.
It&amp;#8217;s not exactly surprising that it was possible mostly thanks to &lt;em&gt;minification&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;While it&amp;#8217;s extremely popular for JavaScript,
the same abundance of minification utilities cannot be expected when it comes of shell scripts.
Still, &amp;#8220;bash minification&amp;#8221; does return some useful search results,
and &lt;a href="http://bash-minifier.appspot.com/"&gt;one of them&lt;/a&gt; is what I used to shrink the final&amp;nbsp;script.&lt;/p&gt;
&lt;p&gt;Obviously, it didn&amp;#8217;t go without some trouble.
Since the minifier does little more than to swap newlines for semicolons,
it got a few bugs that had to be ironed out.
No big deal, really:
a small batch of
&lt;a href="https://github.com/Xion/flappybash/commit/a9556bbef8245bd1ce849e1bffd175412934ef9d"&gt;handcrafted, artisanal Python&lt;/a&gt;
was enough to paper over the&amp;nbsp;issues.&lt;/p&gt;
&lt;p&gt;The other technique you can use to slim down is &lt;em&gt;obfuscation&lt;/em&gt;, i.e.
&lt;a href="https://github.com/Xion/flappybash/commit/f2683785a8049fc385e5c6705f66dbb835ad84bc"&gt;shortening of the identifiers&lt;/a&gt;.
As the minifier didn&amp;#8217;t offer this feature natively, I had to take care of it&amp;nbsp;myself.&lt;/p&gt;
&lt;p&gt;This lead to adding such interesting assignments as this &lt;code&gt;p&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;p&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;printf&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which absolutely shouldn&amp;#8217;t be confused with &lt;em&gt;this&lt;/em&gt; &lt;code&gt;p&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# put text at given position: p $x $y $text&lt;/span&gt;
p&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; -en &lt;span class="s2"&gt;&amp;quot;\e[&lt;/span&gt;&lt;span class="nv"&gt;$2&lt;/span&gt;&lt;span class="s2"&gt;;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;1&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;f&lt;/span&gt;&lt;span class="nv"&gt;$3&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The reason it works is that in &lt;span class="caps"&gt;POSIX&lt;/span&gt; shells,
variables and functions effectively form two separate namespaces.
Their members are thus referred to in two different&amp;nbsp;ways:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;p &lt;span class="nv"&gt;$X&lt;/span&gt; &lt;span class="nv"&gt;$Y&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;\e[1;37;41mB&amp;quot;&lt;/span&gt;  &lt;span class="c"&gt;# call the p() function&lt;/span&gt;
&lt;span class="nv"&gt;$p&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;\e[?25l&amp;quot;&lt;/span&gt;  &lt;span class="c"&gt;# expand the p variable (i.e. call `printf`)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Notice how functions have longer definitions but shorter usage,
while the opposite is true for variables.
Who can now say that Bash doesn&amp;#8217;t find balance in all&amp;nbsp;things?&lt;/p&gt;
&lt;h4&gt;Auditory&amp;nbsp;sensations&lt;/h4&gt;
&lt;p&gt;Like I mentioned before, thanks to those and similar tricks
I had managed to carve out about a hundred or so bytes of free&amp;nbsp;space.&lt;/p&gt;
&lt;p&gt;Now, what could you possibly do with such a staggering&amp;nbsp;amount?&lt;/p&gt;
&lt;p style="text-align: center"&gt;
    &lt;img src="http://xion.io/images/lawrence-office-space.jpg" alt="Two tweets at the same time!"&gt;&lt;/br&gt;
    &lt;small&gt;&amp;#8230;no, that won&amp;#8217;t even be &lt;em&gt;one&lt;/em&gt; tweet.&lt;/small&gt;
&lt;/p&gt;

&lt;p&gt;Well, let&amp;#8217;s add some &lt;em&gt;sound effects&lt;/em&gt;, shall&amp;nbsp;we?&lt;/p&gt;
&lt;p&gt;Before you think that&amp;#8217;s preposterous, remember the &lt;a href="https://en.wikipedia.org/wiki/Bell_character"&gt;terminal bell&lt;/a&gt;.
Sounding the bell is as simple as printing the &lt;code&gt;"\a"&lt;/code&gt; character (&lt;span class="caps"&gt;ASCII&lt;/span&gt; 7),
which for this reason is also known as &lt;code&gt;BEL&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; -e &lt;span class="s2"&gt;&amp;quot;\a&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Unfortunately, most terminal emulators silence the actual sound,
and replace it with a visual indicator &amp;#8212; typically a bell &lt;em&gt;icon&lt;/em&gt;.
If we want to make speakers reliably emit audible phenomena,
we sadly have to look&amp;nbsp;elsewhere.&lt;/p&gt;
&lt;p&gt;Fortunately, modern Linux systems handle the sound card somewhat better
than you may have remembered from a few years ago.
This is usually thanks to &lt;a href="https://en.wikipedia.org/wiki/Advanced_Linux_Sound_Architecture"&gt;&lt;span class="caps"&gt;ALSA&lt;/span&gt;&lt;/a&gt;,
a dedicated subsystem in the Linux kernel, and its numerous userspace&amp;nbsp;complements.&lt;/p&gt;
&lt;p&gt;One of them is the inconspicuous &lt;code&gt;speaker-test&lt;/code&gt; binary
which, well, does exactly what it says on the&amp;nbsp;can:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;speaker-test  &lt;span class="c"&gt;# play some noise through the speakers&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can make it play a &lt;span class="caps"&gt;WAV&lt;/span&gt; file, too,
but the most interesting option is to synthesize a &lt;em&gt;sine wave&lt;/em&gt;.
By adjusting its frequency, it&amp;#8217;s easy to play higher and lower tones,
forming the building blocks for more complex&amp;nbsp;sounds.&lt;/p&gt;
&lt;p&gt;What you cannot control is the tone&amp;#8217;s duration.
That&amp;#8217;s not a big problem, though, since we can run &lt;code&gt;speaker-test&lt;/code&gt; in a separate process
and then just &lt;em&gt;&lt;code&gt;kill&lt;/code&gt; it dead&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# play a sine wave (requires ALSA): s $frequency $duration&lt;/span&gt;
s&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt; speaker-test &amp;gt;&lt;span class="nv"&gt;$n&lt;/span&gt; -t sine -f &lt;span class="nv"&gt;$1&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;_p&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$!&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; sleep &lt;span class="nv"&gt;$2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;kill&lt;/span&gt; -9 &lt;span class="nv"&gt;$_p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="https://github.com/Xion/flappybash/commit/3f259418f3d6167492b7d849c659dfcee0c6aa3d"&gt;I&amp;#8217;ve used this approach&lt;/a&gt;
to play a simple, two-tone sound
whenever the player successfully overcomes a pipe obstacle.
And I would&amp;#8217;ve probably taken it further if &amp;#8220;&lt;code&gt;speaker_test&lt;/code&gt;&amp;#8221; wasn&amp;#8217;t such a damn &lt;em&gt;long&lt;/em&gt; string.
Unfortunately, it was one identifier I couldn&amp;#8217;t afford to shorten,
and this had put a stop to my ambitious plan of improvising &lt;a href="https://www.sadtrombone.com/"&gt;a sad trombone&lt;/a&gt;
upon player&amp;#8217;s failure&amp;nbsp;:(&lt;/p&gt;
&lt;h4&gt;;&amp;nbsp;done&lt;/h4&gt;
&lt;p&gt;It wouldn&amp;#8217;t be right to say I wasn&amp;#8217;t very happy with &lt;a href="https://github.com/Xion/flappybash"&gt;the results&lt;/a&gt;, though.
All in all, it was &lt;a href="https://github.com/Xion/flappybash/commits/master"&gt;the most fun&lt;/a&gt;
I had with coding in quite some time,
and definitely the most amusing Bash script I&amp;#8217;ve ever&amp;nbsp;written.&lt;/p&gt;
&lt;p style="text-align: center"&gt;
    &lt;img src="http://xion.io/images/flappybash.jpg" alt="FLAPPY BASH"&gt;
&lt;/p&gt;

&lt;p&gt;It also got me curious what other games people have implemented purely as shell scripts.
To my disappointment, there hadn&amp;#8217;t been all that many.
Of those I could find, this &lt;a href="http://bruxy.regnet.cz/web/linux/EN/housenka-bash-game/"&gt;Snake clone&lt;/a&gt;
in about &lt;span class="caps"&gt;7KB&lt;/span&gt; of (unobfuscated) Bash
is probably the most polished&amp;nbsp;one.&lt;/p&gt;
&lt;p&gt;As you can see then, this is clearly an under-appreciated platform
that evidently displays a lot of potential!
If you want to create games that are both very portable
and &lt;em&gt;extremely&lt;/em&gt; space-efficient,
Bash is definitely a technology you should have a closer look at&amp;nbsp;;-)&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Here&amp;#8217;s the original announcement post &lt;a href="http://gynvael.coldwind.pl/?lang=pl&amp;amp;id=624"&gt;in Polish&lt;/a&gt;
and its somewhat understandable
&lt;a href="https://translate.google.com/translate?sl=auto&amp;amp;tl=en&amp;amp;js=y&amp;amp;prev=_t&amp;amp;hl=en&amp;amp;ie=UTF-8&amp;amp;u=http%3A%2F%2Fgynvael.coldwind.pl%2F%3Flang%3Dpl%26id%3D624&amp;amp;edit-text=&amp;amp;act=url"&gt;Google-translated version&lt;/a&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;Yes, I&amp;#8217;m ignoring the elephant in the room which is the web browser.
It&amp;#8217;s probably because a pile of minified JavaScript doesn&amp;#8217;t strike me as very interesting anymore :)&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;Nowadays, though,
the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame"&gt;&lt;code&gt;requestAnimationFrame&lt;/code&gt; function&lt;/a&gt;
is closer to the actual continuous processing in the background.&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:4"&gt;
&lt;p&gt;Regular programs could simply call &lt;a href="http://man7.org/linux/man-pages/man2/alarm.2.html"&gt;the &lt;code&gt;alarm&lt;/code&gt; function&lt;/a&gt;
instead of forking a subprocess. But then again, regular programs could just run a normal game loop.&amp;#160;&lt;a class="footnote-backref" href="#fnref:4" rev="footnote" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="Bash"></category><category term="shell scripting"></category><category term="game programming"></category><category term="Flappy Bird"></category></entry><entry><title>The brave “new” world of Python 3</title><link href="http://xion.io/post/code/python3-primer.html" rel="alternate"></link><updated>2016-08-15T22:35:00-07:00</updated><author><name>Karol Kuczmarski</name></author><id>tag:xion.io,2016-08-15:post/code/python3-primer.html</id><summary type="html">&lt;p&gt;I&amp;#8217;ll blurt it straight up: I&amp;#8217;m not a big fan of Python&amp;nbsp;3.&lt;/p&gt;
&lt;p&gt;For a long time, I resisted the appeal of various incremental improvements
that early 3.x releases offered.
And the world agreed with me:
a mere two years ago, Python 3 wasn&amp;#8217;t even &lt;a href="https://alexgaynor.net/2014/jan/03/pypi-download-statistics/"&gt;a blip on the PyPI radar&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Lately, however, things seem to be picking up some&amp;nbsp;steam.&lt;/p&gt;
&lt;p&gt;As if to compensate for years of &amp;#8220;good enough&amp;#8221;,
Python 3 development team has given in to a steadily accelerating feature creep.
Sure, some of it results in &lt;a href="https://www.python.org/dev/peps/pep-0498/"&gt;bad ideas&lt;/a&gt;
(or even &lt;a href="https://www.python.org/dev/peps/pep-0628/"&gt;ideas you&amp;#8217;d hope are jokes&lt;/a&gt;),
but it nevertheless causes an increasingly wide functional gap
between the 2.x and 3.x&amp;nbsp;series.&lt;/p&gt;
&lt;p&gt;Starting from around Python 3.5, this gap becomes really noticeable,
even when partially bridged with many excellent backports.
The ecosystem support is also mostly there,
at least insofar as &amp;#8220;not breaking horribly when a package is used in Python&amp;nbsp;3&amp;#8221;.&lt;/p&gt;
&lt;p&gt;And then, of course, there is &lt;a href="https://hg.python.org/peps/rev/76d43e52d978"&gt;the 2.7 EoL date&lt;/a&gt; looming ever&amp;nbsp;closer.&lt;/p&gt;
&lt;p&gt;Given all those portents,
even old curmudg&amp;#8230; ahem&amp;#8230; &lt;em&gt;seasoned developers&lt;/em&gt; cannot really ignore Python 3 anymore.
For better or for worse, 3.x is how Python will look like in the coming years and decades.
Might as well prepare for&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;In this post, I will discuss some important issues
one should be aware of before trying to switch from Python 2 to 3.
I won&amp;#8217;t be talking about all the minute changes and additions,
but cover the more significant, broader concepts
that mark the divide between the 2.x and 3.x&amp;nbsp;generations.&lt;/p&gt;
&lt;p&gt;The two concepts I&amp;#8217;ll be mentioning here are
&lt;em&gt;Unicode&lt;/em&gt; (obviously) and &lt;em&gt;lazy vs. eager computation&lt;/em&gt;.&lt;/p&gt;
&lt;h4&gt;Unicode&amp;nbsp;handling&lt;/h4&gt;
&lt;p&gt;You have probably heard it before.
Python 3 was going to solve your Unicode problems once and for all.
You haven&amp;#8217;t believed it, of course,
like you wouldn&amp;#8217;t believe in any other silver&amp;nbsp;bullet.&lt;/p&gt;
&lt;p&gt;Still, it may be rather surprising to learn
that in Python 3, you&amp;#8217;ll actually see much &lt;em&gt;more&lt;/em&gt; Unicode-related&amp;nbsp;errors.&lt;/p&gt;
&lt;p&gt;And strange as it may sound, it is  a &lt;em&gt;good&lt;/em&gt;&amp;nbsp;thing.&lt;/p&gt;
&lt;p&gt;In any case, either version of Python gets the most important thing about Unicode right.
They both distinguish, at the type level,
between &lt;em&gt;strings&lt;/em&gt; (of Unicode codepoints) and their &lt;em&gt;encodings&lt;/em&gt; (sequences of bytes).
The type that holds the latter is called &lt;code&gt;bytes&lt;/code&gt; in both versions,
while strings are stored within the &lt;code&gt;str&lt;/code&gt; type in Python 3 and &lt;code&gt;unicode&lt;/code&gt; in Python&amp;nbsp;2.&lt;/p&gt;
&lt;p&gt;It is from this crucial distinction &amp;#8212; or rather, failing to account for it &amp;#8212;
where all the dreaded Unicode errors ultimately&amp;nbsp;stem.&lt;/p&gt;
&lt;p&gt;But where Python 2 does poorly is in the choice of defaults.
You probably know all too well that &lt;code&gt;bytes&lt;/code&gt; there is just an alias for &lt;code&gt;str&lt;/code&gt;.
That &lt;code&gt;str&lt;/code&gt; is a fully functional string type,
even though it can only contain &lt;span class="caps"&gt;ASCII&lt;/span&gt; characters.
Moreover, it is also the &lt;em&gt;default&lt;/em&gt;:
quoted string literals, for example, will be of this type unless specially&amp;nbsp;marked.&lt;/p&gt;
&lt;p&gt;This poor choice of defaults is the primary source of latent Unicode bugs in Python 2&amp;nbsp;programs.&lt;/p&gt;
&lt;p&gt;What Python 3 does here is to help &lt;em&gt;expose those bugs&lt;/em&gt; sooner.
If you already deal with Unicode correctly in your programs
&amp;#8212; maybe because you watched &lt;a href="https://www.youtube.com/watch?v=sgHbC6udIqc"&gt;this excellent talk by Ned Batchelder&lt;/a&gt; &amp;#8212;
your main benefit will be not having to write that &lt;code&gt;u""&lt;/code&gt; quotes anymore.
Otherwise, it&amp;#8217;ll force you to consider the issue from the very beginning,
rather than letting you write &amp;#8220;working&amp;#8221; programs
that crash the moment they have to process some non-&lt;span class="caps"&gt;ASCII&lt;/span&gt;&amp;nbsp;input.&lt;/p&gt;
&lt;h4&gt;Laziness by&amp;nbsp;default&lt;/h4&gt;
&lt;p&gt;The second major change that Python 3 brings is of similar nature.
It is also a change of &lt;em&gt;defaults&lt;/em&gt;, but the impetus for it is much less&amp;nbsp;evident.&lt;/p&gt;
&lt;p&gt;What&amp;#8217;s different in Python 3 is that many built-in functions and methods which used to return &lt;code&gt;list&lt;/code&gt;s
are now giving out bespoke objects that only &lt;em&gt;mostly&lt;/em&gt; behave like &lt;code&gt;list&lt;/code&gt;s.
Included in these are functions like &lt;code&gt;map&lt;/code&gt; or &lt;code&gt;filter&lt;/code&gt;,
as well as common &lt;code&gt;dict&lt;/code&gt;ionary methods such as &lt;code&gt;keys&lt;/code&gt; or &lt;code&gt;values&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This change is usually presented as removal of unnecessary&amp;nbsp;cruft:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;itertools.ifilter&lt;/code&gt; is now just &lt;code&gt;filter&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xrange&lt;/code&gt; is now just &lt;code&gt;range&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dict.iteritems&lt;/code&gt; is now just &lt;code&gt;dict.items&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and so&amp;nbsp;on.&lt;/p&gt;
&lt;p&gt;In some cases, this is exactly what happens.
For example, there is virtually no downside to the new implementation of &lt;code&gt;range&lt;/code&gt;,
especially considering the way it is used most&amp;nbsp;often.&lt;/p&gt;
&lt;p&gt;But not every built-in managed to preserve all the functionality of &lt;code&gt;list&lt;/code&gt;s.
Indeed, many have &lt;a href="https://docs.python.org/3/library/functions.html?highlight=iterator#map"&gt;downgraded&lt;/a&gt;
their &lt;span class="caps"&gt;API&lt;/span&gt; guaratees to those of mere &lt;em&gt;generators&lt;/em&gt;,
i.e. the most simplistic and limited flavor of Python iterables.
Working with them is trickier and more error-prone than with lists,
which is due to &lt;a href="http://xion.org.pl/2012/02/08/generator-pitfalls/"&gt;various pitfalls&lt;/a&gt;
that generators expose us&amp;nbsp;to.&lt;/p&gt;
&lt;p&gt;Navigating around those gotchas used to be something that Python code had to opt-in to,
by explicitly importing &lt;a href="https://docs.python.org/2.7/library/itertools.html"&gt;the &lt;code&gt;itertools&lt;/code&gt; module&lt;/a&gt;
and using its functions in place of the built-ins.
What you could gain in return was increased performance, and a lesser memory footprint.
All those benefits came from making the computations &lt;em&gt;lazy&lt;/em&gt;
and refraining from storage of the intermediate&amp;nbsp;results.&lt;/p&gt;
&lt;p&gt;In Python 3, however, laziness is &lt;em&gt;preordained&lt;/em&gt;.
Even if we don&amp;#8217;t need or care about the aforementioned perks,
we have to devise some way of dealing with the pervasive&amp;nbsp;generators.&lt;/p&gt;
&lt;p&gt;One option is to embrace lazy evaluation fully,
and adapt to handling unspecified iterables throughout our code bases.&lt;br&gt;
The risk is an increased frequency of bugs stemming from generator misuse &amp;#8212;
including a common mistake of trying to iterate over lazy &lt;code&gt;foos&lt;/code&gt; the second time,
deeper down a long function, after it&amp;#8217;s been already&amp;nbsp;exhausted.&lt;/p&gt;
&lt;p&gt;The alternative is to engage in a lot of &amp;#8220;defensive &lt;code&gt;list&lt;/code&gt;ing&amp;#8221;:
wrapping of unknown (or known-but-lazy) iterables in &lt;code&gt;list()&lt;/code&gt; calls
in order to &amp;#8220;sanitize&amp;#8221; them for later (re)use.&lt;br&gt;
Examples include immediate &lt;code&gt;list&lt;/code&gt;ification of a generator&amp;nbsp;object:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;primes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;is_prime&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;or preemptive conversion of an incoming iterable&amp;nbsp;argument:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do_something&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;foos&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;foos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;foos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c"&gt;# ...the rest of a long function...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Even if you choose the first path, and somehow use lazy generators everywhere,
conversions are still required at the serialization&amp;nbsp;boundaries:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;keys&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;()})&lt;/span&gt;  &lt;span class="c"&gt;# TypeError: dict_keys([&amp;#39;foo&amp;#39;]) is not JSON serializable&lt;/span&gt;
&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;keys&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;())})&lt;/span&gt;  &lt;span class="c"&gt;# works&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;At least in this case, the lazy iterable will vocally fail with an exception,
rather than silently doing nothing (in case of repeated iteration)
or always posing as truthy even when it&amp;#8217;s empty (in &lt;code&gt;if iterable:&lt;/code&gt; checks).&lt;/p&gt;
&lt;h4&gt;from __future__ import&amp;nbsp;doubts&lt;/h4&gt;
&lt;p&gt;So, here they are: the highlights of Python 3.
If you are disappointed they all turned out to be mixed blessings,
don&amp;#8217;t worry: you are
&lt;a href="http://lucumr.pocoo.org/2011/12/7/thoughts-on-python3/"&gt;in&lt;/a&gt;
&lt;a href="http://lucumr.pocoo.org/2014/1/5/unicode-in-2-and-3/"&gt;a&lt;/a&gt;
&lt;a href="http://lucumr.pocoo.org/2014/5/12/everything-about-unicode/"&gt;good&lt;/a&gt;
&lt;a href="http://lucumr.pocoo.org/2014/8/16/the-python-i-would-like-to-see/"&gt;company&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The truth is that Python 3 is more finnicky, less forgiving,
and much less beginner-friendly than its predecessor.
Its various &lt;a href="https://www.python.org/dev/peps/pep-0237/"&gt;superficial simplifications&lt;/a&gt; are almost squarely balanced
by many new concerns that are thrust upon an unsuspecting programmer from the very&amp;nbsp;beginning.&lt;/p&gt;
&lt;p&gt;In one possible view, this is simply a sign that the language has &lt;em&gt;matured&lt;/em&gt;.
Perhaps it&amp;#8217;s not a coincidence
that almost exactly &lt;a href="http://python-history.blogspot.com/2009/01/brief-timeline-of-python.html"&gt;18 years&lt;/a&gt;
has passed between the first public version of Python (0.9)
and the release of Python 3.0.
By no conceivable means it is a toy language anymore,
and it&amp;#8217;s adequately equipped to tackle challenges presented by the computing world of&amp;nbsp;today.&lt;/p&gt;
&lt;p&gt;But on the other hand, it&amp;#8217;s clear something is being gradually lost in the&amp;nbsp;process.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s becoming harder to claim the language favors simplicity
over &lt;a href="https://www.python.org/dev/peps/pep-0492/"&gt;complexity&lt;/a&gt;.&lt;br&gt;
It is no longer so easy to pick &lt;a href="https://www.python.org/dev/peps/pep-3101/"&gt;which way&lt;/a&gt;
is the &lt;em&gt;obvious&lt;/em&gt; way to do it.&lt;br&gt;
It is increasingly often that &lt;a href="https://www.python.org/dev/peps/pep-3113/"&gt;ugly replaces beautiful&lt;/a&gt;
and &lt;a href="https://www.python.org/dev/peps/pep-3108/"&gt;nested replaces flat&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Little by little, Python itself is becoming less and less &lt;em&gt;pythonic&lt;/em&gt;.
The pace isn&amp;#8217;t breakneck, but it&amp;#8217;s definitely noticeable.
But who knows? Maybe after two decades,
a wholesale redefinition of the language&amp;#8217;s core principles really &lt;em&gt;is&lt;/em&gt; in&amp;nbsp;order.&lt;/p&gt;
&lt;p&gt;&amp;#8230;Well, certainly that&amp;#8217;s necessary if some of the &lt;a href="https://www.python.org/dev/peps/pep-0526/"&gt;latest ideas&lt;/a&gt;
are about to get&amp;nbsp;in!&lt;/p&gt;</summary><category term="Python"></category><category term="Python 3"></category><category term="Unicode"></category><category term="lazy evaluation"></category><category term="iterables"></category></entry><entry><title>for loops in Rust</title><link href="http://xion.io/post/code/rust-for-loop.html" rel="alternate"></link><updated>2016-07-26T21:50:00-07:00</updated><author><name>Karol Kuczmarski</name></author><id>tag:xion.io,2016-07-26:post/code/rust-for-loop.html</id><summary type="html">&lt;p&gt;In this post, I&amp;#8217;m going to talk about the &lt;code&gt;for&lt;/code&gt; loop construct in &lt;a href="https://rust-lang.org"&gt;Rust&lt;/a&gt;,
as well as the related concepts of &lt;em&gt;iterators&lt;/em&gt; and&amp;nbsp;&amp;#8220;iterables&amp;#8221;.&lt;/p&gt;
&lt;p&gt;Depending on your programming language background,
they may seem somewhat familiar in terms of syntax &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; semantics,
or rather mysterious and surprising.
Their closest analogues exist in Python,
but programmers of Java, C#, or (modern) C++ should recognize many relevant features and ideas as&amp;nbsp;well.&lt;/p&gt;
&lt;h4&gt;Basics&lt;/h4&gt;
&lt;p&gt;The syntax of a &lt;code&gt;for&lt;/code&gt; loop is so modest it&amp;#8217;s almost spartan&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;vec&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;println&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you would expect, &lt;a href="https://is.gd/qtxqLD"&gt;this prints three lines&lt;/a&gt; with &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;2&lt;/code&gt;, &lt;code&gt;3&lt;/code&gt;.
What is probably not as obvious is that
over the course of this loop the &lt;code&gt;v&lt;/code&gt; vector was &lt;em&gt;expended&lt;/em&gt;.
Trying to &lt;a href="https://is.gd/1mv7RV"&gt;use it&lt;/a&gt; after the iteration,
we&amp;#8217;ll get a borrow checker&amp;nbsp;error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;lt;anon&amp;gt;:6:22: 6:23 error: use of moved value: `v` [E0382]
&amp;lt;anon&amp;gt;:4         println!(&amp;quot;{}&amp;quot;, x);
&amp;lt;anon&amp;gt;:5     }
&amp;lt;anon&amp;gt;:6     println!(&amp;quot;{:?}&amp;quot;, v);
                              ^
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In Rust jargon, the vector has been &lt;strong&gt;moved&lt;/strong&gt; into the loop.
Its ownership &amp;#8212; and that of its individual elements &amp;#8212; has been transfered there permanently.
While definitely surprising when compared to other languages,
this behavior is consistent with Rust&amp;#8217;s ubiquitous policy of moving values by&amp;nbsp;default.&lt;/p&gt;
&lt;p&gt;Still, you may not expect it here
because moving ownership is mostly seen at the function call boundaries.
For most intents and purposes, however,
you can picture a &lt;code&gt;for_each&lt;/code&gt; function like this to be the equivalent of the &lt;code&gt;for&lt;/code&gt; loop&amp;nbsp;above:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;for_each&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;println&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This also gives us a hint on how we could prevent the move from happening.
Rather than taking the vector itself,
the function could accept only a reference to&amp;nbsp;it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;for_each_ref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;println&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After we translate this &lt;a href="https://is.gd/Zrq0JL"&gt;back to the looping syntax&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;println&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nb"&gt;println&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{:?}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;we won&amp;#8217;t get any more objections from the&amp;nbsp;compiler.&lt;/p&gt;
&lt;h4&gt;Iterators and &amp;#8220;iterables&amp;#8221; in&amp;nbsp;Rust&lt;/h4&gt;
&lt;p&gt;It is important to emphasize that this new ampersand symbol (&lt;code&gt;&amp;amp;&lt;/code&gt;)
is by no means a part of the syntax of the &lt;code&gt;for&lt;/code&gt; loop itself.
We have actually changed &lt;em&gt;what object&lt;/em&gt; we&amp;#8217;re iterating here.
It is no longer &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; &amp;#8212; a vector itself &amp;#8212; but &lt;code&gt;&amp;amp;Vec&amp;lt;T&amp;gt;&lt;/code&gt;, an immutable reference to it.
As a consequence, &lt;code&gt;x&lt;/code&gt; is not a &lt;code&gt;T&lt;/code&gt; (the element type) anymore,
but a &lt;code&gt;&amp;amp;T&lt;/code&gt; &amp;#8212; a &lt;em&gt;reference&lt;/em&gt; to an element&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;So it seems that in Rust, both &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;amp;Vec&amp;lt;T&amp;gt;&lt;/code&gt; are what we would call &amp;#8220;iterables&amp;#8221;:
collections (or other objects) that we can get iterate over.
The usual way this is implemented in various programming languages
is by introducing an &lt;em&gt;iterator&lt;/em&gt;&amp;nbsp;object.&lt;/p&gt;
&lt;p&gt;The iterator keeps track of what element it&amp;#8217;s currently pointing to
and supports at least the following basic&amp;nbsp;operations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;getting the current&amp;nbsp;element&lt;/li&gt;
&lt;li&gt;advancing to the next&amp;nbsp;element&lt;/li&gt;
&lt;li&gt;signaling when no more elements are&amp;nbsp;available&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some languages provide separate iterator methods for each of those tasks,
but Rust chooses to combine them all into one.
You can see that when looking at the &lt;a href="https://doc.rust-lang.org/std/iter/trait.Iterator.html"&gt;&lt;code&gt;Iterator&lt;/code&gt; trait&lt;/a&gt;:
&lt;code&gt;next&lt;/code&gt; is the only method to be provided by its&amp;nbsp;implementations.&lt;/p&gt;
&lt;h4&gt;Desugaring with&amp;nbsp;into-iterators&lt;/h4&gt;
&lt;p&gt;How is the iterator object created,&amp;nbsp;though?&lt;/p&gt;
&lt;p&gt;In a typical Rust manner, this job is delegated to another trait.
This one is called &lt;code&gt;IntoIterator&lt;/code&gt;,
and it roughly corresponds to the &amp;#8220;iterable&amp;#8221; concept I&amp;#8217;ve alluded to&amp;nbsp;earlier:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// (simplified)&lt;/span&gt;
&lt;span class="k"&gt;trait&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;IntoIterator&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;into_iter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Iterator&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What is uniquely Rusty is the fact that &lt;code&gt;into_iter&lt;/code&gt; &amp;#8212; the sole method of this trait &amp;#8212;
doesn&amp;#8217;t just create a new iterator for the collection.
Instead, it effectively &lt;em&gt;consumes&lt;/em&gt; the whole thing,
leaving the new iterator as its only remnant and the only way to access the items&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;This, of course, is a direct manifestation of the Rust&amp;#8217;s move-by-default policy.
In this case, it protects us from the common problem of &lt;strong&gt;iterator invalidation&lt;/strong&gt;
which is probably all-too-familiar to C++ programmers.
Because the collection is essentially &amp;#8220;converted&amp;#8221; to an iterator here, it is&amp;nbsp;impossible:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;for more than one iterator to exist at a&amp;nbsp;time&lt;/li&gt;
&lt;li&gt;to modify the collection while any iterators are in&amp;nbsp;scope&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Doesn&amp;#8217;t all this &amp;#8220;moving&amp;#8221; and &amp;#8220;consuming&amp;#8221; sound familiar, by the way?
I&amp;#8217;ve mentioned earlier that when we iterate over a vector with a &lt;code&gt;for&lt;/code&gt; loop,
we essentially move it &amp;#8220;into the&amp;nbsp;loop&amp;#8221;.&lt;/p&gt;
&lt;p&gt;As you can probably deduce by now,
what really happens is that &lt;code&gt;IntoIterator::into_iter&lt;/code&gt; is invoked on the vector.
Its result &amp;#8212; the iterator object &amp;#8212; is then repeatedly &lt;code&gt;next&lt;/code&gt;&lt;span class="quo"&gt;&amp;#8216;&lt;/span&gt;ed until it returns &lt;code&gt;None&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In a way, a &lt;code&gt;for&lt;/code&gt; loop like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// body&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;is therefore nothing else but a syntactic sugar for the following expanded&amp;nbsp;version:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;iter&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;IntoIterator&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;into_iter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;loop&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nb"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="c1"&gt;// body&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nb"&gt;None&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can see quite clearly that &lt;code&gt;v&lt;/code&gt; is unusable not only after the loop ends,
but before it even &lt;em&gt;begins&lt;/em&gt;.
This is because it has been moved into &lt;code&gt;iter&lt;/code&gt; &amp;#8212; into an iterator &amp;#8212;
through an &lt;code&gt;into_iter&lt;/code&gt; method&amp;#8230; of &lt;code&gt;IntoIterator&lt;/code&gt;!&lt;/p&gt;
&lt;p&gt;Simple, huh?&amp;nbsp;:)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;for&lt;/code&gt; loop is just a syntactic sugar for an &lt;code&gt;IntoIterator::into_iter&lt;/code&gt; invocation,
followed by repeated calling of &lt;code&gt;Iterator::next&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;The&amp;nbsp;ampersand&lt;/h4&gt;
&lt;p&gt;On a more serious note, this move isn&amp;#8217;t something that we&amp;#8217;d always want to happen.
Fortunately, we know a way to prevent it.
Rather than iterating over the vector itself, use a &lt;em&gt;reference&lt;/em&gt; to&amp;nbsp;it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// body&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The great thing about this syntax is that everything said above still applies,
up to and including the desugaring procedure.
The &lt;code&gt;into_iter&lt;/code&gt; method is still being invoked,
except that this time it is done on the &lt;em&gt;reference to the collection&lt;/em&gt; &amp;#8212;
&lt;code&gt;&amp;amp;Vec&amp;lt;T&amp;gt;&lt;/code&gt; rather than &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// (simplified)&lt;/span&gt;
&lt;span class="k"&gt;impl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;IntoIterator&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;into_iter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Iterator&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="o"&gt;=&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The result is therefore an iterator that yields &lt;em&gt;references&lt;/em&gt; to the elements (&lt;code&gt;&amp;amp;T&lt;/code&gt;),
rather than elements themselves (&lt;code&gt;T&lt;/code&gt;).
And because &lt;code&gt;self&lt;/code&gt; above is also a reference,
the collection isn&amp;#8217;t really moved anywhere,
which is why we can freely access it after the loop&amp;nbsp;ends.&lt;/p&gt;
&lt;p&gt;The exact same thing happens when looping over a &lt;em&gt;mutable&lt;/em&gt;&amp;nbsp;reference:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// body&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;except that this time &lt;code&gt;into_iter&lt;/code&gt; is called for &lt;code&gt;&amp;amp;mut Vec&amp;lt;T&amp;gt;&lt;/code&gt;.
Result is therefore of type &lt;code&gt;Iterator&amp;lt;Item=&amp;amp;mut T&amp;gt;&lt;/code&gt;,
enabling us to modify the elements as we go through&amp;nbsp;them.&lt;/p&gt;
&lt;p&gt;No further compiler machinery is required to support those two cases,
because everything is already handled by the same&amp;nbsp;trait.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;IntoIterator&lt;/code&gt; desugaring works the same way for collections
&lt;em&gt;and&lt;/em&gt; both immutable and mutable references to&amp;nbsp;them.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;What about the iter()&amp;nbsp;method?&lt;/h4&gt;
&lt;p&gt;So far, we&amp;#8217;ve talked about regular &lt;code&gt;for&lt;/code&gt; loops,
and the very imperative style of computation they&amp;nbsp;represent.&lt;/p&gt;
&lt;p&gt;If you are more inclined towards functional programming, though,
you may have seen and written rather different constructs,
combining various &amp;#8220;fluent&amp;#8221; methods into expressions such as this&amp;nbsp;one:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;doubled_odds&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;collect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Methods like &lt;a href="https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.map"&gt;&lt;code&gt;map&lt;/code&gt;&lt;/a&gt;
and &lt;a href="https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.filter"&gt;&lt;code&gt;filter&lt;/code&gt;&lt;/a&gt; here
are called &lt;em&gt;iterator adapters&lt;/em&gt;,
and they are all defined on the &lt;a href="https://doc.rust-lang.org/std/iter/trait.Iterator.html"&gt;&lt;code&gt;Iterator&lt;/code&gt; trait&lt;/a&gt;.
Not only are they very powerful and numerous,
but they can also be supplemented through several &lt;a href="https://crates.io/crates/itertools"&gt;third-party crates&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In order to take advantage of the adapters, however,
we need to obtain an iterator for our collection first.
We know that &lt;code&gt;into_iter&lt;/code&gt; is the way loops normally do it,
so in principle we could follow the same approach&amp;nbsp;here:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;doubled_odds&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;IntoIterator&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;into_iter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;collect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To spare us the verbosity of this explicit syntax,
collections normally offer an &lt;code&gt;iter&lt;/code&gt; method which is exactly equivalent&lt;sup id="fnref:4"&gt;&lt;a class="footnote-ref" href="#fn:4" rel="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt;.
This method is what you will normally see in chained expressions like the one&amp;nbsp;above.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;v.iter()&lt;/code&gt; is just a shorthand for &lt;code&gt;IntoIterator::into_iter(&amp;amp;v)&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Why not&amp;nbsp;both?&lt;/h4&gt;
&lt;p&gt;The last thing to note is that Rust mandates neither loops nor iterator adapters
when writing code that operates on collections of elements.
When optimizations are turned on in the &lt;a href="http://doc.crates.io/manifest.html#the-profile-sections"&gt;release mode&lt;/a&gt;,
both versions should compile to equally efficient machine code,
with closures inlined and loops unrolled where&amp;nbsp;necessary.&lt;/p&gt;
&lt;p&gt;Choosing one style over the other is therefore a matter of convention and style.
Sometimes the right choice may actually be a &lt;em&gt;mix&lt;/em&gt; of both approaches,
and Rust allows it without any&amp;nbsp;complaints:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;print_prime_numbers_upto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;println&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Prime numbers lower than {}:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;2.&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;is_prime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nb"&gt;println&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Like before, this is possible through the same &lt;code&gt;for&lt;/code&gt; loop desugaring
that involves the &lt;code&gt;IntoIterator&lt;/code&gt; trait.
In this case, Rust will simply use a
&lt;a href="https://github.com/rust-lang/rust/blob/bbfcb471db0799a7d92d62e66cf44bbd68051675/src/libcore/iter/traits.rs#L253"&gt;no-op implementation&lt;/a&gt;
of this trait, &amp;#8220;converting&amp;#8221; any existing &lt;code&gt;Iterator&lt;/code&gt; &lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;into&amp;#8221;&amp;nbsp;itself.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Iterators themselves are also &amp;#8220;iterables&amp;#8221;,
implementing &lt;code&gt;IntoIterator::into_iter&lt;/code&gt; as a&amp;nbsp;pass-through.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Looping&amp;nbsp;around&lt;/h4&gt;
&lt;p&gt;If you want to know even more about iterators and loops in Rust,
the best source at this point is probably just
&lt;a href="http://doc.rust-lang.org/std/iter/index.html#for-loops-and-intoiterator"&gt;the official documentation&lt;/a&gt;.
And although mastering all the iterator adapters is of course not necessary to write effective Rust code,
taking a careful look at least at
&lt;a href="http://doc.rust-lang.org/std/iter/index.html#for-loops-and-intoiterator"&gt;the &lt;code&gt;collect&lt;/code&gt; method&lt;/a&gt;
(and the associated &lt;a href="https://doc.rust-lang.org/std/iter/trait.FromIterator.html"&gt;&lt;code&gt;FromIterator&lt;/code&gt; trait&lt;/a&gt;)
is definitely&amp;nbsp;helpful.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;The &amp;#8220;two-semicolon&amp;#8221; variant of the &lt;code&gt;for&lt;/code&gt; loop doesn&amp;#8217;t exist in Rust. Just like in Python, the equivalent is
iterating over a &lt;a href="http://rustbyexample.com/flow_control/for.html"&gt;range object&lt;/a&gt;, or using a regular &lt;code&gt;while&lt;/code&gt; loop
for more complex cases.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;This shift is completely transparent in the loop&amp;#8217;s body. The way it works is based on Rust&amp;#8217;s special mechanism
called &lt;a href="https://doc.rust-lang.org/book/deref-coercions.html"&gt;the &lt;code&gt;Deref&lt;/code&gt; coercions&lt;/a&gt;.
Without going into too much detail (as it is way out of scope for this post),
this feature allows us to treat references to objects (&lt;code&gt;&amp;amp;T&lt;/code&gt;) as if they were the objects themselves (&lt;code&gt;T&lt;/code&gt;).
The compiler will perform the necessary &lt;em&gt;derefencing&lt;/em&gt; where possible,
or signal an error in case of a (rare) ambiguity.&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;How do we know that? It&amp;#8217;s because &lt;code&gt;into_iter&lt;/code&gt; takes &lt;code&gt;self&lt;/code&gt; (rather than &lt;code&gt;&amp;amp;self&lt;/code&gt; or &lt;code&gt;&amp;amp;mut self&lt;/code&gt;)
as its first parameter. It means that the entire object for which this method is called is moved &lt;em&gt;into&lt;/em&gt; its body
(hence the method&amp;#8217;s name).&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:4"&gt;
&lt;p&gt;Curiously enough, this equivalence isn&amp;#8217;t encoded in the type system in any way,
making it technically just a convention. It is followed consistently at least in the standard library, though.&amp;#160;&lt;a class="footnote-backref" href="#fnref:4" rev="footnote" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="Rust"></category><category term="loops"></category><category term="iterators"></category></entry><entry><title>str.startswith() with tuple argument</title><link href="http://xion.io/post/code/python-startswith-tuple.html" rel="alternate"></link><updated>2016-06-28T09:56:00-07:00</updated><author><name>Karol Kuczmarski</name></author><id>tag:xion.io,2016-06-28:post/code/python-startswith-tuple.html</id><summary type="html">&lt;p&gt;Here&amp;#8217;s a little known trick that&amp;#8217;s applicable to Python&amp;#8217;s &lt;a href="http://bugs.python.org/issue1491485"&gt;&lt;code&gt;startswith&lt;/code&gt;&lt;/a&gt;
and &lt;a href="http://bugs.python.org/issue1491485"&gt;&lt;code&gt;endswith&lt;/code&gt;&lt;/a&gt; methods of &lt;code&gt;str&lt;/code&gt; (and &lt;code&gt;unicode&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Suppose you&amp;#8217;re checking whether a string starts with some&amp;nbsp;prefix:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;http://&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c"&gt;# totally an URL&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You eventually add more possible prefixes (or suffixes) to your&amp;nbsp;condition:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;http://&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;https://&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c"&gt;# ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Later on you notice the repetition and refactor it into something like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;SCHEMES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;http://&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;https://&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;ftp://&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;git://&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;any&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;SCHEMES&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c"&gt;# ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;or if you&amp;#8217;re feeling extra&amp;nbsp;functional:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;any&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SCHEMES&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
    &lt;span class="c"&gt;# ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Turns out, however, that &lt;code&gt;startswith&lt;/code&gt; (and &lt;code&gt;endswith&lt;/code&gt;) support this use case natively.
Rather than passing just a single string as the argument,
you can provide a &lt;em&gt;tuple&lt;/em&gt; of strings&amp;nbsp;instead:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;SCHEMES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;http://&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;https://&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;ftp://&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;git://&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SCHEMES&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c"&gt;# ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Either method will then check the original string against every element of the passed tuple.
Both will only return &lt;code&gt;True&lt;/code&gt; if &lt;em&gt;at least one&lt;/em&gt; of the strings is recognized as prefix/suffix.
As you can see, that&amp;#8217;s exactly what we would previously do with &lt;code&gt;any&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Somewhat surprisingly, however, the feature only works for actual &lt;em&gt;tuples&lt;/em&gt;.
Trying to pass a seemingly equivalent iterable &amp;#8212; a &lt;code&gt;list&lt;/code&gt; or &lt;code&gt;set&lt;/code&gt;, for example &amp;#8212;
will be met with interpreter&amp;#8217;s&amp;nbsp;refusal:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;is_jpeg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endswith&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;.jpg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;.jpeg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;!----&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;TypeError: endswith first arg must be str, unicode, or tuple, not list
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you dig into it, there doesn&amp;#8217;t seem to be a compelling reason for this behavior.
The &lt;a href="http://bugs.python.org/issue1491485"&gt;relevant feature request&lt;/a&gt; talks about
consistency with the built-in &lt;code&gt;isinstance&lt;/code&gt; function,
but it&amp;#8217;s quite difficult to see how those two are&amp;nbsp;related.&lt;/p&gt;
&lt;p&gt;In any case, this can be worked around without much&amp;nbsp;difficulty:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;PROTOCOLS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;http&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;https&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;ftp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;git&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;tuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;://&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;PROTOCOLS&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
    &lt;span class="c"&gt;# ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;though ideally, you&amp;#8217;d want to pack the prefixes in a tuple to begin&amp;nbsp;with.&lt;/p&gt;</summary><category term="Python"></category><category term="strings"></category><category term="tuples"></category></entry><entry><title>…or lambda?</title><link href="http://xion.io/post/code/python-or-lambda.html" rel="alternate"></link><updated>2016-06-20T22:07:00-07:00</updated><author><name>Karol Kuczmarski</name></author><id>tag:xion.io,2016-06-20:post/code/python-or-lambda.html</id><summary type="html">&lt;p&gt;&lt;em&gt;a.k.a. Curious Facts about Python&amp;nbsp;Syntax&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In Python 3.3,
a new method has been &lt;a href="https://docs.python.org/3/library/stdtypes.html#str.casefold"&gt;added&lt;/a&gt; to the &lt;code&gt;str&lt;/code&gt; type: &lt;code&gt;casefold&lt;/code&gt;.
Its purpose is to return a &amp;#8220;sanitized&amp;#8221; version of the string
that&amp;#8217;s suitable for case-insensitive comparison.
For older versions of Python,
an alternative way that&amp;#8217;s &lt;em&gt;mostly&lt;/em&gt; compatible is to use the &lt;code&gt;str.lower&lt;/code&gt; method,
which simply changes all letters in the string to&amp;nbsp;lowercase.&lt;/p&gt;
&lt;h4&gt;Syntax is&amp;nbsp;hard&lt;/h4&gt;
&lt;p&gt;Easy enough for a compatibility shim, right?
That&amp;#8217;s exactly what I thought when I came up with&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;casefold&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;casefold&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let&amp;#8217;s ignore for a moment
the fact that for a correct handling of &lt;code&gt;unicode&lt;/code&gt; objects in Python 2,
a &lt;a href="http://stackoverflow.com/a/32838944/434799"&gt;much more sophisticated approach&lt;/a&gt; is necessary.
What&amp;#8217;s rather more pertinent is that this simple code &lt;em&gt;doesn&amp;#8217;t parse&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  File &amp;quot;foo.py&amp;quot;, line 42
    getattr(str, &amp;#39;casefold&amp;#39;, None) or lambda s: s.lower()
                                      ^
SyntaxError: invalid syntax
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It&amp;#8217;s not very often that you would produce a &lt;code&gt;SyntaxError&lt;/code&gt; with code
that looks perfectly valid to most pythonistas.
The &lt;a href="http://xion.org.pl/2012/04/16/the-infernal-comma/"&gt;last time I had it happen&lt;/a&gt;,
the explanation was rather surprising and not exactly trivial to come&amp;nbsp;by.&lt;/p&gt;
&lt;p&gt;Fortunately, there is always one place
where we can definitively resolve any syntactic confusion.
That place is the &lt;a href="https://docs.python.org/2/reference/grammar.html"&gt;full grammar specification&lt;/a&gt;
of the Python&amp;nbsp;language.&lt;/p&gt;
&lt;p&gt;It may be a little intimidating at first,
especially if you&amp;#8217;re not familiar with the &lt;a href="https://en.wikipedia.org/wiki/Extended_Backus%E2%80%93Naur_Form"&gt;&lt;span class="caps"&gt;ENBF&lt;/span&gt; notation&lt;/a&gt; it uses.
All the Python&amp;#8217;s language constructs are there, though,
so the &lt;code&gt;SyntaxError&lt;/code&gt; from above should be traceable to a some rule of the grammar&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h4&gt;The&amp;nbsp;culprit&lt;/h4&gt;
&lt;p&gt;And indeed, the offending bit is right&amp;nbsp;here:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;or_test: and_test (&amp;#39;or&amp;#39; and_test)*
and_test: not_test (&amp;#39;and&amp;#39; not_test)*
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It says, essentially, that Python defines the &lt;code&gt;or&lt;/code&gt; expression (&lt;code&gt;or_test&lt;/code&gt;)
as a sequence of &lt;code&gt;and&lt;/code&gt; expressions (&lt;code&gt;and_test&lt;/code&gt;).
If you follow the syntax definition further, however,
you will notice that &lt;code&gt;and_test&lt;/code&gt; expands to
comparisons (&lt;code&gt;a &amp;lt; b&lt;/code&gt;, etc.),
arithmetic expressions (&lt;code&gt;x + y&lt;/code&gt;, etc.),
&lt;code&gt;list&lt;/code&gt; &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; &lt;code&gt;dict&lt;/code&gt; constructors (&lt;code&gt;[foo, bar]&lt;/code&gt;, etc.),
and finally to &lt;em&gt;atoms&lt;/em&gt; such as literal strings and&amp;nbsp;numbers.&lt;/p&gt;
&lt;p&gt;What you &lt;em&gt;won&amp;#8217;t&lt;/em&gt; see along the way are lambda&amp;nbsp;definitions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;lambdef: &amp;#39;lambda&amp;#39; [varargslist] &amp;#39;:&amp;#39; test
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In fact, the branch to allow them is directly above the &lt;code&gt;or_test&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;test: or_test [&amp;#39;if&amp;#39; or_test &amp;#39;else&amp;#39; test] | lambdef
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see, the rule puts lambdas at the same syntactical level as conditional expressions
(&lt;code&gt;x if a else b&lt;/code&gt;), which is &lt;em&gt;very&lt;/em&gt; high up.
The only thing you can do with a &lt;code&gt;lambda&lt;/code&gt; to make a larger expression
is to add a &lt;code&gt;yield&lt;/code&gt; keyword before it&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;, or follow it with a comma to create a tuple&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;You cannot, however, pass it as an argument to a binary operator,
even if it otherwise makes sense and even &lt;em&gt;looks&lt;/em&gt; unambiguous.
This is also why the nonsensical expressions such as this&amp;nbsp;one:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;will fail not with &lt;code&gt;TypeError&lt;/code&gt;, but also with &lt;code&gt;SyntaxError&lt;/code&gt;,
as they won&amp;#8217;t even be&amp;nbsp;evaluated.&lt;/p&gt;
&lt;h4&gt;More&amp;nbsp;parentheses&lt;/h4&gt;
&lt;p&gt;Savvy readers may have noticed that this phenomenon is very much reminiscent
of the issue of &lt;em&gt;operator precedence&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Indeed, in Python and in many other languages it is the grammar
that ultimately specifies the order of operations.
It does so simply by defining how expressions can be&amp;nbsp;constructed.&lt;/p&gt;
&lt;p&gt;Addition, for example, will be of lower priority than multiplication
simply because a &lt;em&gt;sum&lt;/em&gt; is said to comprise of terms that are &lt;em&gt;products&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;arith_expr: term ((&amp;#39;+&amp;#39;|&amp;#39;-&amp;#39;) term)*
term: factor ((&amp;#39;*&amp;#39;|&amp;#39;/&amp;#39;|&amp;#39;%&amp;#39;|&amp;#39;//&amp;#39;) factor)*
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This makes operator precedence a syntactic feature,
and its resolution is baked into the language parser and handled implicitly&lt;sup id="fnref:4"&gt;&lt;a class="footnote-ref" href="#fn:4" rel="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;We know, however, that precedence can be worked around where necessary
by enclosing the operator and its arguments in a pair of parenthesis.
On the syntax level, this means creating an entirely new, top-level&amp;nbsp;expression:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;atom: &amp;#39;(&amp;#39; [yield_expr|testlist_comp] &amp;#39;)&amp;#39; |  # parenthesized expression
       &amp;#39;[&amp;#39; [listmaker] &amp;#39;]&amp;#39; |
       &amp;#39;{&amp;#39; [dictorsetmaker] &amp;#39;}&amp;#39; |
       &amp;#39;`&amp;#39; testlist1 &amp;#39;`&amp;#39; |
       NAME | NUMBER | STRING+)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There, it is again possible to use even the highest-level constructs,
including also the silly stuff such as trying to add a number to a&amp;nbsp;function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This expression will now parse correctly,
 and produce &lt;code&gt;TypeError&lt;/code&gt; as&amp;nbsp;expected.&lt;/p&gt;
&lt;p&gt;In the end, the resolution of our initial dilemma is therefore rather&amp;nbsp;simple:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;casefold&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;casefold&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Such rules are sometimes called &lt;em&gt;productions&lt;/em&gt; of the grammar,
a &lt;a href="https://en.wikipedia.org/wiki/Production_%28computer_science%29"&gt;term&lt;/a&gt; from computational linguistics.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;Yes, &lt;code&gt;yield foo&lt;/code&gt; is an expression.
Its result is the value sent &lt;em&gt;to&lt;/em&gt; the generator by outer code via the &lt;code&gt;send&lt;/code&gt; method.
Since most generators are used as iterables, typically no values are passed this way
so the result of a &lt;code&gt;yield&lt;/code&gt; expression is &lt;code&gt;None&lt;/code&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;There are also a legacy corner cases of lambdas in &lt;code&gt;list&lt;/code&gt;/&lt;code&gt;dict&lt;/code&gt;/etc. comprehensions,
but those only apply under Python 2.x.&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:4"&gt;
&lt;p&gt;This saying, there are languages where the order is resolved at later stage,
after the expressions have already been parsed. They usually allow the programmer
to change the precedence of their own operators,
as it&amp;#8217;s the case in &lt;a href="https://www.haskell.org/tutorial/functions.html#sect3.2.2"&gt;Haskell&lt;/a&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:4" rev="footnote" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="Python"></category><category term="syntax"></category><category term="lambda"></category><category term="operators"></category></entry></feed>