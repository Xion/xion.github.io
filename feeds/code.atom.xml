<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Karol Kuczmarski's Blog</title><link href="http://xion.io/" rel="alternate"></link><link href="http://xion.io/feeds/code.atom.xml" rel="self"></link><id>http://xion.io/</id><updated>2017-03-14T21:13:00-07:00</updated><entry><title>Arguments to Python generatorÂ functions</title><link href="http://xion.io/post/code/python-generator-args.html" rel="alternate"></link><updated>2017-03-14T21:13:00-07:00</updated><author><name>Karol Kuczmarski</name></author><id>tag:xion.io,2017-03-14:post/code/python-generator-args.html</id><summary type="html">&lt;p&gt;In Python, a &lt;em&gt;generator function&lt;/em&gt; is one that
contains a &lt;code&gt;yield&lt;/code&gt; statement inside the function body.
Although this language construct has many fascinating use cases
(&lt;a href="http://www.dabeaz.com/coroutines/Coroutines.pdf"&gt;&lt;span class="caps"&gt;PDF&lt;/span&gt;&lt;/a&gt;),
the most common one is creating concise and readable&amp;nbsp;iterators.&lt;/p&gt;
&lt;h4&gt;A typical&amp;nbsp;case&lt;/h4&gt;
&lt;p&gt;Consider, for example, this simple&amp;nbsp;function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;multiples&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;of&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Yields all multiples of given integer.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which creates an (infinite) iterator over all multiples of given integer.
A sample of its output looks like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;islice&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;islice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;multiples&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;of&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;35&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you were to replicate in a language such as Java or Rust
&amp;#8212; neither of which supports an equivalent of &lt;code&gt;yield&lt;/code&gt; &amp;#8212;
you&amp;#8217;d end up writing an &lt;em&gt;iterator&lt;/em&gt; class.
Python also has them, of&amp;nbsp;course:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Multiples&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Yields all multiples of given integer.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__iter__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;of&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt;

    &lt;span class="n"&gt;___next__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt;  &lt;span class="c"&gt;# Python 3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;but they usually are not the first choice&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s also pretty easy to see why:
they require explicit bookkeeping of any auxiliary state between iterations.
Perhaps it&amp;#8217;s not too much to ask for a trivial walk over integers,
but it can get quite tricky if we were to iterate over recursive data structures,
like trees or graphs. In &lt;code&gt;yield&lt;/code&gt;-based generators, this isn&amp;#8217;t a problem,
because the state is stored within local variables on the coroutine&amp;nbsp;stack.&lt;/p&gt;
&lt;h4&gt;Lazy!&lt;/h4&gt;
&lt;p&gt;It&amp;#8217;s important to remember, however, that
generator functions behave differently than regular functions do,
even if the surface appearance often says&amp;nbsp;otherwise.&lt;/p&gt;
&lt;p&gt;The difference I wanted to explore in this post becomes apparent
when we add some argument checking to the initial&amp;nbsp;example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;multiples&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;of&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Yields all multiples of given integer.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;expected a natural number, got &lt;/span&gt;&lt;span class="si"&gt;%r&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;of&lt;/span&gt;&lt;span class="p"&gt;,))&lt;/span&gt;

    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With that &lt;code&gt;if&lt;/code&gt; in place, passing a negative number shall result in an exception.
Yet when we attempt to do just that, it will seem as if nothing is&amp;nbsp;happening:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;multiples&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And to a certain degree, this is pretty much correct.
Simply &lt;em&gt;calling&lt;/em&gt; a generator function does comparatively little,
and doesn&amp;#8217;t actually execute any of its code!
Instead, we get back a &lt;em&gt;generator object&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;generator&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="n"&gt;multiples&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x10f0ceb40&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which is essentially a built-in analogue to the &lt;code&gt;Multiples&lt;/code&gt; iterator instance.
Commonly, it is said that both generator functions and iterator classes are &lt;em&gt;lazy&lt;/em&gt;:
they only do work when we asked (i.e. iterated&amp;nbsp;over).&lt;/p&gt;
&lt;h4&gt;Getting&amp;nbsp;eager&lt;/h4&gt;
&lt;p&gt;Oftentimes, this is perfectly okay.
The laziness of generators is in fact one of their great strengths,
which is particularly evident in the &lt;a href="https://pymotw.com/2/itertools/"&gt;immense usefulness&lt;/a&gt;
of &lt;a href="http://docs.python.org/2/library/itertools.html"&gt;the&lt;code&gt;itertools&lt;/code&gt; module&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;On the other hand, however,
delaying argument checks and similar operations until later may hamper debugging.
The classic engineering principle of &lt;a href="https://en.wikipedia.org/wiki/Fail-fast"&gt;failing fast&lt;/a&gt;
applies here very fittingly: any errors should be signaled immediately.
In Python, this means raising exceptions as soon as problems are&amp;nbsp;detected.&lt;/p&gt;
&lt;p&gt;Fortunately, it is possible to reconcile the benefits of laziness
with (more) defensive programming.
We can make the generator functions only a &lt;em&gt;little&lt;/em&gt; more eager,
just enough to verify the correctness of their&amp;nbsp;arguments.&lt;/p&gt;
&lt;p&gt;The trick is simple. We shall extract an &lt;em&gt;inner&lt;/em&gt; generator function
and only call it after we have checked the&amp;nbsp;arguments:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;multiples&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;of&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Yields all multiples of given integer.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;expected a natural number, got &lt;/span&gt;&lt;span class="si"&gt;%r&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;of&lt;/span&gt;&lt;span class="p"&gt;,))&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;multiples&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
            &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;multiples&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;From the caller&amp;#8217;s point of view, nothing has changed in the typical&amp;nbsp;case:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;multiples&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;generator&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="n"&gt;multiples&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x110579190&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;but if we try to make an incorrect invocation now,
the problem is detected &lt;em&gt;immediately&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;multiples&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;!-- --&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;Traceback (most recent call last):
  File &amp;quot;&amp;lt;pyshell#2&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
    multiples(of=-5)
  File &amp;quot;&amp;lt;pyshell#0&amp;gt;&amp;quot;, line 4, in multiples
    raise ValueError(&amp;quot;expected a natural number, got %r&amp;quot; % (of,))
ValueError: expected a natural number, got -5
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pretty neat, especially for something that requires only two lines of&amp;nbsp;code!&lt;/p&gt;
&lt;h4&gt;The last&amp;nbsp;(micro)optimization&lt;/h4&gt;
&lt;p&gt;Indeed, we didn&amp;#8217;t even have to pass the arguments to the inner (generator) function,
because they are already captured by the&amp;nbsp;closure.&lt;/p&gt;
&lt;p&gt;Unfortunately, this also has a slight performance cost.
A captured variable (also known as a &lt;em&gt;cell variable&lt;/em&gt;) is stored on the function object itself,
so Python has to emit
&lt;a href="http://holdenweb.blogspot.com/2014/07/closures-arent-easy.html"&gt;a different bytecode instruction&lt;/a&gt;
(&lt;code&gt;LOAD_DEREF&lt;/code&gt;) that involves
an &lt;a href="http://stupidpythonideas.blogspot.com/2015/12/how-lookup-works.html"&gt;extra pointer dereference&lt;/a&gt;.
Normally, this is not a problem, but in a tight generator loop it can make a&amp;nbsp;difference.&lt;/p&gt;
&lt;p&gt;We can eliminate this extra work&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt; by passing the parameters&amp;nbsp;explicitly:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="c"&gt;# (snip)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;multiples&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;of&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
            &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;multiples&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;of&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This turns them into local variables of the inner function,
replacing the &lt;code&gt;LOAD_DEREF&lt;/code&gt; instructions with (aptly named) &lt;code&gt;LOAD_FAST&lt;/code&gt; ones.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Technically, the &lt;em&gt;Multiples&lt;/em&gt; class is here is both an &lt;em&gt;iterator&lt;/em&gt;
(because it has the &lt;code&gt;next&lt;/code&gt;/&lt;code&gt;__next__&lt;/code&gt; methods) and &lt;em&gt;iterable&lt;/em&gt;
(because it has &lt;code&gt;__iter__&lt;/code&gt; method that returns an iterator, which happens to be the same object).
This is common feature of iterators that are not associated with any collection,
like the ones defined in the built-in &lt;a href="http://docs.python.org/2/library/itertools.html"&gt;&lt;code&gt;itertools&lt;/code&gt; module&lt;/a&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;Note that if you engage in this kind of microoptimizations,
I&amp;#8217;d assume you have already &lt;a href="https://www.python.org/doc/essays/list2str/"&gt;changed your global lookup into local ones&lt;/a&gt; :)&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="Python"></category><category term="generators"></category><category term="functions"></category><category term="arguments"></category><category term="closures"></category></entry><entry><title>The âletâ type trick inÂ Rust</title><link href="http://xion.io/post/code/rust-let-unit.html" rel="alternate"></link><updated>2017-02-01T18:42:00-08:00</updated><author><name>Karol Kuczmarski</name></author><id>tag:xion.io,2017-02-01:post/code/rust-let-unit.html</id><summary type="html">&lt;p&gt;Here&amp;#8217;s a neat little trick
that&amp;#8217;s especially useful if you&amp;#8217;re just starting out with&amp;nbsp;Rust.&lt;/p&gt;
&lt;p&gt;Because the language uses &lt;a href="https://en.wikipedia.org/wiki/Type_inference"&gt;type inference&lt;/a&gt; all over the place
(or at least within a single function),
it can often be difficult to figure out the type of an expression by yourself.
Such knowledge is very handy in resolving compiler errors,
which may be rather complex when generics and traits are&amp;nbsp;involved.&lt;/p&gt;
&lt;p&gt;The formula itself is very simple.
Its shortest, most common version &amp;#8212; and arguably the cleverest one, too &amp;#8212;
is the following &lt;code&gt;let&lt;/code&gt; binding:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;some_expression&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In virtually all cases, this binding will cause a type error on its own,
so it&amp;#8217;s not something you&amp;#8217;d leave permanently in your regular&amp;nbsp;code.&lt;/p&gt;
&lt;p&gt;But the important part here is the exact error message you&amp;nbsp;get:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;error[E0308]: mismatched types
  --&amp;gt; &amp;lt;anon&amp;gt;:42:13
   |
42 |         let () = some_expression;
   |             ^^ expected f64, found ()
   |
   = note: expected type `f64`
   = note:    found type `()`
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The type expected by Rust here (in this example, &lt;code&gt;f64&lt;/code&gt;)
is also the type of &lt;code&gt;some_expression&lt;/code&gt;. No more, no&amp;nbsp;less.&lt;/p&gt;
&lt;p&gt;There is nothing particularly wrong with using this technique
and not caring too much how it works under the hood.
But if you do want to know a little more what exactly is going on here,
the rest of this post covers it in some&amp;nbsp;detail.&lt;/p&gt;
&lt;h4&gt;The&amp;nbsp;unit&lt;/h4&gt;
&lt;p&gt;Firstly, you may be wondering about this curious &lt;code&gt;()&lt;/code&gt; type
that the compiler has apparently found in the statement above.
The official name for it is the &lt;em&gt;unit type&lt;/em&gt;,
and it has several notable&amp;nbsp;characteristics:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;There exists only one value&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; of this type: &lt;code&gt;()&lt;/code&gt; (same symbol as the type&amp;nbsp;itself).&lt;/li&gt;
&lt;li&gt;It represents an empty tuple and has therefore the size of&amp;nbsp;zero.&lt;/li&gt;
&lt;li&gt;It is the type of any expression that&amp;#8217;s turned into a &lt;em&gt;statement&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That last fact is particularly interesting,
as it makes &lt;code&gt;()&lt;/code&gt; appear in error messages that are more indicative of syntactic mishaps
rather than mismatched&amp;nbsp;types:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;positive_signum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="k"&gt;i32&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="k"&gt;i32&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;!-- --&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;error[E0308]: mismatched types
 --&amp;gt; &amp;lt;anon&amp;gt;:2:17
  |
2 |     if x &amp;gt; 0 { 1i32 }
  |                ^^^^ expected (), found i32
  |
  = note: expected type `()`
  = note:    found type `i32`
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you think about it, however, it makes perfect sense.
The last expression inside a function body is the return value.
This also means that everything &lt;em&gt;before&lt;/em&gt; it has to be a statement:
an expression of type &lt;code&gt;()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Working its way backward,
Rust will therefore expect only such expressions before the final &lt;code&gt;0i32&lt;/code&gt;.
This, in turn, puts the same constraint on the body of the &lt;code&gt;if&lt;/code&gt; statement.
The expression &lt;code&gt;1i32&lt;/code&gt; (with its type of &lt;code&gt;i32&lt;/code&gt;) clearly violates it,
causing the above error&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h4&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;Expanded&amp;#8221;&amp;nbsp;version&lt;/h4&gt;
&lt;p&gt;A natural question now arises:
is &lt;code&gt;()&lt;/code&gt; inside of the &lt;code&gt;let () = ...&lt;/code&gt; formula a &lt;em&gt;type&lt;/em&gt; &lt;code&gt;()&lt;/code&gt; or a &lt;em&gt;value&lt;/em&gt; &lt;code&gt;()&lt;/code&gt;?&amp;#8230;&lt;/p&gt;
&lt;p&gt;To answer that,
it&amp;#8217;s quite helpful to compare and contrast the original binding with its longer&amp;nbsp;&amp;#8220;equivalent&amp;#8221;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;some_expression&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This statement is conceptually very similar to our original one.
The error message it causes can also be used to debug issues with type&amp;nbsp;inference.&lt;/p&gt;
&lt;p&gt;Despite some cryptic symbols, the syntax here should also be more familiar.
It occurs in many typical, ordinary bindings you can see in everyday Rust code.
Here&amp;#8217;s an&amp;nbsp;example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;where it&amp;#8217;s abundantly clear that &lt;code&gt;i32&lt;/code&gt; is the type of variable &lt;code&gt;x&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Analogously above, you can see that
an unnamed symbol (&lt;code&gt;_&lt;/code&gt;, the underscore) is declared to be of type &lt;code&gt;()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So in this alternate phrasing, &lt;code&gt;()&lt;/code&gt; denotes a &lt;em&gt;type&lt;/em&gt;.&lt;/p&gt;
&lt;h4&gt;Let a pattern&amp;nbsp;emerge&lt;/h4&gt;
&lt;p&gt;What about the original form, &lt;code&gt;let () = ...&lt;/code&gt;?
There is no explicit type declaration here (i.e. no colon),
and a pair of empty parentheses isn&amp;#8217;t a name that could be assigned a new&amp;nbsp;value.&lt;/p&gt;
&lt;p&gt;What exactly is happening there,&amp;nbsp;then?&amp;#8230;&lt;/p&gt;
&lt;p&gt;Well, it isn&amp;#8217;t really anything special.
While it may look exceptional, and totally unlike common usages of &lt;code&gt;let&lt;/code&gt;,
it is in fact exactly the same thing as a mundane &lt;code&gt;let x = 5&lt;/code&gt;.
The potential misconception here is about the exact meaning of &lt;code&gt;x&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The simple version is that it&amp;#8217;s a name for the bound expression.&lt;br&gt;
But the actual truth is that it&amp;#8217;s a &lt;em&gt;pattern&lt;/em&gt; which is matched against that&amp;nbsp;expression.&lt;/p&gt;
&lt;p&gt;The terms &amp;#8220;pattern&amp;#8221; and &amp;#8220;matching&amp;#8221; here refer to the same mechanism
that occurrs within &lt;a href="https://doc.rust-lang.org/book/match.html"&gt;the &lt;code&gt;match&lt;/code&gt; statement&lt;/a&gt;.
You could even imagine a peculiar form of desugaring,
where a &lt;code&gt;let&lt;/code&gt; statement is converted into a semantically equivalent &lt;code&gt;match&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;original&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;desugared&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This analogy works perfectly&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;, because the patterns here are &lt;em&gt;irrefutable&lt;/em&gt;:
any value can match them, as all we&amp;#8217;re doing is giving the value a name.
Should the case be any different, Rust would reject our &lt;code&gt;let&lt;/code&gt; statement &amp;#8212;
just like it rejects a &lt;code&gt;match&lt;/code&gt; block that doesn&amp;#8217;t include branches for all possible&amp;nbsp;outcomes.&lt;/p&gt;
&lt;h4&gt;An empty&amp;nbsp;pattern&lt;/h4&gt;
&lt;p&gt;But just because a pattern has to always match the expression,
it doesn&amp;#8217;t mean only simple identifiers like &lt;code&gt;x&lt;/code&gt; or &lt;code&gt;y&lt;/code&gt; are permitted in &lt;code&gt;let&lt;/code&gt;.
If Rust is able to statically ensure a match,
it is perfectly &lt;span class="caps"&gt;OK&lt;/span&gt; to use a pattern with an internal structure&lt;sup id="fnref:4"&gt;&lt;a class="footnote-ref" href="#fn:4" rel="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Wrapping&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Wrapping&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Wrapping&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Of course, something like this is just superfluous and silly.
Same mechanism, however, is also behind the ability to &amp;#8220;initialize multiple&amp;nbsp;variables&amp;#8221;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What really happens is that we take a &lt;em&gt;tuple expression&lt;/em&gt; &lt;code&gt;(0, 1)&lt;/code&gt;
and match it against a pattern &lt;code&gt;(x, y)&lt;/code&gt;.
Because it is trivially satisified,
we have the symbols &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; bound to the tuple elements.
For all intents and purposes, this is equivalent to having two separate &lt;code&gt;let&lt;/code&gt; statements:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Of course, a 2-tuple is not the only pattern of this kind we can use in &lt;code&gt;let&lt;/code&gt;.
Others possible patterns include, for example, the &lt;em&gt;0-tuple&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Or, as we express it in Rust, &lt;code&gt;()&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now that&amp;#8217;s a truly useless statement!
But it also harkens straight to our debug binding.
It should be pretty clear now how it&amp;nbsp;works:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;()&lt;/code&gt; stanza on the left is neither a type nor a name, but a &lt;em&gt;pattern&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;The expression on the right is being &lt;em&gt;matched&lt;/em&gt; against this&amp;nbsp;pattern.&lt;/li&gt;
&lt;li&gt;Because the types of both of those things differ, the compiler signals an appropriate&amp;nbsp;error.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The curious thing is that there is nothing inherently magical about using &lt;code&gt;()&lt;/code&gt; on the left hand side.
It&amp;#8217;s simply the shortest pattern we can put after &lt;code&gt;let&lt;/code&gt;.
It&amp;#8217;s also one that&amp;#8217;s extremely unlikely to actually match the right hand side,
which ensures we get the desired error.
But if you substituted something equally exotic and rare &amp;#8212; say, &lt;code&gt;(x, ((y, z), Wrapping(w)))&lt;/code&gt; &amp;#8212;
it would work equally well as a rudimentary type&amp;nbsp;detector.&lt;/p&gt;
&lt;p&gt;Except for one thing, of course: nobody wants to type this much!
Borne out of this frugality (and/or laziness), a custom thus emerged to use &lt;code&gt;()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Short, sweet, and &lt;em&gt;clever&lt;/em&gt;.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;A more formal, type-theoretic formulation of this fact
is saying that &lt;code&gt;()&lt;/code&gt; is &lt;em&gt;inhabited&lt;/em&gt; by only one value.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;In case you are wondering, one possible fix here is to &lt;code&gt;return 1i32;&lt;/code&gt; inside the &lt;code&gt;if&lt;/code&gt;.
An (arguably more idiomatic) alternative is to put &lt;code&gt;0i32&lt;/code&gt; in an &lt;code&gt;else&lt;/code&gt; branch,
turning the entire &lt;code&gt;if&lt;/code&gt; construct into the last &amp;#8212; and only &amp;#8212; expression in the function body.&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;Note how each nested &lt;code&gt;match&lt;/code&gt; is also introducing a new scope,
exactly like the
&lt;a href="https://doc.rust-lang.org/1.10.0/book/references-and-borrowing.html#thinking-in-scopes"&gt;canonical desugaring&lt;/a&gt;
of &lt;code&gt;let&lt;/code&gt; which is often used to explain lifetimes and borrowing.&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:4"&gt;
&lt;p&gt;Unfortunately, Rust isn&amp;#8217;t currently capable of proving that the pattern is irrefutable in all obvious cases.
For example, &lt;code&gt;let Some(x) = Some(42);&lt;/code&gt; will be rejected due to the existence of a &lt;code&gt;None&lt;/code&gt; variant in &lt;code&gt;Option&lt;/code&gt;,
even though it isn&amp;#8217;t actually used in the (constant) expression on the right.&amp;#160;&lt;a class="footnote-backref" href="#fnref:4" rev="footnote" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="Rust"></category><category term="types"></category><category term="pattern matching"></category></entry><entry><title>Better location for unit tests inÂ Rust</title><link href="http://xion.io/post/code/rust-unit-test-placement.html" rel="alternate"></link><updated>2017-01-06T18:53:00-08:00</updated><author><name>Karol Kuczmarski</name></author><id>tag:xion.io,2017-01-06:post/code/rust-unit-test-placement.html</id><summary type="html">&lt;p&gt;For a unit test to be comprehensive,
it must often access some private symbols from the module it&amp;nbsp;checks.&lt;/p&gt;
&lt;p&gt;In Rust, this is permitted for submodules:
they can freely refer to anything defined &amp;#8220;upwards&amp;#8221; in the module hierarchy.
The only requirement is that they import it explicitly by name,
using statements such as &lt;code&gt;use super::foo&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To illustrate this,
here&amp;#8217;s an &lt;a href="https://is.gd/xTgUEd"&gt;example&lt;/a&gt;
of a ridiculously well-factored &lt;a href="http://wiki.c2.com/?FizzBuzzTest"&gt;FizzBuzz&lt;/a&gt;
along with its accompanying unit&amp;nbsp;test:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;borrow&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Cow&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fizzbuzz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;u32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nb"&gt;println&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fizzbuzz_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fizzbuzz_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;u32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Cow&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nl"&gt;&amp;#39;static&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;str&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;by3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;by5&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;by3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;by5&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;FizzBuzz&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;into&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;by3&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Fizz&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;into&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;by5&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Buzz&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;into&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;into&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;


&lt;span class="cp"&gt;#[cfg(test)]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kn"&gt;mod&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tests&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kn"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;super&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;fizzbuzz_string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;#[test]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;single_numbers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;assert_eq&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fizzbuzz_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;assert_eq&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fizzbuzz_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;assert_eq&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Fizz&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fizzbuzz_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;assert_eq&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Buzz&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fizzbuzz_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;assert_eq&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;7&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fizzbuzz_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;assert_eq&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Fizz&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fizzbuzz_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;assert_eq&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Buzz&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fizzbuzz_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;assert_eq&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;FizzBuzz&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fizzbuzz_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The internal function, as shown above, can be imported and verified independently
of the &lt;code&gt;pub&lt;/code&gt;lic one.
This is done through a &lt;code&gt;#[test]&lt;/code&gt; procedure in an inline&amp;nbsp;submodule.&lt;/p&gt;
&lt;p&gt;Such factorization and granular testing is commonplace,
especially when the public &lt;span class="caps"&gt;API&lt;/span&gt; may cause unwanted side effects,
such as printing stuff to stdout&amp;nbsp;here.&lt;/p&gt;
&lt;h4&gt;The issue of&amp;nbsp;length&lt;/h4&gt;
&lt;p&gt;But if you are like me and prefer your modules to be short and sweet,
you may feel justifiably concerned about this &lt;em&gt;inline&lt;/em&gt; submodule&amp;nbsp;business.&lt;/p&gt;
&lt;p&gt;In the toy example above,
tests have already taken at least as many lines as the actual code.
Real world usually &lt;a href="https://github.com/Geal/nom/blob/80a1deab58d1faf41c05a5d741d9e3f51bde3a55/src/nom.rs#L599"&gt;matches&lt;/a&gt; this ratio.
A module with a couple hundred lines of regular code starts
to be measured in &lt;a href="https://en.wikipedia.org/wiki/Source_lines_of_code#Related_terms"&gt;KLOCs&lt;/a&gt;
if we also include its&amp;nbsp;tests.&lt;/p&gt;
&lt;p&gt;While this could be taken as a strong hint to split things up,
it can just as easily disincentivize testing&amp;nbsp;instead.&lt;/p&gt;
&lt;p&gt;The obvious solution is to move those tests somewhere else.
What is not so evident is how to preserve this crucial module-submodule relation,
enabling us to write comprehensive tests in the first&amp;nbsp;place.&lt;/p&gt;
&lt;h4&gt;Looking for&amp;nbsp;inspiration&lt;/h4&gt;
&lt;p&gt;I must quickly disappoint anyone who would like to round up all their unit tests
and sequester them in some distant &lt;em&gt;tests/&lt;/em&gt; directory.
Such layout is reserved for
&lt;a href="https://doc.rust-lang.org/book/testing.html#the-tests-directory"&gt;crate-level&lt;/a&gt; (&amp;#8220;integration&amp;#8221;) tests.
Unit tests, on the other hand, are predestined to live among production code&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;So let&amp;#8217;s at least relocate them to separate&amp;nbsp;files.&lt;/p&gt;
&lt;p&gt;To make this goal more concrete,
we will try to emulate the project layout described in
&lt;a href="https://google.github.io/styleguide/cppguide.html#File_Names"&gt;Google&amp;#8217;s C++ style guide&lt;/a&gt;.
By this convention, a conceptual &amp;#8220;module&amp;#8221; or &amp;#8220;unit&amp;#8221; consists of the following&amp;nbsp;files:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;foo.h&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;foo.cc&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;foo_test.cc&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Translating this to Rust, we&amp;nbsp;get:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;foo.rs&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;foo_test.rs&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The first one is obviously our production code.
The second file, &lt;em&gt;foo_test.rs&lt;/em&gt;,
contains all the tests we would previously put in the &lt;code&gt;mod tests { }&lt;/code&gt; construct.&lt;/p&gt;
&lt;p&gt;Seems pretty clean and straightforward, right?
Unfortunately, Rust will not accept this setup without some&amp;nbsp;convincing.&lt;/p&gt;
&lt;h4&gt;Family&amp;nbsp;problems&lt;/h4&gt;
&lt;p&gt;To understand why,
recall that the mere presence of some &lt;em&gt;.rs&lt;/em&gt; files
is not enough for the Rust compiler to care.
If we want them picked up and included in the project,
we also need to add some &lt;em&gt;module declarations&lt;/em&gt;&amp;nbsp;first.&lt;/p&gt;
&lt;p&gt;In other words, there must also be a &lt;em&gt;mod.rs&lt;/em&gt; file in this directory,
containing at the very least the following&amp;nbsp;content:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// (mod.rs)&lt;/span&gt;

&lt;span class="kn"&gt;mod&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#[cfg(test)]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kn"&gt;mod&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;foo_test&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now it should be clearer that something is&amp;nbsp;wrong.&lt;/p&gt;
&lt;p&gt;We got two modules here, but they are &lt;em&gt;siblings&lt;/em&gt;.
Both &lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;foo_test&lt;/code&gt; are on the same level,
children of whatever parent module contains them both.
More to the point, it&amp;#8217;s &lt;code&gt;foo_test&lt;/code&gt; that&amp;#8217;s not a child module of &lt;code&gt;foo&lt;/code&gt;,
meaning it can only see the &lt;code&gt;pub&lt;/code&gt;lic symbols of the&amp;nbsp;latter.&lt;/p&gt;
&lt;p&gt;This is not quite enough to write a proper unit test.
It definitely isn&amp;#8217;t for our initial FizzBuzz example,
because the &lt;code&gt;fizzbuzz_string&lt;/code&gt; function cannot even be&amp;nbsp;imported!&lt;/p&gt;
&lt;h4&gt;Existential&amp;nbsp;crises&lt;/h4&gt;
&lt;p&gt;Okay, so how about we move the &lt;code&gt;mod foo_test;&lt;/code&gt; declaration to &lt;em&gt;foo.rs&lt;/em&gt;?
This should be enough to establish the proper hierarchy.
After all, this is how the module tree is
&lt;a href="https://doc.rust-lang.org/book/crates-and-modules.html#defining-modules"&gt;normally reconstructed&lt;/a&gt;:
from the appropriate placement of the &lt;code&gt;mod&lt;/code&gt; statements.&lt;/p&gt;
&lt;p&gt;So, here we&amp;nbsp;go:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// (foo.rs)&lt;/span&gt;

&lt;span class="cp"&gt;#[cfg(test)]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kn"&gt;mod&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;foo_test&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;!-- --&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;error: cannot declare a new module at this location
  --&amp;gt; src/parent/foo.rs:4:5
   |
 4 | mod foo_test;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;#8230;Really?&lt;/p&gt;
&lt;p&gt;Well, yes. A declaration like this simply isn&amp;#8217;t allowed.
The reason for this is actually much less arbitrary than the error message would&amp;nbsp;indicate.&lt;/p&gt;
&lt;p&gt;To put it bluntly, &lt;code&gt;foo_test&lt;/code&gt; simply cannot &lt;em&gt;exist&lt;/em&gt; if it&amp;#8217;s introduced there.
To deliver on its declaration promise,
the submodule would have to reside &lt;em&gt;within &lt;code&gt;foo&lt;/code&gt; itself&lt;/em&gt;.
But of course, &lt;em&gt;foo.rs&lt;/em&gt; is just a file, so this setup is evidently&amp;nbsp;impossible.&lt;/p&gt;
&lt;p&gt;All in all, Rust seems to be looking for our module in all the wrong&amp;nbsp;places.&lt;/p&gt;
&lt;p&gt;Perhaps we can just &lt;em&gt;tell it&lt;/em&gt; where it should be going&amp;nbsp;instead?&amp;#8230;&lt;/p&gt;
&lt;h4&gt;The right&amp;nbsp;path&lt;/h4&gt;
&lt;p&gt;Enter the &lt;code&gt;#[path]&lt;/code&gt; attribute,
which fulfills this exact&amp;nbsp;purpose:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// (foo.rs)&lt;/span&gt;

&lt;span class="cp"&gt;#[cfg(test)]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#[path = &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;./foo_test.rs&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kn"&gt;mod&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;foo_test&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;#[path]&lt;/code&gt; tells the Rust compiler where to look for the &lt;code&gt;mod&lt;/code&gt;ule it is attached to.
Its argument is relative to the location of the outer module (like &lt;code&gt;foo&lt;/code&gt; here),
and can be either a single file, or a directory with &lt;em&gt;mod.rs&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Conceptually, this is similar to a custom &lt;code&gt;ClassLoader&lt;/code&gt; in Java,
or the common &lt;a href="http://xion.org.pl/2012/05/06/hacking-python-imports/"&gt;&lt;code&gt;sys.path&lt;/code&gt; hacks&lt;/a&gt; in Python.
Unlike those two languages, however,
the &lt;code&gt;#[path]&lt;/code&gt; attribute is only relevant at compile&amp;nbsp;time.&lt;/p&gt;
&lt;p&gt;Additionally, and somewhat &lt;a href="https://github.com/rust-lang/rust/issues/13156"&gt;confusingly&lt;/a&gt;,
&lt;code&gt;#[path]&lt;/code&gt; can also be applied &lt;em&gt;retroactively&lt;/em&gt;
to a module that the compiler has already located.
In such case, it will affect &lt;a href="https://doc.rust-lang.org/reference.html#modules"&gt;the lookup of any child modules&lt;/a&gt;
by making &lt;code&gt;rustc&lt;/code&gt; search for them in the new&amp;nbsp;location.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;With &lt;code&gt;#[path]&lt;/code&gt; handy,
it is therefore possible to implement custom layouts
of regular source modules and test&amp;nbsp;files.&lt;/p&gt;
&lt;p&gt;But like with every tool that can be used to defy conventions,
it should be used with the appropriate care.
While a straightforward and self-documenting approach described here
is unlikely to raise any eyebrows,
rewriting module paths willy-nilly is most certainly a bad&amp;nbsp;idea.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Okay, technically it &lt;em&gt;is&lt;/em&gt; possible to completely isolate them,
essentially by abusing the approach I describe later in this post.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="Rust"></category><category term="unit tests"></category><category term="testing"></category><category term="modules"></category></entry><entry><title>__all__ and wild imports inÂ Python</title><link href="http://xion.io/post/code/python-all-wild-imports.html" rel="alternate"></link><updated>2016-12-26T20:51:00-08:00</updated><author><name>Karol Kuczmarski</name></author><id>tag:xion.io,2016-12-26:post/code/python-all-wild-imports.html</id><summary type="html">&lt;p&gt;An often misunderstood piece of Python import machinery is the &lt;code&gt;__all__&lt;/code&gt; attribute.
While it is completely &lt;em&gt;optional&lt;/em&gt;,
it&amp;#8217;s common to see modules with the &lt;code&gt;__all__&lt;/code&gt; list populated&amp;nbsp;explicitly:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;__all__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Foo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c"&gt;# ...&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c"&gt;# ...&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;baz&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c"&gt;# ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Before explaining what the real purpose of &lt;code&gt;__all__&lt;/code&gt; is
(and how it relates to the titular wild imports),
let&amp;#8217;s deconstruct some common misconceptions by highlighting what it &lt;em&gt;isn&amp;#8217;t&lt;/em&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;__all__&lt;/code&gt; doesn&amp;#8217;t prevent any of the module symbols (functions, classes, etc.)
from being &lt;em&gt;directly&lt;/em&gt; imported.
In our the example, the seemingly omitted &lt;code&gt;baz&lt;/code&gt; function (which is not included in &lt;code&gt;__all__&lt;/code&gt;),
is still &lt;em&gt;perfectly importable&lt;/em&gt; by writing &lt;code&gt;from module import baz&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Similarly, &lt;code&gt;__all__&lt;/code&gt; doesn&amp;#8217;t influence what symbols are included in the results of
&lt;code&gt;dir(module)&lt;/code&gt; or &lt;code&gt;vars(module)&lt;/code&gt;. So in the case above, a &lt;code&gt;dir&lt;/code&gt; call would result in a
&lt;code&gt;['Foo', 'bar', 'baz']&lt;/code&gt; list, even though &lt;code&gt;'baz'&lt;/code&gt; does not occur in &lt;code&gt;__all__&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In other words, the content of &lt;code&gt;__all__&lt;/code&gt; is more of a convention
rather than a strict limitation.
Regardless of what you put there, every symbol defined in your module
will still be accessible from the&amp;nbsp;outside.&lt;/p&gt;
&lt;p&gt;This is a clear reflection of the common policy in Python:
assume &lt;a href="https://mail.python.org/pipermail/tutor/2003-October/025932.html"&gt;everyone is a consenting adult&lt;/a&gt;,
and that visibility controls are not necessary.
Without an explicit &lt;code&gt;__all__&lt;/code&gt; list,
Python simply puts all of the module &amp;#8220;public&amp;#8221; symbols there anyway&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h4&gt;The meaning of it &lt;code&gt;__all__&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;So, what does &lt;code&gt;__all__&lt;/code&gt; actually&amp;nbsp;effect?&lt;/p&gt;
&lt;p&gt;This is neatly summed up in this brief
&lt;a href="http://stackoverflow.com/a/2187636/434799"&gt;StackOverflow answer&lt;/a&gt;.
Simply speaking, its purpose is&amp;nbsp;twofold:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;It tells the readers of the source code &amp;#8212; be it humans or automated tools &amp;#8212;
what&amp;#8217;s the conventional &lt;em&gt;public &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/em&gt; exposed by the&amp;nbsp;module.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It lists names to import when performing the so-called &lt;em&gt;wild import&lt;/em&gt;:
&lt;code&gt;from module import *&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Because of the default content of &lt;code&gt;__all__&lt;/code&gt; that I mentioned earlier,
the public &lt;span class="caps"&gt;API&lt;/span&gt; of a module can also be defined implicitly.
Some style guides (like the &lt;a href="https://google.github.io/styleguide/pyguide.html"&gt;Google one&lt;/a&gt;)
are therefore relying on the &lt;code&gt;public&lt;/code&gt; and &lt;code&gt;_private&lt;/code&gt; naming exclusively.
Nevertheless, an explicit &lt;code&gt;__all__&lt;/code&gt; list is still a perfectly valid option,
especially considering that no approach offers any form of &lt;em&gt;actual&lt;/em&gt; access&amp;nbsp;control.&lt;/p&gt;
&lt;h4&gt;Import&amp;nbsp;star&lt;/h4&gt;
&lt;p&gt;The second point, however, has some real runtime&amp;nbsp;significance.&lt;/p&gt;
&lt;p&gt;In Python, like in many other languages,
it is recommended to be explicit about the exact functions and classes we&amp;#8217;re importing.
Commonly, the &lt;code&gt;import&lt;/code&gt; statement will thus take one of the following&amp;nbsp;forms:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;urllib.parse&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;randint&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;fatal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;warning&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;warn&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;urllib.parse&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;urlparse&lt;/span&gt;
&lt;span class="c"&gt;# etc.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In each case, it&amp;#8217;s easy to see the relevant &lt;em&gt;name&lt;/em&gt; being imported.
Regardless of the exact syntax and the possible presence of aliasing (&lt;code&gt;as&lt;/code&gt;),
it&amp;#8217;s always the last (qualified) name in the &lt;code&gt;import&lt;/code&gt; statement,
before a newline or&amp;nbsp;comma.&lt;/p&gt;
&lt;p&gt;Contrast this with an &lt;code&gt;import&lt;/code&gt; that ends with an&amp;nbsp;asterisk:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is called a &lt;em&gt;star&lt;/em&gt; or &lt;em&gt;wild import&lt;/em&gt;, and it isn&amp;#8217;t so straightforward.
This is also the reason why using it is &lt;a href="http://stackoverflow.com/a/3615206/434799"&gt;generally discouraged&lt;/a&gt;,
except for some &lt;a href="http://stackoverflow.com/a/3615238/434799"&gt;very specific situations&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Why? Because you cannot easily see what exact names are being imported here.
For that you&amp;#8217;d have to go to the module&amp;#8217;s source and &amp;#8212; you guessed it &amp;#8212;
look at the &lt;code&gt;__all__&lt;/code&gt; list&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h4&gt;Taming the&amp;nbsp;wild&lt;/h4&gt;
&lt;p&gt;Barring some less important details,
the mechanics of &lt;code&gt;import *&lt;/code&gt; could therefore be expressed in the following Python&amp;nbsp;(pseudo)code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;module&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;__temp&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;__name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;globals&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__temp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;__name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;__temp&lt;/span&gt;
&lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;__name&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;One interesting case to consider is
what happens when &lt;code&gt;__all__&lt;/code&gt; contains a &lt;em&gt;wrong&lt;/em&gt;&amp;nbsp;name.&lt;/p&gt;
&lt;p&gt;What if one of the strings there doesn&amp;#8217;t correspond to any name within the&amp;nbsp;module?&amp;#8230;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# foo.py&lt;/span&gt;
&lt;span class="n"&gt;__all__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Foo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;foo&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;foo&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="ne"&gt;AttributeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;module&amp;#39;&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="n"&gt;no&lt;/span&gt; &lt;span class="n"&gt;attribute&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Foo&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Quite predictably, &lt;code&gt;import *&lt;/code&gt; blows up.&lt;br&gt;
Notice, however, that regular import &lt;em&gt;still works&lt;/em&gt;.&lt;br&gt;&lt;/p&gt;
&lt;p&gt;All in all (ahem), this hints at a cute little trick which is also very&amp;nbsp;self-evident:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;__all__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;DO_NOT_WILD_IMPORT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Put this in a Python module, and no one will be able to &lt;code&gt;import *&lt;/code&gt; from it!&lt;br&gt;
Much more effective than any lint warning ;-)&lt;br&gt;&lt;/p&gt;
&lt;h4&gt;Test &lt;code&gt;__all__&lt;/code&gt; the&amp;nbsp;things&lt;/h4&gt;
&lt;p&gt;Jokes aside, this phenomenon (&lt;code&gt;__all__&lt;/code&gt; with an out-of-place name in it) can also backfire.
Especially when
&lt;a href="https://github.com/Xion/callee/blob/277add8170bd0c758f3c4a3068127e8229d2e2d1/callee/__init__.py#L31"&gt;reexporting&lt;/a&gt;,
it&amp;#8217;s relatively easy to introduce stray &lt;code&gt;'name'&lt;/code&gt; into &lt;code&gt;__all__&lt;/code&gt;:
one which doesn&amp;#8217;t correspond to any &lt;code&gt;name&lt;/code&gt; that&amp;#8217;s &lt;em&gt;actually present&lt;/em&gt; in the&amp;nbsp;namespace.&lt;/p&gt;
&lt;p&gt;If we commit such a mishap, we are inadvertently lying about the public &lt;span class="caps"&gt;API&lt;/span&gt; of our package.
What&amp;#8217;s worse is that this mistake can propagate through documentation generators,
and ultimately mislead our&amp;nbsp;users.&lt;/p&gt;
&lt;p&gt;While some linters may be able to catch this,
a &lt;a href="https://github.com/Xion/callee/blob/277add8170bd0c758f3c4a3068127e8229d2e2d1/tests/test_all.py#L10"&gt;simple test&lt;/a&gt;
like this&amp;nbsp;one:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Test that __all__ contains only names that are actually exported.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;yourpackage&lt;/span&gt;

    &lt;span class="n"&gt;missing&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;yourpackage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__all__&lt;/span&gt;
                  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;yourpackage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEmpty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;missing&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;__all__ contains unresolved names: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s"&gt;&amp;quot;, &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;missing&lt;/span&gt;&lt;span class="p"&gt;),))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;is a quick &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; easy way to ensure this never&amp;nbsp;happens.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;Public&amp;#8221; symbols have names that don&amp;#8217;t begin with underscore (&lt;code&gt;_&lt;/code&gt;).
Of course, &amp;#8220;non-public&amp;#8221; ones are still accessible
but are treated as implicitly unstable &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; discouraged.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;Or check what symbols there don&amp;#8217;t have a leading underscore.&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="Python"></category><category term="modules"></category><category term="imports"></category><category term="testing"></category></entry><entry><title>Simulating exceptions in Rust with IIFE</title><link href="http://xion.io/post/code/rust-iife.html" rel="alternate"></link><updated>2016-12-18T15:00:00-08:00</updated><author><name>Karol Kuczmarski</name></author><id>tag:xion.io,2016-12-17:post/code/rust-iife.html</id><summary type="html">&lt;p&gt;While many languages use exceptions for handling errors,
Rust prefers a slightly different, yet very classical approach: &lt;em&gt;return values&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Now, they aren&amp;#8217;t exactly the same thing as in C,
where the error is indicated by a special value within the same return type.
In Rust, &lt;a href="https://doc.rust-lang.org/std/result/"&gt;the &lt;code&gt;Result&lt;/code&gt; enum&lt;/a&gt; can neatly separate the two,
in similar vein to how ad-hoc tuples in Go do&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;.
But unlike Go, Rust also offers additional facilities for &lt;em&gt;error propagation&lt;/em&gt;,
including the &lt;a href="https://doc.rust-lang.org/std/macro.try.html"&gt;&lt;code&gt;try!&lt;/code&gt; macro&lt;/a&gt;
and &lt;a href="https://m4rw3r.github.io/rust-questionmark-operator"&gt;the recently stabilized &lt;code&gt;?&lt;/code&gt; operator&lt;/a&gt;.
And finally,
the &lt;code&gt;Result&lt;/code&gt; wrappings can be straightforwardly &lt;a href="https://doc.rust-lang.org/std/result/enum.Result.html#method.unwrap"&gt;unpacked&lt;/a&gt;,
possibly by &lt;a href="https://doc.rust-lang.org/std/result/enum.Result.html#method.unwrap_or"&gt;defaulting&lt;/a&gt; to a known safe&amp;nbsp;value.&lt;/p&gt;
&lt;p&gt;Some conveniences of exceptions may be hard to pass up, though.
The &lt;code&gt;try&lt;/code&gt;-&lt;code&gt;catch&lt;/code&gt; construct is evidently one of them,
and Rust might eventually get it in
&lt;a href="https://github.com/rust-lang/rfcs/blob/master/text/0243-trait-based-exception-handling.md"&gt;one form&lt;/a&gt;
or another.
Before that happens, however, there is a trick that can often work as an acceptable&amp;nbsp;substitute.&lt;/p&gt;
&lt;h4&gt;Many &lt;code&gt;let&lt;/code&gt;s&lt;/h4&gt;
&lt;p&gt;Here&amp;#8217;s an example where it can be very&amp;nbsp;useful.&lt;/p&gt;
&lt;p&gt;Have a look at the following function.
Its purpose is to retrieve a GitHub login of a user who owns a specific &lt;em&gt;gist&lt;/em&gt;
&amp;#8212; a small sample of code posted to the &lt;em&gt;gists.github.com&lt;/em&gt; website&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s assume we have already talked to GitHub &lt;span class="caps"&gt;API&lt;/span&gt;
and received the following &lt;span class="caps"&gt;JSON&lt;/span&gt; response from its relevant&amp;nbsp;endpoint:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;12345678&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;owner&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;login&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Octocat&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="err"&gt;...&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="err"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Parsing it is easy: we can do it with
the &lt;a href="https://crates.io/crates/rustc-serialize"&gt;&lt;em&gt;rustc_serialize&lt;/em&gt; crate&lt;/a&gt;,
among other options.
What proves a little more involved is to dig through the &lt;span class="caps"&gt;JSON&lt;/span&gt; tree
in order to reach the interesting&amp;nbsp;value:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;rustc_serialize&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Json&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;


&lt;span class="c-Doc"&gt;/// Retrieve the gist owner from a JSON received from&lt;/span&gt;
&lt;span class="c-Doc"&gt;/// the /gists/$ID endpoint of the GitHub API.&lt;/span&gt;
&lt;span class="c-Doc"&gt;///&lt;/span&gt;
&lt;span class="c-Doc"&gt;/// If the gist is anonymous, &amp;quot;anonymous&amp;quot; is returned.&lt;/span&gt;
&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;gist_owner_from_info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;Json&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_object&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;owner&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;and_then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_object&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;login&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;and_then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_string&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_owned&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;anonymous&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;into&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Whew! I guess we&amp;#8217;re lucky we don&amp;#8217;t need to go &lt;em&gt;too&lt;/em&gt; deep into that &lt;span class="caps"&gt;JSON&lt;/span&gt;.
The code is clearly exhibiting a rightward slant,
which some people refer to as &lt;a href="https://blog.codinghorror.com/flattening-arrow-code/"&gt;the &amp;#8220;arrow code&amp;#8221;&lt;/a&gt;,
Unsurprisingly, it is generally considered bad for&amp;nbsp;readability.&lt;/p&gt;
&lt;p&gt;There are few other ways of writing this, of course,
including a style reminiscent of JavaScript promises &amp;#8212;
that is, relying completely on
&lt;a href="https://doc.rust-lang.org/std/option/enum.Option.html#method.and_then"&gt;the &lt;code&gt;and_then&lt;/code&gt; method&lt;/a&gt;.
Neither seem very satisfying, though, especially if you compare it with something like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;owner&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;login&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;KeyError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;anonymous&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Yes, exceptions are quite useful&amp;nbsp;sometimes.&lt;/p&gt;
&lt;p&gt;So, how can we get something like this in&amp;nbsp;Rust?&lt;/p&gt;
&lt;h4&gt;JavaScript for the&amp;nbsp;rescue&lt;/h4&gt;
&lt;p&gt;Succor comes from an unexpected direction.
To emulate exceptions &amp;#8212; specifically, the &lt;code&gt;try&lt;/code&gt;-&lt;code&gt;catch&lt;/code&gt; exception blocks &amp;#8212;
we can utilize a technique that is most popular in&amp;#8230;&amp;nbsp;JavaScript.&lt;/p&gt;
&lt;p&gt;At least until &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let"&gt;recently&lt;/a&gt;,
JavaScript did not have a block local scope.
Since every &lt;code&gt;var&lt;/code&gt;iable declaration within a function is &lt;em&gt;hoisted&lt;/em&gt; to the top of that function,
it essentially makes function scope the only usable one (besides global, of&amp;nbsp;course).&lt;/p&gt;
&lt;p&gt;As a result, a variety of JavaScript idioms rely on introducing &amp;#8220;superfluous&amp;#8221; &lt;code&gt;function&lt;/code&gt;s,
solely for the purpose of creating a nested scope.
Many times, those functions are neither named nor stored in any variable;
rather, they are &lt;em&gt;immediately invoked&lt;/em&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is what is commonly understood as Immediately Invoked Function Expression,
or &lt;span class="caps"&gt;IIFE&lt;/span&gt; for&amp;nbsp;short.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;An oft-cited example involves an &lt;span class="caps"&gt;IIFE&lt;/span&gt; which itself returns another&amp;nbsp;function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;$para&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;p#&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// &amp;lt;p id=&amp;quot;0&amp;quot;&amp;gt;, &amp;lt;p id=&amp;quot;1&amp;quot;&amp;gt;, etc.&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;clickHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="c1"&gt;// IIFE!&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Clicked element no. &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;})(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;$para&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;click&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;clickHandler&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The function expression is necessary here,
because it allows to control what exactly goes into the &lt;em&gt;closure&lt;/em&gt; of the inner function.
If the &lt;code&gt;clickHandler&lt;/code&gt;s were assigned the &lt;code&gt;function() { alert(...) }&lt;/code&gt; expression directly,
they would all close over the same loop counter variable.
All would then display the exact same&amp;nbsp;message.&lt;/p&gt;
&lt;p&gt;We don&amp;#8217;t need to employ those workarounds in Rust.
Thanks to local scoping,
a simple pair of &lt;code&gt;{&lt;/code&gt; braces &lt;code&gt;}&lt;/code&gt; would work exactly the same.
You can imagine a direct rewrite of the above example, though,
where an anonymous closure is used to similar&amp;nbsp;effect:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// WARNING: Not idiomatic! (Also not a real DOM library).&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;para&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dom&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_string&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="n"&gt;unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;click_handler&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Event&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dom&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exec_js&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;alert(&amp;#39;Clicked element no. #{}&amp;#39;);&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;para&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_event_listener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Event&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Click&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;click_handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In other words, Rust supports IIFEs just&amp;nbsp;fine.&lt;/p&gt;
&lt;h4&gt;Just put a function on&amp;nbsp;it&lt;/h4&gt;
&lt;p&gt;Okay, this is quite amusing and probably pretty neat.
But does it help us with the error handling story&amp;nbsp;exactly?&amp;#8230;&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s take another stab at rewriting the &lt;code&gt;gist_owner_from_info&lt;/code&gt; routine.
This time, we&amp;#8217;ll extract the meaty part into a separate function.
We will also take advantage of one trivial,
but very useful &lt;a href="https://crates.io/crates/try_opt"&gt;&lt;em&gt;try_opt&lt;/em&gt; crate&lt;/a&gt;
which is essentially an equivalent of the &lt;code&gt;try!&lt;/code&gt; macro for &lt;code&gt;Option&lt;/code&gt;s:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#[macro_use]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;extern&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;crate&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;try_opt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;gist_owner_from_info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;Json&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;gist_owner_from_info_internal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;unwrap_or&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;anonymous&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;into&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;gist_owner_from_info_internal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;Json&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;try_opt&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_object&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;owner&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;try_opt&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;owner&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;and_then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_object&lt;/span&gt;&lt;span class="p"&gt;()));&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;try_opt&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;login&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;and_then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_string&lt;/span&gt;&lt;span class="p"&gt;()));&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_owned&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now this should be a little easier on the eyes.
(And if you want, you can eschew &lt;code&gt;and_then&lt;/code&gt; completely in favor of more &lt;code&gt;try_opt!&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;The downside is that we now have this &lt;code&gt;_internal&lt;/code&gt; function
that&amp;#8217;s awkwardly sticking out.
We could pull it in, and turn it into an &lt;em&gt;inner&lt;/em&gt; function, but why stop half-way?
Let&amp;#8217;s just make it an &lt;span class="caps"&gt;IIFE&lt;/span&gt;&amp;nbsp;already:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;gist_owner_from_info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;Json&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;try_opt&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_object&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;owner&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;try_opt&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;owner&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;and_then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_object&lt;/span&gt;&lt;span class="p"&gt;()));&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;try_opt&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;login&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;and_then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_string&lt;/span&gt;&lt;span class="p"&gt;()));&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nb"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_owned&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}().&lt;/span&gt;&lt;span class="n"&gt;unwrap_or&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;anonymous&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;into&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Not bad, eh? The analogies with exception handling should be pretty evident, too&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The closure itself works as a &lt;code&gt;try&lt;/code&gt; block, with closure&amp;#8217;s body containing the &amp;#8220;guarded&amp;#8221;&amp;nbsp;code.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;unwrap&lt;/code&gt; family of methods (especially &lt;code&gt;unwrap_or_else&lt;/code&gt;) dubs for a &lt;code&gt;catch&lt;/code&gt;/&lt;code&gt;except&lt;/code&gt; section.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sure, we do need &lt;code&gt;try!&lt;/code&gt; (or &lt;code&gt;try_opt!&lt;/code&gt;) macros to mark instructions
that may &amp;#8220;throw an exception&amp;#8221;, but with the &lt;code&gt;?&lt;/code&gt;-based syntax it shouldn&amp;#8217;t be too big of a deal.
And when the time comes, this code will be very easy to port to a
&lt;a href="https://github.com/rust-lang/rfcs/blob/master/text/0243-trait-based-exception-handling.md"&gt;trait-based exception handling&lt;/a&gt;
solution that&amp;#8217;s currently in the&amp;nbsp;works.&lt;/p&gt;
&lt;p&gt;Oh, and the best part? Both Rust and the underlying &lt;span class="caps"&gt;LLVM&lt;/span&gt; are very adept at
&lt;a href="https://ruudvanasseldonk.com/2016/11/30/zero-cost-abstractions"&gt;inlining closures&lt;/a&gt;,
so everything here should compile to optimal&amp;nbsp;code.&lt;/p&gt;
&lt;h4&gt;Bonus: a lifetime&amp;nbsp;conundrum&lt;/h4&gt;
&lt;p&gt;Well, &lt;em&gt;almost&lt;/em&gt; optimal.
There is one more thing left to do before we can call this a truly &lt;em&gt;zero-cost&lt;/em&gt;&amp;nbsp;abstraction.&lt;/p&gt;
&lt;p&gt;We need to stop allocating so damn&amp;nbsp;much!&lt;/p&gt;
&lt;p&gt;It should be pretty obvious that
the function doesn&amp;#8217;t need to create a brand new &lt;code&gt;String&lt;/code&gt; every time it&amp;#8217;s called.
The text is in the input &lt;code&gt;Json&lt;/code&gt;, and we take that &lt;code&gt;Json&lt;/code&gt; by reference already.
It&amp;#8217;s only fair we stop creating &lt;code&gt;String&lt;/code&gt;s and simply return a &lt;code&gt;&amp;amp;str&lt;/code&gt; reference&amp;nbsp;instead.&lt;/p&gt;
&lt;p&gt;In fact, this should be as easy as removing the &lt;code&gt;to_owned&lt;/code&gt;/&lt;code&gt;into&lt;/code&gt; calls,&amp;nbsp;right?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;gist_owner_from_info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;Json&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="kt"&gt;str&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;amp;&lt;/span&gt;&lt;span class="kt"&gt;str&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;try_opt&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_object&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;owner&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;try_opt&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;owner&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;and_then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_object&lt;/span&gt;&lt;span class="p"&gt;()));&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;login&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;and_then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_string&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}().&lt;/span&gt;&lt;span class="n"&gt;unwrap_or&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;anonymous&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Wrong, apparently. If you present this code to the compiler,
it will serve you quite a mouthful of an error,
including helpful tidbits in the vein of &amp;#8220;expected A, found&amp;nbsp;A&amp;#8221;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;error[E0495]: cannot infer an appropriate lifetime for autoref due to conflicting requirements
   --&amp;gt; src/github.rs:3:34
    |
  3 |         let info = try_opt!(info.as_object());
    |                                  ^^^^^^^^^
    |
note: first, the lifetime cannot outlive the anonymous lifetime #1 defined on the block at 1:45...
   --&amp;gt; src/github.rs:1:46
    |
  1 | fn gist_owner_from_info(info: &amp;amp;Json) -&amp;gt; &amp;amp;str {
    |                                              ^
note: ...so that reference does not outlive borrowed content
   --&amp;gt; src/github.rs:3:29
    |
  3 |         let info = try_opt!(info.as_object());
    |                             ^^^^
note: but, the lifetime must be valid for the anonymous lifetime #1 defined on the block at 2:23...
   --&amp;gt; src/github.rs:2:24
    |
  2 |     || -&amp;gt; Option&amp;lt;&amp;amp;str&amp;gt; {
    |                        ^
note: ...so that expression is assignable (expected std::option::Option&amp;lt;&amp;amp;str&amp;gt;, found std::option::Option&amp;lt;&amp;amp;str&amp;gt;)
   --&amp;gt; src/github.rs:5:9
    |
  5 |         owner.get(&amp;quot;login&amp;quot;).and_then(|l| l.as_string())
    |
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The crux of this verbiage is that the Rust compiler is unable to reconcile the lifetime
of the closure&amp;#8217;s return value, the input, and final result of the&amp;nbsp;function.&lt;/p&gt;
&lt;p&gt;It shouldn&amp;#8217;t really be trying very hard, though, for the lifetime is obvious.
It&amp;#8217;s the same as the one implicitly attached to the input &lt;code&gt;&amp;amp;Json&lt;/code&gt;.
Seems like in this case, we need to be a little more helpful and label it&amp;nbsp;explicitly:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;gist_owner_from_info&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nl"&gt;&amp;#39;i&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;&amp;#39;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Json&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;&amp;#39;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;str&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;&amp;#39;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;str&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// (rest as before)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Voila, this should now compile without any&amp;nbsp;issues.&lt;/p&gt;
&lt;p&gt;Once again, &amp;#8220;Keep calm and add more &lt;code&gt;'lifetimes&lt;/code&gt;&amp;#8221; proves to be an effective approach&amp;nbsp;;)&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Technically, they aren&amp;#8217;t called tuples there but
&amp;#8220;&lt;a href="https://golang.org/doc/effective_go.html#multiple-returns"&gt;multiple return values&lt;/a&gt;&amp;#8220;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;This is something I needed to do when rewriting
&lt;a href="https://github.com/Xion/gisht.py"&gt;this Python project of mine&lt;/a&gt; to Rust.&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;This is also the closest Rust can currently get to a &lt;code&gt;do&lt;/code&gt; notation from Haskell,
at least without any macro-based hacks.&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="Rust"></category><category term="IIFE"></category><category term="error handling"></category><category term="exceptions"></category><category term="closures"></category><category term="lambdas"></category></entry><entry><title>Optional arguments in RustÂ 1.12</title><link href="http://xion.io/post/code/rust-optional-args.html" rel="alternate"></link><updated>2016-09-29T19:51:00-07:00</updated><author><name>Karol Kuczmarski</name></author><id>tag:xion.io,2016-09-29:post/code/rust-optional-args.html</id><summary type="html">&lt;p&gt;Today&amp;#8217;s &lt;a href="https://blog.rust-lang.org/2016/09/29/Rust-1.12.html"&gt;announcement of Rust 1.12&lt;/a&gt; contains,
among other things, this innocous little&amp;nbsp;tidbit:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Option&lt;/code&gt; implements &lt;code&gt;From&lt;/code&gt; for its contained&amp;nbsp;type&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you&amp;#8217;re not very familiar with it,
&lt;code&gt;From&lt;/code&gt; is a basic &lt;a href="https://doc.rust-lang.org/std/convert/trait.From.html"&gt;converstion trait&lt;/a&gt;
which any Rust type can implement.
By doing so, it defines how to create its values &lt;em&gt;from&lt;/em&gt; some other type &amp;#8212; hence its&amp;nbsp;name.&lt;/p&gt;
&lt;p&gt;Perhaps the most widespread application of this trait (and its &lt;code&gt;from&lt;/code&gt; method)
is allocating owned &lt;code&gt;String&lt;/code&gt; objects from literal &lt;code&gt;str&lt;/code&gt; values:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello, world!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What the change above means is that we can do similar thing with the &lt;code&gt;Option&lt;/code&gt; type:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;maybe_int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;At a first glance, this doesn&amp;#8217;t look like a big deal at all.
For one, this syntax is much more wordy than the traditional &lt;code&gt;Some(42)&lt;/code&gt;,
so it&amp;#8217;s not very clear what benefits it&amp;nbsp;offers.&lt;/p&gt;
&lt;p&gt;But this first impression is rather deceptive.
In many cases, this change can actually &lt;em&gt;reduce&lt;/em&gt; the number of times we have to type &lt;code&gt;Some(x)&lt;/code&gt;,
allowing us to replace it with just &lt;code&gt;x&lt;/code&gt;.
That&amp;#8217;s because this new &lt;code&gt;impl&lt;/code&gt; brings Rust quite a bit closer to having &lt;em&gt;optional function arguments&lt;/em&gt;
as a first class feature in the&amp;nbsp;language.&lt;/p&gt;
&lt;p&gt;Until now, a function defined like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;maybe_plus_5&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unwrap_or&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;was the closest Rust had to default argument values.
While this works perfectly &amp;#8212; and is bolstered by compile-time checks! &amp;#8212;
callers are unfortunately required to build the &lt;code&gt;Option&lt;/code&gt; objects&amp;nbsp;manually:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;maybe_plus_5&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// OK&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;maybe_plus_5&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;None&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;// OK&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;maybe_plus_5&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// error!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; implements &lt;code&gt;From&amp;lt;T&amp;gt;&lt;/code&gt;, however, this can change for the better.
&lt;em&gt;Much&lt;/em&gt; better, in fact, for the last line above can be made valid.
All that is necessary is to take advantage of this new &lt;code&gt;impl&lt;/code&gt; in the function&amp;nbsp;definition:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;maybe_plus_5&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;From&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;unwrap_or&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Unfortunately, this results in quite a bit of complexity,
up to and including the &lt;code&gt;where&lt;/code&gt; clause: a telltale sign of convoluted, generic code.
Still, this trade-off may be well worth it,
as a function defined once can be called many times throughout the code base,
and possibly across multiple crates if it&amp;#8217;s a part of the public &lt;span class="caps"&gt;API&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;But we can do better than this.
Indeed, using the &lt;code&gt;From&lt;/code&gt; trait to constrain argument types is just complicating things for no good reason.
What we should so instead is use the symmetrical trait, &lt;a href="https://doc.rust-lang.org/std/convert/trait.Into.html"&gt;&lt;code&gt;Into&lt;/code&gt;&lt;/a&gt;,
and take advantage of its standard &lt;code&gt;impl&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;impl&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;U&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Into&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;U&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;U&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;From&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once we translate it to the &lt;code&gt;Option&lt;/code&gt; case (now that &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; implements &lt;code&gt;From&amp;lt;T&amp;gt;&lt;/code&gt;),
we can switch the trait bounds around and get rid of the &lt;code&gt;where&lt;/code&gt; clause&amp;nbsp;completely:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;maybe_plus_5&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Into&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;into&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;unwrap_or&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As a small bonus, the function body has also gotten a little&amp;nbsp;simpler.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;So, should you go wild and change all your functions taking &lt;code&gt;Option&lt;/code&gt;als to look like this?&amp;#8230;
Well, technically you can, although the benefits may not outweigh the downsides
for small, private functions that are called&amp;nbsp;infrequently.&lt;/p&gt;
&lt;p&gt;On the other hand, if you can afford to only support Rust 1.12 and up,
this technique can make it much more pleasant to use the external &lt;span class="caps"&gt;API&lt;/span&gt; of your&amp;nbsp;crates.&lt;/p&gt;
&lt;p&gt;What&amp;#8217;s best is the &lt;em&gt;full backward compatibility&lt;/em&gt; with any callers that still pass &lt;code&gt;Some(x)&lt;/code&gt;:
for them, the old syntax will continue to work exactly like before.
Also note that the Rust compiler is smart about eliding the no-op conversion calls like the &lt;code&gt;Into::into&lt;/code&gt; above,
so you shouldn&amp;#8217;t observe any changes in the performance department&amp;nbsp;either.&lt;/p&gt;
&lt;p&gt;And who knows, maybe at some point Rust makes the final leap, and allows skipping the &lt;code&gt;None&lt;/code&gt;s?&amp;#8230;&lt;/p&gt;</summary><category term="Rust"></category><category term="arguments"></category><category term="parameters"></category><category term="functions"></category></entry><entry><title>Flappy Bird in 1234 bytes ofÂ Bash</title><link href="http://xion.io/post/code/bash-flappy-bird.html" rel="alternate"></link><updated>2016-08-25T22:07:00-07:00</updated><author><name>Karol Kuczmarski</name></author><id>tag:xion.io,2016-08-25:post/code/bash-flappy-bird.html</id><summary type="html">&lt;p&gt;Contrary to an infamous opinion from a bygone era,
&lt;span class="caps"&gt;640KB&lt;/span&gt; is not really sufficient for anyone anymore.
A typical website exceeds that easily,
and executable programs are usually measured in&amp;nbsp;megabytes.&lt;/p&gt;
&lt;p&gt;But what if you only had 1234 &lt;em&gt;bytes&lt;/em&gt; to work&amp;nbsp;with?&amp;#8230;&lt;/p&gt;
&lt;p&gt;A friend of mine, &lt;a href="http://gynvael.coldwind.pl/?blog=1&amp;amp;lang=en"&gt;Gynvael Coldwind&lt;/a&gt;,
organized a game programming compo&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; that had precisely this limitation.
Unlike most demoscene ones, however, the size limit here
applies to either the final binary &lt;em&gt;or&lt;/em&gt; its source code.
This can be chosen at the participant&amp;#8217;s&amp;nbsp;discretion.&lt;/p&gt;
&lt;p&gt;Since my currently favorite compiled language produces
&lt;a href="https://lifthrasiir.github.io/rustlog/why-is-a-rust-executable-large.html"&gt;the exact opposite of small binaries&lt;/a&gt;,
I was quite intrigued by the source code option.
But as the rules say, the final game must run
on a &lt;em&gt;clean&lt;/em&gt; installation (only standard packages) of either Windows or Ubuntu Linux.
The choice of viable languages and technologies was therefore rather&amp;nbsp;limited.&lt;/p&gt;
&lt;p&gt;It was time to get &lt;em&gt;a little&lt;/em&gt;&amp;nbsp;creative.&lt;/p&gt;
&lt;h4&gt;Game&amp;nbsp;theory&lt;/h4&gt;
&lt;p&gt;What must an environment provide to be a suitable platform for game development?
Not much, really. We only need to be able&amp;nbsp;to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;put stuff on the&amp;nbsp;screen&lt;/li&gt;
&lt;li&gt;react to user&amp;nbsp;input&lt;/li&gt;
&lt;li&gt;execute time-dependent&amp;nbsp;logic&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You could arguably get away without the last one,
but the kind of games you would end up with
had gone out of fashion about &lt;a href="https://en.wikipedia.org/wiki/Zork"&gt;half a century ago&lt;/a&gt;.
For the &amp;#8220;real&amp;#8221; arcade games, we really ought to run our code at least a dozen times per&amp;nbsp;second.&lt;/p&gt;
&lt;p&gt;There&amp;#8217;s only a handful of standard technologies that allow all of this out of the&amp;nbsp;box.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m a wee bit out of touch with Windows these days
but on Linux, there&amp;#8217;s one thing that I really wanted to take for a serious spin.
And luckily for me, it also has one extremely terse language to go hand in hand&amp;nbsp;with.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m talking, of course, about the &lt;strong&gt;&lt;span class="caps"&gt;ANSI&lt;/span&gt; terminal&lt;/strong&gt; that can be scripted in Bash.
If there ever was anything that worked anywhere by default,
then this got to be it&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h4&gt;&amp;#8230;put into&amp;nbsp;practice&lt;/h4&gt;
&lt;p&gt;Note that I&amp;#8217;ve stressed the &amp;#8220;terminal&amp;#8221; part.
The shell itself is a neat instrument,
but (perhaps surprisingly) it doesn&amp;#8217;t actually concern itself
with displaying anything on the&amp;nbsp;screen.&lt;/p&gt;
&lt;p&gt;This has traditionally been the job of a &lt;em&gt;terminal emulator&lt;/em&gt;.
To this end, it has a couple of &lt;a href="http://wiki.bash-hackers.org/scripting/terminalcodes"&gt;special codes&lt;/a&gt;
that are undoubtedly useful for an aspiring indie shell game developer.
They are what allows us to display things in a specific position on the screen,
complete with chosen color, background color, and (text)&amp;nbsp;style.&lt;/p&gt;
&lt;p&gt;So this nails down our first requisite&amp;nbsp;feature.&lt;/p&gt;
&lt;p&gt;As for the second one, the vanilla &lt;a href="http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_08_02.html"&gt;&lt;code&gt;read&lt;/code&gt; command&lt;/a&gt;
supports everything we may need for handling user input.
The only real &amp;#8220;trick&amp;#8221; is passing the &lt;code&gt;-n&lt;/code&gt; flag
which makes it wait for a specific number of characters (e.g. one)
rather than a whole line ending with &lt;em&gt;Enter&lt;/em&gt;.
Add a few more flags &amp;#8212; like the one that prevents text from being echoed back to the console &amp;#8212;
and you can make a rudimentary input&amp;nbsp;loop:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;KEY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; :&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="nb"&gt;read&lt;/span&gt; -rsn &lt;span class="m"&gt;1&lt;/span&gt; KEY
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I can imagine, however, that you&amp;#8217;d want to do other things besides just waiting for input.
Stuff like &amp;#8220;updating the game state&amp;#8221; and &amp;#8220;drawing the next frame&amp;#8221;
is generally considered pretty important in&amp;nbsp;games.&lt;/p&gt;
&lt;p&gt;Normally, we would deal with those things in between checking for input events,
leading to a particular structure of the so-called &lt;a href="http://gameprogrammingpatterns.com/game-loop.html"&gt;real-time loop&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But the shell doesn&amp;#8217;t really handle input via &amp;#8220;events&amp;#8221;.
Instead, you just ask for some text and wait until you get it.
There is no &amp;#8220;peek mode&amp;#8221; that&amp;#8217;d allow to squeeze in some rendering logic before the next key&amp;nbsp;press.&lt;/p&gt;
&lt;p&gt;What do we do, then, with a tight loop that leaves us no wiggle&amp;nbsp;room?&amp;#8230;&lt;/p&gt;
&lt;p&gt;Why, we take a crowbar and pry it&amp;nbsp;open!&lt;/p&gt;
&lt;h5&gt;(Don&amp;#8217;t) be&amp;nbsp;alarmed&lt;/h5&gt;
&lt;p&gt;Let&amp;#8217;s start by noticing that to run some code whenever there is nothing else to do
has a rough equivalent of running it &lt;em&gt;periodically&lt;/em&gt;.
This isn&amp;#8217;t an exactly new observation:
the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setTimeout"&gt;&lt;code&gt;setTimeout&lt;/code&gt; function&lt;/a&gt; in JavaScript
has been the basis of &amp;#8220;real-time&amp;#8221; animation
since the 90s era of falling snowflakes, and up to the contemporary browser games&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Neither does the shell nor the hosting terminal support anything like &lt;code&gt;setTimeout&lt;/code&gt;, though.
But fortunately, they don&amp;#8217;t need to: Linux itself does.
And it accomplishes it quite effortlessly, due to the sole fact of &lt;em&gt;being an operating system&lt;/em&gt;.
All we have to do is access some of its capabilities directly from the shell&amp;nbsp;script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;KEY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;DT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0.05  &lt;span class="c"&gt;# timeout value in seconds&lt;/span&gt;

tick&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;# .. do stuff ...&lt;/span&gt;
    &lt;span class="o"&gt;(&lt;/span&gt; sleep &lt;span class="nv"&gt;$DT&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;kill &lt;/span&gt;ALRM &lt;span class="nv"&gt;$$&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="nb"&gt;trap &lt;/span&gt;tick ALRM
tick
&lt;span class="k"&gt;while&lt;/span&gt; :&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="nb"&gt;read&lt;/span&gt; -rsn &lt;span class="m"&gt;1&lt;/span&gt; KEY
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What we&amp;#8217;re doing here is set up the &lt;code&gt;tick&lt;/code&gt; function to be
a &lt;em&gt;&lt;a href="https://en.wikipedia.org/wiki/Unix_signal"&gt;signal&lt;/a&gt; handler&lt;/em&gt;.
A callback, if you&amp;nbsp;will.&lt;/p&gt;
&lt;p&gt;Inside of this callback, we can do all the state updates and drawing we need,
as long as we follow it with &amp;#8220;scheduling&amp;#8221; of the next &lt;code&gt;tick&lt;/code&gt; call.
As a direct equivalent of a &lt;code&gt;setTimeout&lt;/code&gt; invocation, this can be done&amp;nbsp;by:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;starting a subshell to run in the background (with &lt;code&gt;&amp;amp;&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;letting it sleep for however long we want to delay the next&amp;nbsp;update&lt;/li&gt;
&lt;li&gt;sending a signal to the main script (&lt;code&gt;kill $$&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The signal we chose is of course &lt;code&gt;SIGALRM&lt;/code&gt;&lt;sup id="fnref:4"&gt;&lt;a class="footnote-ref" href="#fn:4" rel="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt;.
Technically, however, it can be anything,
as long as we can set up a &lt;code&gt;trap&lt;/code&gt; to actually handle&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;In any case, success! Bash is officially a game programming&amp;nbsp;platform!&lt;/p&gt;
&lt;h4&gt;Integration in&amp;nbsp;parts&lt;/h4&gt;
&lt;p&gt;And so having figured out the technicalities,
I was faced with the crucial dilemma: &lt;em&gt;what&lt;/em&gt; game could I actually&amp;nbsp;write?&lt;/p&gt;
&lt;p&gt;Nothing too complicated, that&amp;#8217;s for sure.
After the initial scaffolding has used up about 1/4 of the harsh size limit,
I knew that radical simplicity was the order of the&amp;nbsp;day.&lt;/p&gt;
&lt;p&gt;And so I went for possibly &lt;a href="https://en.wikipedia.org/wiki/Flappy_Bird"&gt;the most trivial game ever&lt;/a&gt;.&lt;/p&gt;
&lt;p style="text-align: center"&gt;
    &lt;img src="https://upload.wikimedia.org/wikipedia/en/5/52/Flappy_Bird_gameplay.png" alt="flap flap"&gt;&lt;/br&gt;
    &lt;small&gt;Sorry, Pong!&lt;/small&gt;
&lt;/p&gt;

&lt;p&gt;Then, after hours of (&lt;em&gt;ahem&lt;/em&gt;) &lt;a href="https://www.flappybird.com/"&gt;meticulous research&lt;/a&gt;,
I managed to reverse-engineer the core&amp;nbsp;mechanic:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;let the bird fall down with a constant&amp;nbsp;acceleration&lt;/li&gt;
&lt;li&gt;to jump, give it some upwards-facing&amp;nbsp;velocity&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Actually &lt;a href="https://github.com/Xion/flappybash/blob/0372ef9173c921ff79c64553974cea0b02c2bb3f/flappybash.sh"&gt;coding this&lt;/a&gt;
in Bash was mostly a matter of finding out how to perform floating-point calculations.
Rather unsurprisingly, this is done through
&lt;a href="https://en.wikipedia.org/wiki/Bc_(programming_language)#Using_bc_in_shell_scripts"&gt;an external program&lt;/a&gt;,
while truncating of the fractional part involves &amp;#8212; wait for it &amp;#8212;
&lt;a href="http://unix.stackexchange.com/a/167059"&gt;&lt;em&gt;string formatting&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Pipe&amp;nbsp;dream&lt;/h4&gt;
&lt;p&gt;Based on the above nuggets of Stack Overflow wisdom,
you&amp;#8217;ve probably figured out that Bash isn&amp;#8217;t exactly what you would call &lt;em&gt;a programming language&lt;/em&gt;.
With a little bit of perseverance, however, we can make it do our bidding&amp;#8230;
&lt;em&gt;some&lt;/em&gt; fraction of the&amp;nbsp;time.&lt;/p&gt;
&lt;p&gt;So far, I had the player character &amp;#8212; a beautiful red rectangle &amp;#8212;
fall down under the constant force of gravity, and maybe ascend if the Space key has been pressed.
But a heroic protagonist necessitates the presence of formidable adversaries,
so my next step was to figure out how to implement this crucial gameplay&amp;nbsp;mechanic.&lt;/p&gt;
&lt;p&gt;Which one?&amp;#8230; Pipes, of&amp;nbsp;course.&lt;/p&gt;
&lt;p&gt;Pipes in &lt;em&gt;Bash&lt;/em&gt;.&lt;/p&gt;
&lt;p style="text-align: center"&gt;
    &lt;img src="http://xion.io/images/irony-sign.jpg" alt="...ahem"&gt;
&lt;/p&gt;

&lt;p&gt;It was pretty evident I&amp;#8217;m gonna need to represent them somehow,
and Bash isn&amp;#8217;t exactly known for its strong repertoire of data structures.
Starting from version 4.0, it does however have &lt;a href="http://tldp.org/LDP/abs/html/arrays.html"&gt;arrays&lt;/a&gt;,
so there is at least something we can work&amp;nbsp;with.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s not get &lt;em&gt;too&lt;/em&gt; carried away, though.
The somewhat obvious idea of mirroring the entire game field in a (pseudo) 2D array
of pipe/not-pipe turned out to be completely unworkable.
The fill rate of most (all?) terminal emulators is nowhere near sufficient
to permit redrawing of the whole screen &lt;em&gt;and&lt;/em&gt; maintaining &lt;span class="caps"&gt;FPS&lt;/span&gt; value above the slideshow&amp;nbsp;threshold.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/Xion/flappybash/commit/467fe6429fa8dcc7005f5324278804243204ec9a"&gt;What I went with instead&lt;/a&gt;
was a 1D array for the pipe itself, and a separate variable to denote its horizontal position.
Working from there, it wasn&amp;#8217;t too hard to
&lt;a href="https://github.com/Xion/flappybash/commit/5e3281e408767eab2ade2fa2f9299fee60681bdc"&gt;make it move&lt;/a&gt;,
and eventually to check for its collision with the player&amp;nbsp;object.&lt;/p&gt;
&lt;h4&gt;Fitting&amp;nbsp;in&lt;/h4&gt;
&lt;p&gt;That, of course,
was &lt;a href="https://github.com/Xion/flappybash/commit/ff3260e1dd5fa61695310578091ff922acf06e71"&gt;the most important milestone&lt;/a&gt;.
&lt;br/&gt;
I added &lt;em&gt;an objective&lt;/em&gt;.&lt;/br&gt;
It was &lt;em&gt;an actual game&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;And I still had about 100 bytes&amp;nbsp;left!&lt;/p&gt;
&lt;p&gt;Speaking of size, this is probably a good moment
to talk about making the most of those meager 1234 bytes.
It&amp;#8217;s not exactly surprising that it was possible mostly thanks to &lt;em&gt;minification&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;While it&amp;#8217;s extremely popular for JavaScript,
the same abundance of minification utilities cannot be expected when it comes of shell scripts.
Still, &amp;#8220;bash minification&amp;#8221; does return some useful search results,
and &lt;a href="http://bash-minifier.appspot.com/"&gt;one of them&lt;/a&gt; is what I used to shrink the final&amp;nbsp;script.&lt;/p&gt;
&lt;p&gt;Obviously, it didn&amp;#8217;t go without some trouble.
Since the minifier does little more than to swap newlines for semicolons,
it got a few bugs that had to be ironed out.
No big deal, really:
a small batch of
&lt;a href="https://github.com/Xion/flappybash/commit/a9556bbef8245bd1ce849e1bffd175412934ef9d"&gt;handcrafted, artisanal Python&lt;/a&gt;
was enough to paper over the&amp;nbsp;issues.&lt;/p&gt;
&lt;p&gt;The other technique you can use to slim down is &lt;em&gt;obfuscation&lt;/em&gt;, i.e.
&lt;a href="https://github.com/Xion/flappybash/commit/f2683785a8049fc385e5c6705f66dbb835ad84bc"&gt;shortening of the identifiers&lt;/a&gt;.
As the minifier didn&amp;#8217;t offer this feature natively, I had to take care of it&amp;nbsp;myself.&lt;/p&gt;
&lt;p&gt;This lead to adding such interesting assignments as this &lt;code&gt;p&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;p&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;printf&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which absolutely shouldn&amp;#8217;t be confused with &lt;em&gt;this&lt;/em&gt; &lt;code&gt;p&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# put text at given position: p $x $y $text&lt;/span&gt;
p&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; -en &lt;span class="s2"&gt;&amp;quot;\e[&lt;/span&gt;&lt;span class="nv"&gt;$2&lt;/span&gt;&lt;span class="s2"&gt;;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;1&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;f&lt;/span&gt;&lt;span class="nv"&gt;$3&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The reason it works is that in &lt;span class="caps"&gt;POSIX&lt;/span&gt; shells,
variables and functions effectively form two separate namespaces.
Their members are thus referred to in two different&amp;nbsp;ways:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;p &lt;span class="nv"&gt;$X&lt;/span&gt; &lt;span class="nv"&gt;$Y&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;\e[1;37;41mB&amp;quot;&lt;/span&gt;  &lt;span class="c"&gt;# call the p() function&lt;/span&gt;
&lt;span class="nv"&gt;$p&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;\e[?25l&amp;quot;&lt;/span&gt;  &lt;span class="c"&gt;# expand the p variable (i.e. call `printf`)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Notice how functions have longer definitions but shorter usage,
while the opposite is true for variables.
Who can now say that Bash doesn&amp;#8217;t find balance in all&amp;nbsp;things?&lt;/p&gt;
&lt;h4&gt;Auditory&amp;nbsp;sensations&lt;/h4&gt;
&lt;p&gt;Like I mentioned before, thanks to those and similar tricks
I had managed to carve out about a hundred or so bytes of free&amp;nbsp;space.&lt;/p&gt;
&lt;p&gt;Now, what could you possibly do with such a staggering&amp;nbsp;amount?&lt;/p&gt;
&lt;p style="text-align: center"&gt;
    &lt;img src="http://xion.io/images/lawrence-office-space.jpg" alt="Two tweets at the same time!"&gt;&lt;/br&gt;
    &lt;small&gt;&amp;#8230;no, that won&amp;#8217;t even be &lt;em&gt;one&lt;/em&gt; tweet.&lt;/small&gt;
&lt;/p&gt;

&lt;p&gt;Well, let&amp;#8217;s add some &lt;em&gt;sound effects&lt;/em&gt;, shall&amp;nbsp;we?&lt;/p&gt;
&lt;p&gt;Before you think that&amp;#8217;s preposterous, remember the &lt;a href="https://en.wikipedia.org/wiki/Bell_character"&gt;terminal bell&lt;/a&gt;.
Sounding the bell is as simple as printing the &lt;code&gt;"\a"&lt;/code&gt; character (&lt;span class="caps"&gt;ASCII&lt;/span&gt; 7),
which for this reason is also known as &lt;code&gt;BEL&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; -e &lt;span class="s2"&gt;&amp;quot;\a&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Unfortunately, most terminal emulators silence the actual sound,
and replace it with a visual indicator &amp;#8212; typically a bell &lt;em&gt;icon&lt;/em&gt;.
If we want to make speakers reliably emit audible phenomena,
we sadly have to look&amp;nbsp;elsewhere.&lt;/p&gt;
&lt;p&gt;Fortunately, modern Linux systems handle the sound card somewhat better
than you may have remembered from a few years ago.
This is usually thanks to &lt;a href="https://en.wikipedia.org/wiki/Advanced_Linux_Sound_Architecture"&gt;&lt;span class="caps"&gt;ALSA&lt;/span&gt;&lt;/a&gt;,
a dedicated subsystem in the Linux kernel, and its numerous userspace&amp;nbsp;complements.&lt;/p&gt;
&lt;p&gt;One of them is the inconspicuous &lt;code&gt;speaker-test&lt;/code&gt; binary
which, well, does exactly what it says on the&amp;nbsp;can:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;speaker-test  &lt;span class="c"&gt;# play some noise through the speakers&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can make it play a &lt;span class="caps"&gt;WAV&lt;/span&gt; file, too,
but the most interesting option is to synthesize a &lt;em&gt;sine wave&lt;/em&gt;.
By adjusting its frequency, it&amp;#8217;s easy to play higher and lower tones,
forming the building blocks for more complex&amp;nbsp;sounds.&lt;/p&gt;
&lt;p&gt;What you cannot control is the tone&amp;#8217;s duration.
That&amp;#8217;s not a big problem, though, since we can run &lt;code&gt;speaker-test&lt;/code&gt; in a separate process
and then just &lt;em&gt;&lt;code&gt;kill&lt;/code&gt; it dead&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# play a sine wave (requires ALSA): s $frequency $duration&lt;/span&gt;
s&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt; speaker-test &amp;gt;&lt;span class="nv"&gt;$n&lt;/span&gt; -t sine -f &lt;span class="nv"&gt;$1&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;_p&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$!&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; sleep &lt;span class="nv"&gt;$2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;kill&lt;/span&gt; -9 &lt;span class="nv"&gt;$_p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="https://github.com/Xion/flappybash/commit/3f259418f3d6167492b7d849c659dfcee0c6aa3d"&gt;I&amp;#8217;ve used this approach&lt;/a&gt;
to play a simple, two-tone sound
whenever the player successfully overcomes a pipe obstacle.
And I would&amp;#8217;ve probably taken it further if &amp;#8220;&lt;code&gt;speaker_test&lt;/code&gt;&amp;#8221; wasn&amp;#8217;t such a damn &lt;em&gt;long&lt;/em&gt; string.
Unfortunately, it was one identifier I couldn&amp;#8217;t afford to shorten,
and this had put a stop to my ambitious plan of improvising &lt;a href="https://www.sadtrombone.com/"&gt;a sad trombone&lt;/a&gt;
upon player&amp;#8217;s failure&amp;nbsp;:(&lt;/p&gt;
&lt;h4&gt;;&amp;nbsp;done&lt;/h4&gt;
&lt;p&gt;It wouldn&amp;#8217;t be right to say I wasn&amp;#8217;t very happy with &lt;a href="https://github.com/Xion/flappybash"&gt;the results&lt;/a&gt;, though.
All in all, it was &lt;a href="https://github.com/Xion/flappybash/commits/master"&gt;the most fun&lt;/a&gt;
I had with coding in quite some time,
and definitely the most amusing Bash script I&amp;#8217;ve ever&amp;nbsp;written.&lt;/p&gt;
&lt;p style="text-align: center"&gt;
    &lt;img src="http://xion.io/images/flappybash.jpg" alt="FLAPPY BASH"&gt;
&lt;/p&gt;

&lt;p&gt;It also got me curious what other games people have implemented purely as shell scripts.
To my disappointment, there hadn&amp;#8217;t been all that many.
Of those I could find, this &lt;a href="http://bruxy.regnet.cz/web/linux/EN/housenka-bash-game/"&gt;Snake clone&lt;/a&gt;
in about &lt;span class="caps"&gt;7KB&lt;/span&gt; of (unobfuscated) Bash
is probably the most polished&amp;nbsp;one.&lt;/p&gt;
&lt;p&gt;As you can see then, this is clearly an under-appreciated platform
that evidently displays a lot of potential!
If you want to create games that are both very portable
and &lt;em&gt;extremely&lt;/em&gt; space-efficient,
Bash is definitely a technology you should have a closer look at&amp;nbsp;;-)&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Here&amp;#8217;s the original announcement post &lt;a href="http://gynvael.coldwind.pl/?lang=pl&amp;amp;id=624"&gt;in Polish&lt;/a&gt;
and its somewhat understandable
&lt;a href="https://translate.google.com/translate?sl=auto&amp;amp;tl=en&amp;amp;js=y&amp;amp;prev=_t&amp;amp;hl=en&amp;amp;ie=UTF-8&amp;amp;u=http%3A%2F%2Fgynvael.coldwind.pl%2F%3Flang%3Dpl%26id%3D624&amp;amp;edit-text=&amp;amp;act=url"&gt;Google-translated version&lt;/a&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;Yes, I&amp;#8217;m ignoring the elephant in the room which is the web browser.
It&amp;#8217;s probably because a pile of minified JavaScript doesn&amp;#8217;t strike me as very interesting anymore :)&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;Nowadays, though,
the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame"&gt;&lt;code&gt;requestAnimationFrame&lt;/code&gt; function&lt;/a&gt;
is closer to the actual continuous processing in the background.&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:4"&gt;
&lt;p&gt;Regular programs could simply call &lt;a href="http://man7.org/linux/man-pages/man2/alarm.2.html"&gt;the &lt;code&gt;alarm&lt;/code&gt; function&lt;/a&gt;
instead of forking a subprocess. But then again, regular programs could just run a normal game loop.&amp;#160;&lt;a class="footnote-backref" href="#fnref:4" rev="footnote" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="Bash"></category><category term="shell scripting"></category><category term="game programming"></category><category term="Flappy Bird"></category></entry></feed>