<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Karol Kuczmarski's Blog</title><link href="http://xion.io/" rel="alternate"></link><link href="http://xion.io/feeds/atom.xml" rel="self"></link><id>http://xion.io/</id><updated>2017-11-12T14:07:00+00:00</updated><entry><title>Currying and APIÂ design</title><link href="http://xion.io/post/programming/currying-api-design.html" rel="alternate"></link><updated>2017-11-12T14:07:00+00:00</updated><author><name>Karol Kuczmarski</name></author><id>tag:xion.io,2017-11-12:post/programming/currying-api-design.html</id><summary type="html">&lt;p&gt;In functional programming, &lt;em&gt;currying&lt;/em&gt; is one of the concepts
that contribute greatly to its expressive power.
Its importance could be compared to something as ubiquitous
as chaining method calls (&lt;code&gt;foo.bar().baz()&lt;/code&gt;) in imperative, object-oriented&amp;nbsp;languages.&lt;/p&gt;
&lt;p&gt;Although a simple idea on the surface,
it has significant consequences for the way functional APIs are designed.
This post is an overview of various techniques
that help utilize currying effectively when writing your functions.
While the examples are written in Haskell syntax,
I believe it should be useful for developers working in other functional languages,&amp;nbsp;too.&lt;/p&gt;
&lt;h4&gt;The&amp;nbsp;basics&lt;/h4&gt;
&lt;p&gt;Let&amp;#8217;s start with a short&amp;nbsp;recap.&lt;/p&gt;
&lt;p&gt;Intuitively, we say that an &lt;em&gt;N&lt;/em&gt;-argument function is &lt;em&gt;curried&lt;/em&gt;
if you can invoke it with a single argument and get back an (&lt;em&gt;N&lt;/em&gt;-1)-argument function.
Repeat this &lt;em&gt;N&lt;/em&gt; times,
and it&amp;#8217;ll be equivalent to supplying all &lt;em&gt;N&lt;/em&gt; arguments at&amp;nbsp;once.&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s an example: the &lt;code&gt;Data.Text&lt;/code&gt; module in Haskell
contains the following function called &lt;code&gt;splitOn&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;splitOn&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nf"&gt;splitOn&lt;/span&gt; &lt;span class="n"&gt;sep&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It&amp;#8217;s a fairly standard string splitting function,
taking a separator as its first argument,
with the second one being a string to perform the splitting&amp;nbsp;on:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;splitOn&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;,&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;1,2,3&amp;quot;&lt;/span&gt;  &lt;span class="c1"&gt;-- produces [&amp;quot;1&amp;quot;, &amp;quot;2&amp;quot;, &amp;quot;3&amp;quot;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Both arguments are of type &lt;code&gt;Text&lt;/code&gt; (Haskell strings),
while the return type is &lt;code&gt;[Text]&lt;/code&gt; &amp;#8212; a &lt;em&gt;list&lt;/em&gt; of strings.
This add up to the signature (type) of &lt;code&gt;splitOn&lt;/code&gt;,
written above as &lt;code&gt;Text -&amp;gt; Text -&amp;gt; [Text]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Like all functions in Haskell, however, &lt;code&gt;splitOn&lt;/code&gt; is &lt;em&gt;curried&lt;/em&gt;.
We don&amp;#8217;t have to provide it with both arguments at once;
instead, we can stop at one in order to obtain &lt;em&gt;another function&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;splitOnComma&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nf"&gt;splitOnComma&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;splitOn&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;,&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This new function is a &lt;em&gt;partially applied&lt;/em&gt; version of &lt;code&gt;splitOn&lt;/code&gt;,
with its first argument (the separator) already filled in.
To complete the call, all you need to do now is provide the text to&amp;nbsp;split:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;splitOnComma&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;1,2,3&amp;quot;&lt;/span&gt;  &lt;span class="c1"&gt;-- also produces [&amp;quot;1&amp;quot;, &amp;quot;2&amp;quot;, &amp;quot;3&amp;quot;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and, unsurprisingly, you&amp;#8217;ll get the exact same&amp;nbsp;result.&lt;/p&gt;
&lt;p&gt;Compare now the type signatures of both &lt;code&gt;splitOn&lt;/code&gt; and &lt;code&gt;splitOnComma&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;splitOn&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nf"&gt;splitOnComma&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It may be puzzling at first why the same arrow symbol (&lt;code&gt;-&amp;gt;&lt;/code&gt;) is used
for what seems like two distinct meanings: the &amp;#8220;argument separator&amp;#8221;,
and the return type&amp;nbsp;indicator.&lt;/p&gt;
&lt;p&gt;But for curried functions, both of those meanings are in fact &lt;em&gt;identical&lt;/em&gt;!&lt;/p&gt;
&lt;p&gt;Indeed, we can make it more explicit by defining &lt;code&gt;splitOn&lt;/code&gt; as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;splitOn&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Text&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;or&amp;nbsp;even:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;splitOn&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;TypeOf&lt;/span&gt; &lt;span class="n"&gt;splitOnComma&lt;/span&gt; &lt;span class="c1"&gt;-- (not a real Haskell syntax)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;From this perspective, what &lt;code&gt;splitOn&lt;/code&gt; actually returns is not &lt;code&gt;[Text]&lt;/code&gt;
but a &lt;em&gt;function&lt;/em&gt;  from &lt;code&gt;Text&lt;/code&gt; to &lt;code&gt;[Text]&lt;/code&gt; (&lt;code&gt;Text -&amp;gt; [Text]&lt;/code&gt;).
And conversely, a call with two&amp;nbsp;arguments:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;splitOn&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;,&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;1,2,3&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;is instead &lt;em&gt;two function calls&lt;/em&gt;, each taking just &lt;em&gt;one argument&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;splitOn&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;,&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;1,2,3&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is why the &lt;code&gt;-&amp;gt;&lt;/code&gt; arrow isn&amp;#8217;t actually ambiguous:
it always signifies the &lt;em&gt;mapping&lt;/em&gt; of an argument type to a result type.
And it&amp;#8217;s always just one argument, too,&amp;nbsp;because:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Currying makes all functions take only one&amp;nbsp;argument.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It&amp;#8217;s just that sometimes, what those single-argument functions return
will be yet another&amp;nbsp;function.&lt;/p&gt;
&lt;h4&gt;Least used arguments go &lt;em&gt;first&lt;/em&gt;&lt;/h4&gt;
&lt;p&gt;Now that we have a firmer grasp on the idea of currying,
we can see how it influences &lt;span class="caps"&gt;API&lt;/span&gt;&amp;nbsp;design.&lt;/p&gt;
&lt;p&gt;There is one thing in particular you will notice almost immediately,
especially if you are coming from imperative languages
that support default argument values and/or function overloading.
It&amp;#8217;s the particular &lt;em&gt;order of arguments&lt;/em&gt;
that a well designed, functional &lt;span class="caps"&gt;API&lt;/span&gt; will almost certainly&amp;nbsp;follow.&lt;/p&gt;
&lt;p&gt;See the &lt;code&gt;splitOn&lt;/code&gt; function&amp;nbsp;again:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;splitOn&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nf"&gt;splitOn&lt;/span&gt; &lt;span class="n"&gt;sep&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It is no accident that it puts the &lt;code&gt;sep&lt;/code&gt;arator as its first argument.
This choice &amp;#8212; as opposed to the alternative where &lt;code&gt;text&lt;/code&gt; goes first &amp;#8212;
produces much more useful results when the function is applied partially
through&amp;nbsp;currying.&lt;/p&gt;
&lt;p&gt;Say, for instance, that you want to splice a list of strings
where the individual pieces can be&amp;nbsp;comma-separated:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;spliceOnComma&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nf"&gt;spliceOnComma&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;2,3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;4,5,6&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;7&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;-- ^ This should produce [&amp;quot;1&amp;quot;, &amp;quot;2&amp;quot;, &amp;quot;3&amp;quot;, &amp;quot;4&amp;quot;, &amp;quot;5&amp;quot;, &amp;quot;6&amp;quot;, &amp;quot;7&amp;quot;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Because the separator appears first in a &lt;code&gt;splitOn&lt;/code&gt; call,
you can do it easily through a direct use of&amp;nbsp;currying:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;spliceOnComma&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;concat&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;splitOn&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;,&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;

&lt;span class="c1"&gt;-- or equivalently, in a terser point-free style:&lt;/span&gt;
&lt;span class="c1"&gt;-- spliceOnComma = concatMap $ splitOn &amp;quot;,&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What we do here is apply the split to every string in the list &lt;code&gt;xs&lt;/code&gt;
(with &lt;code&gt;map&lt;/code&gt;), followed by flattening the result &amp;#8212; a list of lists, &lt;code&gt;[[Text]]&lt;/code&gt; &amp;#8212;
back to a regular &lt;code&gt;[Text]&lt;/code&gt; with &lt;code&gt;concat&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If we had the alternative version of &lt;code&gt;splitOn&lt;/code&gt;,
one where the order of arguments is&amp;nbsp;reversed:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;splitOn&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="n"&gt;sep&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;we&amp;#8217;d have no choice but to &amp;#8220;fix it&amp;#8221;, with either a lambda function
or &lt;a href="http://hackage.haskell.org/package/base-4.10.0.0/docs/Prelude.html#v:flip"&gt;the &lt;code&gt;flip&lt;/code&gt; combinator&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;spliceOnComma&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;concat&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;\&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;splitOn&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;,&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;
&lt;span class="nf"&gt;spliceOnComma&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;concat&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;flip&lt;/span&gt; &lt;span class="n"&gt;splitOn&amp;#39;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;,&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Putting the delimiter first is simply more convenient.
It is much more likely you&amp;#8217;ll be splitting multiple strings on the same separator,
as opposed to a single string and multiple separators.
The argument order of &lt;code&gt;splitOn&lt;/code&gt; is making the common use case slightly easier
by moving the more &amp;#8220;stable&amp;#8221; parameter to the&amp;nbsp;front.&lt;/p&gt;
&lt;p&gt;This practice generalizes to all curried functions,
forming a simple&amp;nbsp;rule:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The more likely it is for an argument to remain &lt;em&gt;constant&lt;/em&gt; between calls,
the sooner it should appear in the function&amp;nbsp;signature.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Note how this is different compared to any language
where functions may take variable number of arguments.
In Python, for example, the equivalent of &lt;code&gt;splitOn&lt;/code&gt; is defined&amp;nbsp;as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sep&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and the implicit default value for &lt;code&gt;sep&lt;/code&gt; is essentially &amp;#8220;any whitespace character&amp;#8221;.
In many cases, this is exactly what we want,
making the following calls possible&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Alice has a cat&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Alice&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;has&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;cat&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So, as a less-used argument, &lt;code&gt;sep&lt;/code&gt; actually goes last in &lt;code&gt;str.split&lt;/code&gt;,
as it is often desirable to omit it altogether.
Under the currying regime, however, we put it &lt;em&gt;first&lt;/em&gt;,
so that we can fix it to a chosen value and obtain a more specialized version of the&amp;nbsp;function.&lt;/p&gt;
&lt;h4&gt;The fewer arguments, the&amp;nbsp;better&lt;/h4&gt;
&lt;p&gt;Another thing you&amp;#8217;d encounter in languages with flexible function definitions
is the proliferation of optional&amp;nbsp;arguments:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://example.com/foo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;arg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
                        &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;field&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
                        &lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;pass&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                        &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;User-Agent&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;My Amazing App&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
                        &lt;span class="n"&gt;cookies&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;c_is&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;for_cookie&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
                        &lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;attachment.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;file.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;rb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)},&lt;/span&gt;
                        &lt;span class="n"&gt;allow_redirects&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;5.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Trying to translate this directly to a functional paradigm
would result in extremely unreadable function calls &amp;#8212;
doubly so when you don&amp;#8217;t actually need all those arguments
and have to provide some canned&amp;nbsp;defaults:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;response&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kt"&gt;Requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;http://example.com/foo&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;&amp;#39;arg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="kt"&gt;[]&lt;/span&gt; &lt;span class="kt"&gt;Nothing&lt;/span&gt; &lt;span class="kt"&gt;[]&lt;/span&gt; &lt;span class="kt"&gt;[]&lt;/span&gt; &lt;span class="kt"&gt;[]&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt; &lt;span class="kt"&gt;Nothing&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What does that &lt;code&gt;True&lt;/code&gt; mean, for example?
Or what exactly does each empty list signify?
It&amp;#8217;s impossible to know just by looking at the function call&amp;nbsp;alone.&lt;/p&gt;
&lt;p&gt;Long argument lists are thus detrimental to the quality of functional APIs.
It&amp;#8217;s much harder to correctly apply the previous rule (least used arguments first)
when there are so many possible&amp;nbsp;permutations.&lt;/p&gt;
&lt;p&gt;What should we do then?&amp;#8230;
In some cases, including the above example of an &lt;span class="caps"&gt;HTTP&lt;/span&gt; library,
we cannot simply cut out features in the name of elegance.
The necessary information needs to go &lt;em&gt;somewhere&lt;/em&gt;,
meaning we need to find at least somewhat acceptable place for&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;Fortunately, we have a couple of options
that should help us with solving this&amp;nbsp;problem.&lt;/p&gt;
&lt;h5&gt;Combinators /&amp;nbsp;builders&lt;/h5&gt;
&lt;p&gt;Looking back at the last example in Python,
we can see why the function call remains readable
even if it sprouts a dozen or so additional&amp;nbsp;arguments.&lt;/p&gt;
&lt;p&gt;The obvious reason is that
each one has been uniquely identified by a &lt;em&gt;name&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;In order to emulate some form of what&amp;#8217;s called keyword arguments,
we can split the single function call into multiple stages.
Each one would then supply one piece of data,
with a matching function name serving as a readability&amp;nbsp;cue:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;response&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;sendRequest&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;
            &lt;span class="n"&gt;withHeaders&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;User-Agent&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;My Amazing App&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;
            &lt;span class="n"&gt;withBasicAuth&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;user&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;pass&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;
            &lt;span class="n"&gt;withData&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;field&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;value&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;
                &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;http://example.com/foo&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If we follow this approach,
the caller would only invoke those intermediate functions
that fit his particular use case.
The &lt;span class="caps"&gt;API&lt;/span&gt; above could still offer &lt;code&gt;withCookies&lt;/code&gt;, &lt;code&gt;withFiles&lt;/code&gt;,
or any of the other combinators,
but their usage shall be completely&amp;nbsp;optional.&lt;/p&gt;
&lt;p&gt;Pretty neat,&amp;nbsp;right?&lt;/p&gt;
&lt;p&gt;Thing is, the implementation would be a little involved here.
We would clearly need to carry some data between the various &lt;code&gt;withFoo&lt;/code&gt; calls,
which requires some additional data types in addition to plain functions.
At minimum, we need something to represent the &lt;code&gt;Request&lt;/code&gt;,
as it is created by the &lt;code&gt;get&lt;/code&gt; function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;get&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Request&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and then &amp;#8220;piped&amp;#8221; through &lt;code&gt;withFoo&lt;/code&gt; transformers like this&amp;nbsp;one:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;withBasicAuth&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Request&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;so that it can we can finally send&amp;nbsp;it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;sendRequest&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Request&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;IO&lt;/span&gt; &lt;span class="kt"&gt;Response&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Such &lt;code&gt;Request&lt;/code&gt; type needs to keep track of all the additional parameters
that may have been tacked onto&amp;nbsp;it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kr"&gt;type&lt;/span&gt; &lt;span class="kt"&gt;Request&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Param&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;  &lt;span class="c1"&gt;-- Text is the URL&lt;/span&gt;

&lt;span class="kr"&gt;data&lt;/span&gt; &lt;span class="kt"&gt;Param&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Header&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt;
           &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;BasicAuth&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt;
           &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;Data&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
           &lt;span class="c1"&gt;-- and so on&lt;/span&gt;

&lt;span class="c1"&gt;-- example&lt;/span&gt;
&lt;span class="nf"&gt;withBasicAuth&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="n"&gt;pass&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;BasicAuth&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="n"&gt;pass&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;All of a sudden, what would be a single function explodes into a collection of data types
and associated&amp;nbsp;combinators.&lt;/p&gt;
&lt;p&gt;In Haskell at least,
we can forgo some of the boilerplate by automatically deriving an instance
of &lt;a href="https://hackage.haskell.org/package/base-4.10.0.0/docs/Data-Monoid.html"&gt;&lt;code&gt;Monoid&lt;/code&gt;&lt;/a&gt;
(or perhaps a &lt;a href="https://hackage.haskell.org/package/base-4.10.0.0/docs/Data-Semigroup.html"&gt;&lt;code&gt;Semigroup&lt;/code&gt;&lt;/a&gt;).
Rather than invoking a series of combinators,
clients would then build their requests through repeated &lt;code&gt;mappend&lt;/code&gt;s&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;response&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;sendRequest&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;http://example.com/foo&amp;quot;&lt;/span&gt;
                          &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;header&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;User-Agent&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;My Awesome App&amp;quot;&lt;/span&gt;
                          &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;basicAuth&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;user&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;pass&amp;quot;&lt;/span&gt;
                          &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;field&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;value&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This mini-&lt;a href="https://en.wikipedia.org/wiki/Domain-specific_language"&gt;&lt;span class="caps"&gt;DSL&lt;/span&gt;&lt;/a&gt;
looks very similar to keyword arguments in Python,
as well as the equivalent Builder pattern from Java, Rust, and others.
What&amp;#8217;s disappointing, however,
is that it doesn&amp;#8217;t easily beat those solutions in terms of compile-time safety.
Unless you invest into some tricky type-level hacks,
there is nothing to prevent the users from building invalid requests at&amp;nbsp;runtime:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;reqParams&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;http://example.com/foo&amp;quot;&lt;/span&gt;
&lt;span class="c1"&gt;--&lt;/span&gt;
&lt;span class="c1"&gt;-- ... lots of code in between ...&lt;/span&gt;
&lt;span class="c1"&gt;--&lt;/span&gt;
&lt;span class="nf"&gt;response&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;sendRequest&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;
            &lt;span class="n"&gt;reqParams&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;http://example.com/bar&amp;quot;&lt;/span&gt; &lt;span class="c1"&gt;-- woops!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Compared to a plain function (with however many arguments),
we have actually lost some measure of correctness&amp;nbsp;here.&lt;/p&gt;
&lt;h5&gt;Record&amp;nbsp;types&lt;/h5&gt;
&lt;p&gt;In many cases, fortunately,
there is another way to keep our calls both flexible and safe against runtime errors.
We just need to change the representation of the input type (here, &lt;code&gt;Request&lt;/code&gt;)
into a &lt;em&gt;record&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Record is simply a user-defined type that&amp;#8217;s a collection of &lt;em&gt;named fields&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Most languages (especially imperative ones: C, C++, Go, Rust, &amp;#8230;) call those &lt;em&gt;structures&lt;/em&gt;,
and use the &lt;code&gt;struct&lt;/code&gt; keyword to signify a record definition.
In functional programming parlance, they are also referred to as &lt;em&gt;product types&lt;/em&gt;;
this is because the joint record type is a Cartesian product of its individual field types&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Going back to our example,
it shouldn&amp;#8217;t be difficult to define a record representing an &lt;span class="caps"&gt;HTTP&lt;/span&gt; &lt;code&gt;Request&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kr"&gt;data&lt;/span&gt; &lt;span class="kt"&gt;Request&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Request&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;reqURL&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;URL&lt;/span&gt;
                       &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reqMethod&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Method&lt;/span&gt;
                       &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reqHeaders&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="kt"&gt;Header&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
                       &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reqPostData&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
                       &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In fact, I suspect most programmers would naturally reach for this notation&amp;nbsp;first.&lt;/p&gt;
&lt;p&gt;Having this definition,
calls to &lt;code&gt;sendRequest&lt;/code&gt; can be rewritten to take a record instance
that we construct on the spot&lt;sup id="fnref:4"&gt;&lt;a class="footnote-ref" href="#fn:4" rel="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;response&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;sendRequest&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;
    &lt;span class="kt"&gt;Request&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;reqURL&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;http://example.com/bar&amp;quot;&lt;/span&gt;
            &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reqMethod&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;GET&lt;/span&gt;
            &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reqHeaders&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;User-Agent&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;My Awesome App&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
            &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reqPostData&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;[]&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Compare this snippet to the Python example from the beginning of this section.
It comes remarkably close, right?
The &lt;code&gt;Request&lt;/code&gt; record and its fields can indeed work quite nicely
as substitutes for keyword&amp;nbsp;arguments.&lt;/p&gt;
&lt;p&gt;But besides the readability boon of having &amp;#8220;argument&amp;#8221; names at the call site.
we&amp;#8217;ve also gained stronger correctness checks.
For example, there is no way anymore to accidentally supply the &lt;span class="caps"&gt;URL&lt;/span&gt; field&amp;nbsp;twice.&lt;/p&gt;
&lt;h4&gt;Different functions for different&amp;nbsp;things&lt;/h4&gt;
&lt;p&gt;Astute readers may have noticed at least two things about the previous&amp;nbsp;solutions.&lt;/p&gt;
&lt;p&gt;First, they are not mutually incompatible.
Quite the opposite, actually: they compose very neatly, allowing us to combine
builder functions with the &lt;em&gt;record update&lt;/em&gt; syntax in the final &lt;span class="caps"&gt;API&lt;/span&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;response&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;sendRequest&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;http://example.com/baz&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;reqHeaders&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;User-Agent&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;My Awesome App&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This cuts out basically all the boilerplate of record-based calls,
leaving only the parts that actually differ from the defaults&lt;sup id="fnref:5"&gt;&lt;a class="footnote-ref" href="#fn:5" rel="footnote"&gt;5&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;But on the second and more important note:
we don&amp;#8217;t seem to be talking about &lt;em&gt;currying&lt;/em&gt; anymore.
Does it mean it loses its usefulness
once we go beyond certain threshold of&amp;nbsp;complexity?&amp;#8230;&lt;/p&gt;
&lt;p&gt;Thankfully, the answer is no.
While some APIs may require more advanced techniques
to access the full breadth of their functionality,
it is always possible to expose some carefully constructed facade
that is conducive to partial&amp;nbsp;application.&lt;/p&gt;
&lt;p&gt;Consider, for example, the functionality exposed by this set of &lt;span class="caps"&gt;HTTP&lt;/span&gt;&amp;nbsp;wrappers:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;head&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;URL&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Request&lt;/span&gt;
&lt;span class="nf"&gt;headWith&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="kt"&gt;Header&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;URL&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Request&lt;/span&gt;
&lt;span class="nf"&gt;get&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;URL&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Request&lt;/span&gt;
&lt;span class="nf"&gt;getWith&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="kt"&gt;Header&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;URL&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Request&lt;/span&gt;
&lt;span class="nf"&gt;postForm&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;URL&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Request&lt;/span&gt;
&lt;span class="nf"&gt;postFormWith&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="kt"&gt;Header&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;URL&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Request&lt;/span&gt;
&lt;span class="nf"&gt;toURL&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Method&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;URL&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Request&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Each one is obviously curry-friendly&lt;sup id="fnref:6"&gt;&lt;a class="footnote-ref" href="#fn:6" rel="footnote"&gt;6&lt;/a&gt;&lt;/sup&gt;.
Combined, they also offer a pretty comprehensive &lt;span class="caps"&gt;API&lt;/span&gt; surface.
And should they prove insufficient,
you&amp;#8217;d still have the builder pattern and/or record updates to fall back on &amp;#8212;
either for specialized one-off cases, or for writing your own&amp;nbsp;wrappers.&lt;/p&gt;
&lt;p&gt;Naturally, this technique of layered &lt;span class="caps"&gt;API&lt;/span&gt; design &amp;#8212;
with simple wrappers hiding a progressively more advanced core &amp;#8212;
isn&amp;#8217;t limited to just functional programming.
In some way, it is what &lt;em&gt;good&lt;/em&gt; &lt;span class="caps"&gt;API&lt;/span&gt; design looks like in general.
But in &lt;span class="caps"&gt;FP&lt;/span&gt; languages, it becomes especially important,
because the expressive benefits of partial application are so paramount&amp;nbsp;there&lt;/p&gt;
&lt;p&gt;Fortunately, these principles seem to be followed pretty consistently,
at least within the Haskell ecosystem.
You can see it in the design of
&lt;a href="https://www.stackage.org/haddock/lts-9.12/http-client-0.5.7.0/Network-HTTP-Client.html"&gt;the &lt;code&gt;http-client&lt;/code&gt; package&lt;/a&gt;,
which is the real world extension of the &lt;span class="caps"&gt;HTTP&lt;/span&gt; interface outlined here.
More evidently, it can be observed in any of the numerous packages
the expose both a basic &lt;code&gt;foo&lt;/code&gt; and a more customizable &lt;code&gt;fooWith&lt;/code&gt; functions;
popular examples include
&lt;a href="https://www.stackage.org/haddock/lts-9.12/async-2.1.1.1/Control-Concurrent-Async.html#v:cancelWith"&gt;the &lt;code&gt;async&lt;/code&gt; package&lt;/a&gt;,
&lt;a href="https://hackage.haskell.org/package/zlib-0.6.1.2/docs/Codec-Compression-Zlib.html#g:2"&gt;the &lt;code&gt;zlib&lt;/code&gt; library&lt;/a&gt;,
and &lt;a href="https://www.stackage.org/haddock/lts-9.12/regex-compat-tdfa-0.95.1.4/Text-Regex.html"&gt;the &lt;code&gt;Text.Regex&lt;/code&gt; module&lt;/a&gt;.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;It&amp;#8217;d be more common in Python to write this as &lt;code&gt;"Alice has a cat".split()&lt;/code&gt;,
but this form would make it less obvious how the arguments are passed.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;A great example of this pattern can be found
in the &lt;a href="http://hackage.haskell.org/package/optparse-applicative"&gt;&lt;em&gt;optparse-applicative&lt;/em&gt; package&lt;/a&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;Tuples (like &lt;code&gt;(Int, String)&lt;/code&gt;) are also product types.
They can be thought of as ad-hoc records where field indices serve as rudimentary &amp;#8220;names&amp;#8221;.
In fact, some languages even use the dotted notation to access fields
of both records/structs (&lt;code&gt;x.foo&lt;/code&gt;) and tuples (&lt;code&gt;y.0&lt;/code&gt;).&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:4"&gt;
&lt;p&gt;For simplicity, I&amp;#8217;m gonna assume the &lt;code&gt;URL&lt;/code&gt; and &lt;code&gt;Header&lt;/code&gt; types
can be &amp;#8220;magically&amp;#8221; constructed from string literals
through the &lt;span class="caps"&gt;GHC&lt;/span&gt;&amp;#8217;s &lt;code&gt;OverloadedStrings&lt;/code&gt; extension.&amp;#160;&lt;a class="footnote-backref" href="#fnref:4" rev="footnote" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:5"&gt;
&lt;p&gt;In many languages,
we can specify more formally what the &amp;#8220;default&amp;#8221; means for a compound-type like &lt;code&gt;Request&lt;/code&gt;,
and sometimes even &lt;em&gt;derive&lt;/em&gt; it automatically.
Examples include
&lt;a href="https://hackage.haskell.org/package/data-default-0.7.1.1/docs/Data-Default.html#t:Default"&gt;the &lt;code&gt;Default&lt;/code&gt; typeclass&lt;/a&gt; in Haskell,
&lt;a href="https://doc.rust-lang.org/std/default/trait.Default.html"&gt;the &lt;code&gt;Default&lt;/code&gt; trait&lt;/a&gt; in Rust,
and the default/argumentless/trivial constructors in C++ &lt;em&gt;et al&lt;/em&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:5" rev="footnote" title="Jump back to footnote 5 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:6"&gt;
&lt;p&gt;Haskell programmers may especially notice how the last function is designed specifically
for infix application: &lt;code&gt;response &amp;lt;- sendRequest $ POST `toUrl` url&lt;/code&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:6" rev="footnote" title="Jump back to footnote 6 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="functional programming"></category><category term="currying"></category><category term="partial application"></category><category term="Haskell"></category><category term="API"></category><category term="abstraction"></category></entry><entry><title>Small Rust crates I (almost) alwaysÂ use</title><link href="http://xion.io/post/code/rust-little-crates.html" rel="alternate"></link><updated>2017-10-31T15:21:00+00:00</updated><author><name>Karol Kuczmarski</name></author><id>tag:xion.io,2017-10-31:post/code/rust-little-crates.html</id><summary type="html">&lt;p&gt;Alternative clickbait title: &lt;em&gt;My Little Crates: Rust is Magic&lt;/em&gt;&amp;nbsp;:-)&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Due to its relatively scant standard library,
programming in Rust inevitably involves pulling in a good number of third-party&amp;nbsp;dependencies.&lt;/p&gt;
&lt;p&gt;Some of them deal with problems that are solved with built-ins
in languages that take a more &amp;#8220;batteries included&amp;#8221; approach.
A good example would be the Python&amp;#8217;s &lt;code&gt;re&lt;/code&gt; module,
whose moral equivalent in the Rust ecosystem is &lt;a href="http://docs.rs/regex"&gt;the &lt;em&gt;regex&lt;/em&gt; crate&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Things like regular expressions, however, represent comparatively large problems.
It isn&amp;#8217;t very surprising that dedicated libraries exist to address them.
It is less common for a language to offer &lt;em&gt;small&lt;/em&gt; packages
that target very specialized&amp;nbsp;applications.&lt;/p&gt;
&lt;p&gt;As in, one function/type/macro-kind of specialized,
or perhaps only a little larger than&amp;nbsp;that.&lt;/p&gt;
&lt;p&gt;In this post, we&amp;#8217;ll take a whirlwind tour through a bunch of such essential&amp;nbsp;&amp;#8220;micropackages&amp;#8221;.&lt;/p&gt;
&lt;h4&gt;either&lt;/h4&gt;
&lt;p&gt;Rust has the built-in &lt;code&gt;Result&lt;/code&gt; type, which is a sum&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; of an &lt;code&gt;Ok&lt;/code&gt; outcome or an &lt;code&gt;Err&lt;/code&gt;or.
It forms the basis of a general error handling mechanism in the&amp;nbsp;language.&lt;/p&gt;
&lt;p&gt;Structurally, however, &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; is just an alternative between the types &lt;code&gt;T&lt;/code&gt; and &lt;code&gt;E&lt;/code&gt;.
You may want to use such an enum for other purposes
than representing results of fallible operations.
Unfortunately, because of the strong inherent meaning of &lt;code&gt;Result&lt;/code&gt;,
such usage would be unidiomatic and highly&amp;nbsp;confusing.&lt;/p&gt;
&lt;p&gt;This is why the &lt;a href="http://docs.rs/either"&gt;&lt;em&gt;either&lt;/em&gt; crate&lt;/a&gt; exists.
It contains the following &lt;code&gt;Either&lt;/code&gt; type:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;enum&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Either&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Left&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Right&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;While it is isomorphic to &lt;code&gt;Result&lt;/code&gt;,
it carries no connotation to the entrenched error handling practices&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;.
Additionally, it offers symmetric combinator methods such as &lt;code&gt;map_left&lt;/code&gt;
or &lt;code&gt;right_and_then&lt;/code&gt; for chaining computations involving the &lt;code&gt;Either&lt;/code&gt; values.&lt;/p&gt;
&lt;h4&gt;lazy_static&lt;/h4&gt;
&lt;p&gt;As a design choice, Rust doesn&amp;#8217;t allow for safe access to global mutable variables.
The semi-standard way of introducing those into your code
is therefore &lt;a href="http://docs.rs/lazy_static"&gt;the &lt;em&gt;lazy_static&lt;/em&gt; crate&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;However, the most important usage for it is to declare lazy initialized &lt;em&gt;constants&lt;/em&gt;
of more complex&amp;nbsp;types:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;lazy_static&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;ref&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;TICK_INTERVAL&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Duration&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Duration&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;from_secs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The trick isn&amp;#8217;t entirely transparent&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;,
but it&amp;#8217;s the best you can do until we get a proper support
for &lt;a href="https://github.com/rust-lang/rfcs/issues/322"&gt;compile-time expressions&lt;/a&gt; in the&amp;nbsp;language.&lt;/p&gt;
&lt;h4&gt;maplit&lt;/h4&gt;
&lt;p&gt;To go nicely with the crate above &amp;#8212;
and to act as a natural syntactic follow-up to
&lt;a href="https://doc.rust-lang.org/1.3.0/std/macro.vec!.html"&gt;the standard &lt;code&gt;vec![]&lt;/code&gt; macro&lt;/a&gt; &amp;#8212;
we&amp;#8217;ve got the &lt;a href="http://docs.rs/maplit"&gt;&lt;em&gt;maplit&lt;/em&gt; crate&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;What it does is add &lt;code&gt;HashMap&lt;/code&gt; and &lt;code&gt;HashSet&lt;/code&gt; &lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;literals&amp;#8221; by defining
some very simple &lt;code&gt;hashmap!&lt;/code&gt; and &lt;code&gt;hashset!&lt;/code&gt; macros:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;lazy_static&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;ref&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;IMAGE_EXTENSIONS&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;HashMap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;&amp;#39;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ImageFormat&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;hashmap&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;gif&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ImageFormat&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;GIF&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;jpeg&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ImageFormat&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;JPEG&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;jpg&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ImageFormat&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;JPG&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;png&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ImageFormat&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;PNG&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Internally, &lt;code&gt;hashmap!&lt;/code&gt; expands to the appropriate amount of &lt;code&gt;HashMap::insert&lt;/code&gt; calls,
returning the finished hash map with all the keys and values&amp;nbsp;given.&lt;/p&gt;
&lt;h4&gt;try_opt&lt;/h4&gt;
&lt;p&gt;Before the &lt;code&gt;?&lt;/code&gt; operator was introduced to Rust,
the idiomatic way of propagating erroneous &lt;code&gt;Result&lt;/code&gt;s was the &lt;code&gt;try!&lt;/code&gt; macro.&lt;/p&gt;
&lt;p&gt;A similar macro can also be implemented for &lt;code&gt;Option&lt;/code&gt; types
so that it propagates the &lt;code&gt;None&lt;/code&gt;s upstream.
The &lt;a href="http://docs.rs/try_opt"&gt;&lt;em&gt;try_opt&lt;/em&gt; crate&lt;/a&gt; is doing precisely that,
and the macro can be used in a straightforward&amp;nbsp;manner:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;parse_ipv4&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="kt"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;u8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;u8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;u8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;u8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;lazy_static&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;ref&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;RE&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Regex&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Regex&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="s-Raw"&gt;r&amp;quot;^(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})$&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;caps&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;try_opt&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;captures&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;try_opt&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;caps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="n"&gt;as_str&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;try_opt&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;caps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="n"&gt;as_str&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;try_opt&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;caps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="n"&gt;as_str&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;try_opt&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;caps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="n"&gt;as_str&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;try_opt&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;try_opt&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;try_opt&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;try_opt&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Until Rust supports &lt;code&gt;?&lt;/code&gt; for &lt;code&gt;Option&lt;/code&gt;s (which is &lt;a href="https://github.com/rust-lang/rust/issues/31436"&gt;planned&lt;/a&gt;),
this &lt;code&gt;try_opt!&lt;/code&gt; macro can serve as an acceptable&amp;nbsp;workaround.&lt;/p&gt;
&lt;h4&gt;exitcode&lt;/h4&gt;
&lt;p&gt;It is a common convention in basically every mainstream &lt;span class="caps"&gt;OS&lt;/span&gt;
that a process has finished with an error
if it exits with a code different than 0 (zero),
Linux divides the space of error codes &lt;a href="http://www.tldp.org/LDP/abs/html/exitcodes.html"&gt;further&lt;/a&gt;,
and &amp;#8212; along with &lt;span class="caps"&gt;BSD&lt;/span&gt; &amp;#8212; it also includes the &lt;em&gt;sysexits.h&lt;/em&gt; header with some more specialized&amp;nbsp;codes.&lt;/p&gt;
&lt;p&gt;These have been adopted by great many programs
and &lt;a href="https://docs.python.org/3.0/library/os.html#os.EX_OK"&gt;languages&lt;/a&gt;.
In Rust, those semi-standard names for common errors can be used, too.
All you need to do is add &lt;a href="http://docs.rs/exitcode"&gt;the &lt;em&gt;exitcode&lt;/em&gt; crate&lt;/a&gt; to your&amp;nbsp;project:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;unwrap_or_else&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;print_args_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exitcode&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;USAGE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In addition to constants like &lt;code&gt;USAGE&lt;/code&gt; or &lt;code&gt;TEMPFAIL&lt;/code&gt;,
the &lt;em&gt;exitcode&lt;/em&gt; crate also defines an &lt;code&gt;ExitCode&lt;/code&gt; alias
for the integer type holding the exit codes.
You can use it, among other things, as a return type of your top-level&amp;nbsp;functions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;do_stuff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;do_stuff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;exitcode&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;ExitCode&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;enum-set&lt;/h4&gt;
&lt;p&gt;In Java, there is a specialization of the general &lt;code&gt;Set&lt;/code&gt; interface
that works for enum types:
&lt;a href="https://docs.oracle.com/javase/7/docs/api/java/util/EnumSet.html"&gt;the &lt;code&gt;EnumSet&lt;/code&gt; class&lt;/a&gt;.
Its members are represented very compactly as &lt;em&gt;bits&lt;/em&gt; rather than hashed&amp;nbsp;elements.&lt;/p&gt;
&lt;p&gt;A similar (albeit slightly less powerful&lt;sup id="fnref:4"&gt;&lt;a class="footnote-ref" href="#fn:4" rel="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt;) structure has been implemented
in the &lt;a href="http://docs.rs/enum-set"&gt;&lt;em&gt;enum-set&lt;/em&gt; crate&lt;/a&gt;. Given a &lt;code&gt;#[repr(u32)]&lt;/code&gt; enum&amp;nbsp;type:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#[repr(u32)]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#[derive(Clone, Copy, Debug Eq, Hash, PartialEq)]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;enum&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Weekday&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Monday&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Tuesday&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Wednesday&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Thursday&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Friday&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Saturday&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Sunday&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;you can create an &lt;code&gt;EnumSet&lt;/code&gt; of its&amp;nbsp;variants:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;weekend&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;EnumSet&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Weekday&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;EnumSet&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;weekend&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Weekday&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Saturday&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;weekend&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Weekday&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Sunday&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;as long as you provide a simple trait impl that specifies
how to convert those enum values to and from &lt;code&gt;u32&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;impl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;enum_set&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;CLike&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Weekday&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to_u32&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;u32&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;u32&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;unsafe&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;from_u32&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;u32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Self&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;mem&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;transmute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The advantage is having a set structure represented by a single, unsigned 32-bit integer,
leading to &lt;em&gt;O&lt;/em&gt;(1) complexity of &lt;em&gt;all&lt;/em&gt; common set operations.
This includes membership checks, the union of two sets, their intersection, difference, and so&amp;nbsp;on.&lt;/p&gt;
&lt;h4&gt;antidote&lt;/h4&gt;
&lt;p&gt;As part of fulfilling the promise of Fearless Concurrencyâ¢,
Rust offers multiple synchronization primitives
that are all defined in &lt;a href="https://doc.rust-lang.org/std/sync/"&gt;the &lt;code&gt;std::sync&lt;/code&gt; module&lt;/a&gt;.
One thing that &lt;code&gt;Mutex&lt;/code&gt;, &lt;code&gt;RwLock&lt;/code&gt;, and similar mechanisms there have in common
is that their locks can become &amp;#8220;poisoned&amp;#8221; if a thread panicks while holding them.
As a result, acquiring a lock requires handling the potential &lt;code&gt;PoisonError&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For many programs, however, lock poisoning is not even a remote,
but a straight-up &lt;em&gt;impossible&lt;/em&gt; situation.
If you follow the best practices of concurrent resource sharing,
you won&amp;#8217;t be holding locks for more than a few instructions,
devoid of &lt;code&gt;unwrap&lt;/code&gt;s or any other opportunity to &lt;code&gt;panic!()&lt;/code&gt;.
Unfortunately, you cannot prove this to the Rust compiler statically,
so it will still require you to handle a &lt;code&gt;PoisonError&lt;/code&gt; that cannot&amp;nbsp;happen.&lt;/p&gt;
&lt;p&gt;This is where the aptly named &lt;a href="http://docs.rs/antidote"&gt;&lt;em&gt;antidote&lt;/em&gt; crate&lt;/a&gt; crate offers help.
In it, you can find all the same locks &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; guards &lt;span class="caps"&gt;API&lt;/span&gt; that is offered by &lt;code&gt;std::sync&lt;/code&gt;,
just without the &lt;code&gt;PoisonError&lt;/code&gt;.
In many cases, this removal has radically simplified the interface,
for example by turning &lt;code&gt;Result&amp;lt;Guard, Error&amp;gt;&lt;/code&gt; return types into just &lt;code&gt;Guard&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The caveat, of course, is that you need to ensure all threads holding these &amp;#8220;immunized&amp;#8221; locks&amp;nbsp;either:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;don&amp;#8217;t panic at all;&amp;nbsp;or&lt;/li&gt;
&lt;li&gt;don&amp;#8217;t leave guarded resources in an inconsistent state if they &lt;em&gt;do&lt;/em&gt;&amp;nbsp;panic&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Like it&amp;#8217;s been mentioned earlier,
the best way to make that happen is to keep lock-guarded critical sections minimal and&amp;nbsp;infallible.&lt;/p&gt;
&lt;h4&gt;matches&lt;/h4&gt;
&lt;p&gt;Pattern matching is one of the most important features of Rust,
but some of the relevant language constructs have awkward shortcomings.
The &lt;code&gt;if let&lt;/code&gt; conditional, for example, cannot be combined with boolean&amp;nbsp;tests:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_good&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and thus requires additional nesting, or a different approach&amp;nbsp;altogether.&lt;/p&gt;
&lt;p&gt;Thankfully, to help with situations like this,
there is the &lt;a href="http://docs.rs/matches"&gt;&lt;em&gt;matches&lt;/em&gt; crate&lt;/a&gt; with a bunch of convenient macros.
Besides &lt;a href="https://docs.rs/matches/0.1.6/matches/macro.matches.html"&gt;its namesake, &lt;code&gt;matches!&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;matches&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_good&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;it also exposes assertion macros
(&lt;a href="https://docs.rs/matches/0.1.6/matches/macro.assert_matches.html"&gt;&lt;code&gt;assert_match!&lt;/code&gt;&lt;/a&gt;
and &lt;a href="https://docs.rs/matches/0.1.6/matches/macro.debug_assert_matches.html"&gt;&lt;code&gt;debug_assert_match!&lt;/code&gt;&lt;/a&gt;)
that can be used in both production and test&amp;nbsp;code.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;This concludes the overview of small Rust crates, at least for&amp;nbsp;now.&lt;/p&gt;
&lt;p&gt;To be certain, these crates are by far not the only ones that are small in size
and simultaneously almost indispensable.
Many more great libraries can be found
e.g. in the &lt;a href="https://github.com/rust-unofficial/awesome-rust#libraries"&gt;Awesome Rust registry&lt;/a&gt;,
though obviously you could argue if all of them are truly &amp;#8220;micro&amp;#8221;&amp;nbsp;;-)&lt;/p&gt;
&lt;p&gt;If you know more crates in the similar vein,
make sure to mention them in the&amp;nbsp;comments!&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;A &lt;em&gt;sum type&lt;/em&gt; consists of several alternatives,
out of which only one has been picked for a particular instance.
The other common name for it is a &lt;em&gt;tagged union&lt;/em&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;Unless you come from Haskell, that is, where &lt;code&gt;Either&lt;/code&gt; is the equivalent of Rust&amp;#8217;s &lt;code&gt;Result&lt;/code&gt; :)&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;You will occasionally need an explicit &lt;code&gt;*&lt;/code&gt; to trigger the &lt;code&gt;Deref&lt;/code&gt; coercion it uses.&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:4"&gt;
&lt;p&gt;It only supports unitary enums of up to 32 variants.&amp;#160;&lt;a class="footnote-backref" href="#fnref:4" rev="footnote" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="Rust"></category><category term="libraries"></category></entry><entry><title>O(n log n) isnâtÂ bad</title><link href="http://xion.io/post/programming/o-nlogn-isnt-bad.html" rel="alternate"></link><updated>2017-10-19T14:59:00+00:00</updated><author><name>Karol Kuczmarski</name></author><id>tag:xion.io,2017-10-19:post/programming/o-nlogn-isnt-bad.html</id><summary type="html">&lt;p&gt;Most programmers should be familiar with the Big O notation of computational complexity.
This is how, in very theoretical terms, we are describing the relative differences in the performance of&amp;nbsp;algorithms.&lt;/p&gt;
&lt;p&gt;Excluding the case of constant time complexity (&lt;code&gt;O(1)&lt;/code&gt;),
the vast majority of practical algorithms falls into one of the following&amp;nbsp;classes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;O(log n)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;O(n)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;O(n log n)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;O(nÂ²)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The further down a class is on this list, the worse (less efficient) it gets.
What may not be completely obvious, however, is the magnitude of&amp;nbsp;differences.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s have a closer&amp;nbsp;look.&lt;/p&gt;
&lt;h4&gt;The best and the&amp;nbsp;worst&lt;/h4&gt;
&lt;p&gt;First, it&amp;#8217;s pretty easy when it comes to the extreme points.
A logarithmic complexity is clearly great,
because the number of operations barely even grows as the size of input increases.
For &lt;code&gt;N&lt;/code&gt; of one million,  the (natural&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;) logarithm is equal to about 14.
For one &lt;em&gt;trillion&lt;/em&gt; &amp;#8212; million times more &amp;#8212; &lt;code&gt;log n&lt;/code&gt; is only&amp;nbsp;27!&lt;/p&gt;
&lt;p&gt;Such amazing scalability is one of the reasons
why databases, for example,
can execute queries extremely efficiently even for millions or billions of&amp;nbsp;records.&lt;/p&gt;
&lt;p&gt;On the other end, an algorithm that has quadratic complexity
will only do well for very small datasets.
It can still be useful in practice,
especially as a small-input optimization of some larger procedure&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;,
or because of some other desirable properties (like good&amp;nbsp;parallelizability).&lt;/p&gt;
&lt;p&gt;Outside of those carefully selected cases, however,
the computational requirements of &lt;code&gt;O(nÂ²)&lt;/code&gt; for any large dataset are usually too&amp;nbsp;great.&lt;/p&gt;
&lt;h4&gt;Middle&amp;nbsp;ground&lt;/h4&gt;
&lt;p&gt;As for the remaining two classes,
the linear one (&lt;code&gt;O(n)&lt;/code&gt;) is probably the easiest to reason&amp;nbsp;about.&lt;/p&gt;
&lt;p&gt;In a linear algorithm,
the number of operations increases steadily along with the size of input.&lt;br&gt;
For thousand elements, you need roughly a thousand steps (times a constant factor).&lt;br&gt;
For a million, there will be a million operations&amp;nbsp;necessary.&lt;/p&gt;
&lt;p&gt;Thus, by itself, the linear scaling doesn&amp;#8217;t get any better or worse when data gets bigger&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;.
In many cases, it means there is nothing to be exploited in the structure of input set
that could make the running time any better
(compared to e.g. the reliance of logarithmic searches on sorted order).
Typically, all the data must be traversed at least once in its&amp;nbsp;entirety.&lt;/p&gt;
&lt;p&gt;All in all, it can be a decent time complexity,
but it&amp;#8217;s nothing to write home&amp;nbsp;about.&lt;/p&gt;
&lt;h4&gt;A function has no&amp;nbsp;name&lt;/h4&gt;
&lt;p&gt;What about &lt;code&gt;O(n log n)&lt;/code&gt;, then?
It falls between the linear and the quadratic,
which suggests that it&amp;#8217;s somewhere half-way between mediocre and awful.
We don&amp;#8217;t even have a widely used word for it,
meaning it is probably not even that&amp;nbsp;important.&lt;/p&gt;
&lt;p&gt;Both of those suppositions are&amp;nbsp;wrong.&lt;/p&gt;
&lt;p&gt;First, &lt;code&gt;O(n log n)&lt;/code&gt; isn&amp;#8217;t even remotely close to the &amp;#8220;median&amp;#8221; (whatever that means) of &lt;code&gt;O(n)&lt;/code&gt; and &lt;code&gt;O(nÂ²)&lt;/code&gt;.
In reality, its asymptotic rate of growth places it very close to the former.
You can see this pretty clearly by looking at the following&amp;nbsp;plot:&lt;/p&gt;
&lt;p style="text-align:center"&gt;
    &lt;img src="http://xion.io/images/time-complexity.png" alt="Time complexity plot"&gt;&lt;br&gt;
    &lt;small&gt;
        &lt;a href="http://coding-geek.com/how-databases-work/"&gt;Source&lt;/a&gt;
    &lt;/small&gt;
&lt;/p&gt;

&lt;p&gt;The gap between &lt;code&gt;O(n)&lt;/code&gt; and &lt;code&gt;O(n log n)&lt;/code&gt; barely even widens,
even as the values on vertical axis increase to the limits of&amp;nbsp;practicality.&lt;/p&gt;
&lt;p&gt;Indeed, the &lt;code&gt;log n&lt;/code&gt; part of the function grows slowly enough
that, for many practical purposes, it can be considered a large &amp;#8220;constant&amp;#8221; in the complexity formula.
Some complicated algorithm that&amp;#8217;s technically linear may therefore be a &lt;em&gt;worse&lt;/em&gt; choice
than a simpler solution with &lt;code&gt;O(n log n)&lt;/code&gt; scaling.&lt;/p&gt;
&lt;h4&gt;Sorting it&amp;nbsp;out&lt;/h4&gt;
&lt;p&gt;What are the typical situations where &lt;code&gt;O(n log n)&lt;/code&gt; arises in practice?
Very often, it has to do with establishing some kind of &lt;em&gt;ordering&lt;/em&gt; of the input
which includes at least one of the&amp;nbsp;following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a wholesale sorting of it (using pairwise&amp;nbsp;comparison)&lt;/li&gt;
&lt;li&gt;repeated queries for the current maximum or minimum (via a priority&amp;nbsp;queue)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Considering that many practical algoithms &amp;#8212;
from &lt;a href="https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm"&gt;pathfinding&lt;/a&gt;
to &lt;a href="https://en.wikipedia.org/wiki/Huffman_coding"&gt;compression&lt;/a&gt; &amp;#8212;
utilize some form of sorting or sorted data structures,
it makes &lt;code&gt;O(n log n)&lt;/code&gt; quite an important complexity&amp;nbsp;class.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Natural logarithm has a base of &lt;em&gt;e&lt;/em&gt; = 2.71828183&amp;#8230;
The exact choice of logarithm base doesn&amp;#8217;t matter for asymptotic complexity,
because it changes only the constant coefficient in the &lt;code&gt;O(f(n))&lt;/code&gt; function.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;A widely used example is &lt;a href="https://en.wikipedia.org/wiki/Timsort"&gt;Timsort&lt;/a&gt;
which switches from merge sort (&lt;code&gt;O(log n)&lt;/code&gt;) to insertion sort (&lt;code&gt;O(nÂ²)&lt;/code&gt;)
when the array slice is short enough to warrant it.&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;In reality, practical factors like memory/cache size, &lt;span class="caps"&gt;OS&lt;/span&gt; scheduling behavior,
and a myriad of other things can make the actual running time scale sublinearly beyond a certain point.&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="algorithms"></category><category term="complexity"></category><category term="Big O"></category></entry><entry><title>The Printer Monad inÂ Haskell</title><link href="http://xion.io/post/code/haskell-printer-monad.html" rel="alternate"></link><updated>2017-08-04T12:39:00+00:00</updated><author><name>Karol Kuczmarski</name></author><id>tag:xion.io,2017-08-04:post/code/haskell-printer-monad.html</id><summary type="html">&lt;p&gt;Quite recently, I have encountered an interesting case of monad-based refactoring in&amp;nbsp;Haskell.&lt;/p&gt;
&lt;p&gt;Suppose you have a &lt;code&gt;ComplicatedRecord&lt;/code&gt;
that holds the results of some lengthy and important process in your program.
You want to present that data to the user in a nicely formatted way,
so you write a function which begins somewhat like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;{-# LANGUAGE RecordWildcards #-}&lt;/span&gt;

&lt;span class="c1"&gt;-- | Pretty-print the content of the record.&lt;/span&gt;
&lt;span class="nf"&gt;ppRecord&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;ComplicatedRecord&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;IO&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;
&lt;span class="nf"&gt;ppRecord&lt;/span&gt; &lt;span class="kt"&gt;ComplicatedRecord&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
    &lt;span class="c1"&gt;-- ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Inside, there is plenty of &lt;code&gt;putStrLn&lt;/code&gt; calls, likely hidden inside more specific subfunctions
that format all the numerous parts of &lt;code&gt;ComplicatedRecord&lt;/code&gt;.
But the &lt;code&gt;IO&lt;/code&gt; monad isn&amp;#8217;t there just for printing:
because the code went through multiple iterations,
some of this logic actually takes advantage of it by making additional system &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; network&amp;nbsp;calls.&lt;/p&gt;
&lt;p&gt;So yeah, it&amp;#8217;s not particularly&amp;nbsp;pretty.&lt;/p&gt;
&lt;p&gt;Now, however, we find out that the output we&amp;#8217;re printing here
shouldn&amp;#8217;t &lt;em&gt;always&lt;/em&gt; go directly to stdout.
In some cases, unsurprisingly, we actually want it back as a single string,
without having it sent to the standard output at&amp;nbsp;all.&lt;/p&gt;
&lt;h4&gt;Just $ return .&amp;nbsp;it&lt;/h4&gt;
&lt;p&gt;Your first instinct here may be to simply give back the final string (well, &lt;code&gt;Text&lt;/code&gt;)
as the function result&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;ppRecord&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;ComplicatedRecord&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;IO&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;However, this turns out to be rather awkward.
While in most other languages
we would simply accumulate output by progressively adding more data to a mutable result,
this would be much more inconvenient (and somewhat weird) to do in&amp;nbsp;Haskell.&lt;/p&gt;
&lt;p&gt;This is where the stdout-based approach seems cleaner;
instead of straightforward, sequential code like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;{-# LANGUAGE OverloadedStrings #-}&lt;/span&gt;

&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Control.Monad.Extra&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;whenJust&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Data.Text.IO&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;TextShow&lt;/span&gt;

&lt;span class="nf"&gt;ppOrder&lt;/span&gt; &lt;span class="kt"&gt;Order&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;putStrLn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Order #&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ordNumber&lt;/span&gt;
    &lt;span class="n"&gt;ppAddress&lt;/span&gt; &lt;span class="n"&gt;ordDeliveryAddress&lt;/span&gt;
    &lt;span class="n"&gt;forM_&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;zip&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;ordItems&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="nf"&gt;\&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
        &lt;span class="n"&gt;putStrLn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;showt&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="ow"&gt;::&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;. &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;itName&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; x&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;showt&lt;/span&gt; &lt;span class="n"&gt;itQuantity&lt;/span&gt;
    &lt;span class="n"&gt;whenJust&lt;/span&gt; &lt;span class="n"&gt;ordBillingAddress&lt;/span&gt; &lt;span class="n"&gt;ppAddress&lt;/span&gt;

&lt;span class="nf"&gt;ppAddress&lt;/span&gt; &lt;span class="kt"&gt;Address&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;putStrLn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;addrFirstName&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;addrLastName&lt;/span&gt;
    &lt;span class="n"&gt;putStrLn&lt;/span&gt; &lt;span class="n"&gt;addrLine1&lt;/span&gt;
    &lt;span class="n"&gt;whenJust&lt;/span&gt; &lt;span class="n"&gt;addrLine2&lt;/span&gt; &lt;span class="n"&gt;putStrLn&lt;/span&gt;
    &lt;span class="n"&gt;putStrLn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;addrCity&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;, &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;addrPostalCode&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;we have to overhaul each function and turn it into a much less pleasant &amp;#8220;&lt;code&gt;mappend&lt;/code&gt;age&amp;#8221;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;ppOrder&lt;/span&gt; &lt;span class="kt"&gt;Order&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;unlines&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;mconcat&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Order #&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ordNumber&lt;/span&gt;
    &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ppAddress&lt;/span&gt; &lt;span class="n"&gt;ordDeliveryAddress&lt;/span&gt;
    &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ppItems&lt;/span&gt; &lt;span class="n"&gt;ordItems&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;maybe&lt;/span&gt; &lt;span class="kt"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;\&lt;/span&gt;&lt;span class="n"&gt;addr&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ppAddress&lt;/span&gt; &lt;span class="n"&gt;addr&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="n"&gt;ordBillingAddress&lt;/span&gt;
    &lt;span class="kr"&gt;where&lt;/span&gt;
    &lt;span class="n"&gt;ppItems&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mconcat&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uncurry&lt;/span&gt; &lt;span class="n"&gt;ppItem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;zip&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;ppItem&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="kt"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;showt&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;. &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;itName&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; x&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;itQuantity&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;One may argue that this is, in fact, the more idiomatic approach,
but I&amp;#8217;m not very fond of all those commas.
Plus, it shows rather clearly that any conditional logic (like with &lt;code&gt;ordBillingAddress&lt;/code&gt; here)
is going to get pretty&amp;nbsp;cumbersome.&lt;/p&gt;
&lt;h4&gt;Along comes the &lt;code&gt;Writer&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;What I&amp;#8217;m saying here is that even in pure code,
it is sometimes very desirable to have a &lt;code&gt;do&lt;/code&gt; notation.
For that, however, we need a suitable &lt;code&gt;Monad&lt;/code&gt;&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt; to provide the meaning of &amp;#8220;invisible semicolon&amp;#8221; in a &lt;code&gt;do&lt;/code&gt; block.&lt;/p&gt;
&lt;p&gt;And &lt;code&gt;Text&lt;/code&gt;, obviously, isn&amp;#8217;t one.
Neither is &lt;code&gt;[Text]&lt;/code&gt; (lines of text),
nor any other type we&amp;#8217;d use to represent the final output of formatting &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; printing.
They are unsuitable, because they cannot encode the &lt;em&gt;computation&lt;/em&gt; that eventually produces said output &amp;#8212;
either the top-level one (&lt;code&gt;ppRecord&lt;/code&gt;) or any of its building blocks (like the &lt;code&gt;ppOrder&lt;/code&gt; or &lt;code&gt;ppAddress&lt;/code&gt;),
down to a most elementary &lt;code&gt;putStrLn&lt;/code&gt;.
The only thing they can stand for is the result&amp;nbsp;itself.&lt;/p&gt;
&lt;p&gt;Fortunately, the pattern of executing code and occassionally producing some &amp;#8220;additional&amp;#8221; output
has been abstracted over in the Haskell standard library.
This is exactly the use case for the &lt;code&gt;Writer&lt;/code&gt; monad!&lt;/p&gt;
&lt;p&gt;The definition of &lt;code&gt;Writer&lt;/code&gt; is roughly equivalent to the&amp;nbsp;following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kr"&gt;newtype&lt;/span&gt; &lt;span class="kt"&gt;Writer&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="c1"&gt;-- omitted&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Of the two type parameters it takes, the &lt;code&gt;w&lt;/code&gt; one signifies what output it can produce &amp;#8220;on the side&amp;#8221;.
This is contrasted with &lt;code&gt;a&lt;/code&gt; which is the regular result of a monadic expression or function.
In our case, &lt;code&gt;a&lt;/code&gt; will basically always be &lt;code&gt;()&lt;/code&gt; (unit/&amp;#8221;empty&amp;#8221; type),
but it is nonetheless necessary for the &lt;code&gt;Writer&lt;/code&gt; to behave as a&amp;nbsp;monad.&lt;/p&gt;
&lt;p&gt;To complement the above definition, &lt;code&gt;Writer&lt;/code&gt; comes with several useful functions.
Among those, the most interesting one is &lt;code&gt;tell&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;tell&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Writer&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;write&lt;/code&gt; would&amp;#8217;ve probably been a better name for it,
as it&amp;#8217;s definitely the main and defining operation of &lt;code&gt;Writer&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Looking at its signature, we can see it takes a bit of the &lt;code&gt;Writer&lt;/code&gt;&lt;span class="quo"&gt;&amp;#8216;&lt;/span&gt;s output (&lt;code&gt;w&lt;/code&gt;)
and results in a &lt;code&gt;Writer&lt;/code&gt; action.
Internally, it will simply add the argument to the already accumulated output of the writer&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;To make everything more concrete,
here&amp;#8217;s a literal &amp;#8220;Hello world&amp;#8221; example coded very verbosly as a &lt;code&gt;Writer&lt;/code&gt; action:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Control.Monad.Writer&lt;/span&gt;

&lt;span class="nf"&gt;hello&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Writer&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;
&lt;span class="nf"&gt;hello&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;tell&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;tell&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;tell&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;world&amp;quot;&lt;/span&gt;

&lt;span class="nf"&gt;main&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;IO&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;
&lt;span class="nf"&gt;main&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
    &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;runWriter&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt;
    &lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;putStrLn&lt;/span&gt; &lt;span class="n"&gt;greeting&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It also contains the last element of the &lt;code&gt;Writer&lt;/code&gt; puzzle:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;runWriter&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Writer&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Like its name suggests, this function will &amp;#8220;run&amp;#8221; any &lt;code&gt;Writer&lt;/code&gt; action that we give it,
returning both the &amp;#8220;regular&amp;#8221; result (&lt;code&gt;a&lt;/code&gt;) plus any output passed in &lt;code&gt;tell&lt;/code&gt;s (&lt;code&gt;w&lt;/code&gt;).&lt;sup id="fnref:4"&gt;&lt;a class="footnote-ref" href="#fn:4" rel="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h4&gt;My little monad: transformers are&amp;nbsp;magic&lt;/h4&gt;
&lt;p&gt;The last example may be very simple,
but it contains all the building blocks for many of the printing functions we need.
If we define a convenience wrapper for &lt;code&gt;tell&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;putLn&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Writer&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;
&lt;span class="nf"&gt;putLn&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tell&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;then both &lt;code&gt;ppAddress&lt;/code&gt; and &lt;code&gt;ppOrder&lt;/code&gt; can be translated
through a mere mechanical substitution of &lt;code&gt;putStrLn&lt;/code&gt; with &lt;code&gt;putLn&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;ppAddress&lt;/span&gt; &lt;span class="kt"&gt;Address&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;putLn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;addrFirstName&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;addrLastName&lt;/span&gt;
    &lt;span class="n"&gt;putLn&lt;/span&gt; &lt;span class="n"&gt;addrLine1&lt;/span&gt;
    &lt;span class="n"&gt;whenJust&lt;/span&gt; &lt;span class="n"&gt;addrLine2&lt;/span&gt; &lt;span class="n"&gt;putLn&lt;/span&gt;
    &lt;span class="n"&gt;putLn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;addrCity&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;, &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;addrPostalCode&lt;/span&gt;

&lt;span class="c1"&gt;-- ppOrder omitted&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Unfortunately, a bare &lt;code&gt;Writer&lt;/code&gt; like this can only work for pure code,
which isn&amp;#8217;t a luxury we can expect in every situtation.
In my case, some of the printing logic was tied pretty strongly to &lt;code&gt;IO&lt;/code&gt;,
and it would be difficult and time consuming to decouple&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;Thankfully, the reliance on &lt;code&gt;IO&lt;/code&gt; isn&amp;#8217;t a complete deal breaker.
While we cannot ensure that nothing calls &lt;code&gt;putStrLn&lt;/code&gt; anymore,
we can provide the &lt;code&gt;tell&lt;/code&gt;/&lt;code&gt;putLn&lt;/code&gt; capabilities alongside whatever &lt;em&gt;other&lt;/em&gt; &lt;code&gt;IO&lt;/code&gt; calls
our code has to make (for&amp;nbsp;now).&lt;/p&gt;
&lt;p&gt;To achieve that, we need to create a &lt;em&gt;monad stack&lt;/em&gt; with &lt;code&gt;WriterT&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kr"&gt;newtype&lt;/span&gt; &lt;span class="kt"&gt;WriterT&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="c1"&gt;-- omitted&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;WriterT&lt;/code&gt; is a &lt;em&gt;monad transformer&lt;/em&gt;, one of those scary Haskell concepts
that are actually simpler than they appear on the surface.
This is because transfomers like &lt;code&gt;WriterT&lt;/code&gt; are mere wrappers.
The only difference between it and a regular &lt;code&gt;Writer&lt;/code&gt; is the additional &lt;code&gt;m&lt;/code&gt; parameter,
which is the &lt;em&gt;inner monad&lt;/em&gt; we&amp;#8217;re packaging inside a new &lt;code&gt;Writer&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here (and in many other cases), &lt;code&gt;m&lt;/code&gt; will be substituted with &lt;code&gt;IO&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kr"&gt;type&lt;/span&gt; &lt;span class="kt"&gt;Printer&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;WriterT&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt; &lt;span class="kt"&gt;IO&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;  &lt;span class="c1"&gt;-- w == Text, m == IO&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;thus creating the titular &lt;code&gt;Printer&lt;/code&gt; monad.
This hybrid beast can both output &lt;code&gt;Text&lt;/code&gt; through the &lt;code&gt;Writer&lt;/code&gt; &lt;span class="caps"&gt;API&lt;/span&gt;,
as well as perform any additional &lt;code&gt;IO&lt;/code&gt; operations
that the code may (still)&amp;nbsp;require.&lt;/p&gt;
&lt;p&gt;Below is an example;
the &lt;code&gt;User&lt;/code&gt; record requires an I/O call to get the size of its &lt;code&gt;$HOME&lt;/code&gt; directory:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Control.Monad.IO.Class&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;liftIO&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;System.Directory&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;getFileSize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;-- To print this data type nicely, we sadly require I/O :(&lt;/span&gt;
&lt;span class="kr"&gt;data&lt;/span&gt; &lt;span class="kt"&gt;User&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;User&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;usrName&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt;
                 &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;usrHomeDir&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;FilePath&lt;/span&gt;
                 &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;ppUser&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;User&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;IO&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt;
&lt;span class="nf"&gt;ppUser&lt;/span&gt; &lt;span class="kt"&gt;User&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;snd&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;runWriterT&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;putLn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Name: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;usrName&lt;/span&gt;
    &lt;span class="n"&gt;homeSize&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;liftIO&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;getFileSize&lt;/span&gt; &lt;span class="n"&gt;usrHomeDir&lt;/span&gt;
    &lt;span class="n"&gt;putLn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;$HOME: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;showt&lt;/span&gt; &lt;span class="n"&gt;usrHomeDir&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;(&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;showt&lt;/span&gt; &lt;span class="n"&gt;homeSize&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; bytes)&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As a bit of necessary cruft,
we have to use &lt;code&gt;liftIO&lt;/code&gt; to &amp;#8220;lift&amp;#8221; (wrap) &lt;code&gt;IO&lt;/code&gt; actions such as &lt;code&gt;getFileSize&lt;/code&gt;
in a full &lt;code&gt;Printer&lt;/code&gt; monad before executing them.
Besides everything else you can think of,
this is yet another argument for eventually getting rid of the &lt;code&gt;IO&lt;/code&gt; :)&lt;/p&gt;
&lt;h4&gt;Making the monads&amp;nbsp;coexist&lt;/h4&gt;
&lt;p&gt;But our job isn&amp;#8217;t done yet.
Despite looking very reasonable, this version of &lt;code&gt;ppUser&lt;/code&gt; doesn&amp;#8217;t actually compile!
The actual type error may vary a little,
but it all boils down to a difference between &lt;code&gt;WriterT Text IO ()&lt;/code&gt; (i.e. &lt;code&gt;Printer ()&lt;/code&gt;)
and &lt;code&gt;Writer Text ()&lt;/code&gt; at each call site of &lt;code&gt;putLn&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;GHC&lt;/span&gt; is obviously correct.
However, the problem lies not in how we&amp;#8217;re calling &lt;code&gt;putLn&lt;/code&gt;,
but rather the way it&amp;#8217;s been&amp;nbsp;defined:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;putLn&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Writer&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This type can only produce a specific, &lt;em&gt;pure&lt;/em&gt; &lt;code&gt;Writer&lt;/code&gt; action.
But to fit inside the &lt;code&gt;do&lt;/code&gt; block of our compound monad,
we need the &lt;code&gt;Writer&lt;/code&gt; + &lt;code&gt;IO&lt;/code&gt; combo from &lt;code&gt;WriterT Text IO&lt;/code&gt; (i.e. &lt;code&gt;Printer&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;We can try to address the mismatch by changing the signature&amp;nbsp;to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;putLn&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;WriterT&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt; &lt;span class="kt"&gt;IO&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;-- or just: Printer ()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;but this will only result in the &lt;em&gt;opposite&lt;/em&gt; problem.
Now, all the pure printers like &lt;code&gt;ppAddress&lt;/code&gt; are facing the fact
that &lt;code&gt;putLn&lt;/code&gt; is a (wrapped) &lt;code&gt;IO&lt;/code&gt; action, despite not actually doing any I/O&amp;nbsp;whatsoever.&lt;/p&gt;
&lt;p&gt;The obvious question is, can we have something that fits &lt;em&gt;both&lt;/em&gt;?&lt;/p&gt;
&lt;p&gt;Earlier on, I&amp;#8217;ve said that both vanilla &lt;code&gt;Writer&lt;/code&gt; and the &lt;code&gt;IO&lt;/code&gt;-spruced &lt;code&gt;Printer&lt;/code&gt; support the &amp;#8220;&lt;code&gt;Writer&lt;/code&gt; &lt;span class="caps"&gt;API&lt;/span&gt;&amp;#8221;,
most notably the &lt;code&gt;tell&lt;/code&gt; function.
This notion of a &amp;#8220;monadic interface&amp;#8221; isn&amp;#8217;t just hand-waving, though,
and Haskell (obviously!) provides a way to express it&amp;nbsp;programmatically.&lt;/p&gt;
&lt;p&gt;Meet the &lt;code&gt;MonadWriter&lt;/code&gt; typeclass:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Monad&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Monoid&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;MonadWriter&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Any monad that can work as a &lt;code&gt;Writer&lt;/code&gt; will be an instance of it,
regardless of whether it wraps over &lt;code&gt;IO&lt;/code&gt; or anything else.
Functions like &lt;code&gt;tell&lt;/code&gt; are defined to be
&lt;a href="http://hackage.haskell.org/package/mtl-2.2.1/docs/Control-Monad-Writer-Class.html#v:tell"&gt;polymorphic over it&lt;/a&gt;,
enabling us to leverage the same technique they use when we define &lt;code&gt;putLn&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;{-# LANGUAGE FlexibleContexts #-}&lt;/span&gt;

&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Control.Monad.Writer.Class&lt;/span&gt;

&lt;span class="nf"&gt;putLn&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;MonadWriter&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="ow"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;
&lt;span class="nf"&gt;putLn&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tell&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you aren&amp;#8217;t very familiar with this syntax,
the part before &lt;code&gt;=&amp;gt;&lt;/code&gt; is a &lt;em&gt;typeclass constraint&lt;/em&gt;, or &lt;em&gt;context&lt;/em&gt;.
It defines the requirements to be satisfied by types
which are later used in the function&amp;nbsp;signature.&lt;/p&gt;
&lt;p&gt;Here, we request a &lt;code&gt;MonadWriter&lt;/code&gt; instance &amp;#8212; one where &lt;code&gt;Text&lt;/code&gt; is the output
but &lt;em&gt;anything&lt;/em&gt; can be the inner monad.
We refer to that unknown monad only as &lt;code&gt;m&lt;/code&gt;, a type variable.
The compiler will figure out what to substitute for it &lt;em&gt;at every call site&lt;/em&gt; of &lt;code&gt;putLn&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;As a result, both a pure &lt;code&gt;Writer&lt;/code&gt; and the &lt;code&gt;IO&lt;/code&gt;-bound &lt;code&gt;Printer&lt;/code&gt; can now use it.
In the second case, the relevant instance of &lt;code&gt;MonadWriter&lt;/code&gt; will,
naturally, have &lt;code&gt;IO&lt;/code&gt; fill in the &lt;code&gt;m&lt;/code&gt; position.&lt;/p&gt;
&lt;p&gt;But curiously, the &amp;#8220;pure&amp;#8221; &lt;code&gt;Writer&lt;/code&gt; also has
&lt;a href="http://hackage.haskell.org/package/base-4.9.1.0/docs/Data-Functor-Identity.html#t:Identity"&gt;an inner monad&lt;/a&gt;.
It just literally &lt;em&gt;does nothing&lt;/em&gt; but wrap some other&amp;nbsp;value:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kr"&gt;newtype&lt;/span&gt; &lt;span class="kt"&gt;Identity&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Identity&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;runIdentity&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In most cases, this fact is hidden behind
&lt;a href="http://hackage.haskell.org/package/mtl-2.2.1/docs/Control-Monad-Writer-Lazy.html#t:Writer"&gt;the real definition of &lt;code&gt;Writer&lt;/code&gt;&lt;/a&gt;,
though &lt;code&gt;runIdentity&lt;/code&gt; may sometimes come handy for some on-the-spot type hacks&lt;sup id="fnref:5"&gt;&lt;a class="footnote-ref" href="#fn:5" rel="footnote"&gt;5&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h4&gt;The&amp;nbsp;wrap&lt;/h4&gt;
&lt;p&gt;The many things we&amp;#8217;ve talked about here could of course be a starting point
for even more advanced stuff, but obviously we have to stop somewhere!
But don&amp;#8217;t worry: knowing about &lt;code&gt;MonadWriter&lt;/code&gt; and other monad typeclasses like this
is enough to write quite idiomatic&amp;nbsp;code&amp;#8230;&lt;/p&gt;
&lt;p&gt;&amp;#8230;at least until you learn about
&lt;a href="http://www.haskellforall.com/2012/06/you-could-have-invented-free-monads.html"&gt;free monads&lt;/a&gt;,
&lt;a href="https://ocharles.org.uk/blog/posts/2013-12-04-24-days-of-hackage-extensible-effects.html"&gt;effects&lt;/a&gt;,
and the like&amp;nbsp;;-)&lt;/p&gt;
&lt;p&gt;In any case, you can check &lt;a href="https://gist.github.com/Xion/74c39b65c591ae9615b7cf81e88a5946"&gt;this gist&lt;/a&gt;
for the complete code from this&amp;nbsp;post.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;&lt;code&gt;IO&lt;/code&gt; is still necessary due to ad-hoc network fetches and syscalls mentioned earlier.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;Or at least an &lt;code&gt;Applicative&lt;/code&gt;, via the &lt;code&gt;ApplicativeDo&lt;/code&gt; &lt;span class="caps"&gt;GHC&lt;/span&gt; extension.&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;The adding is done via &lt;code&gt;mappend&lt;/code&gt;, requiring &lt;code&gt;w&lt;/code&gt; to be a &lt;code&gt;Monoid&lt;/code&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:4"&gt;
&lt;p&gt;There is also the &lt;code&gt;execWriter&lt;/code&gt; variant which is actually more practical here
  as it only returns the accumulated output.&amp;#160;&lt;a class="footnote-backref" href="#fnref:4" rev="footnote" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:5"&gt;
&lt;p&gt;We could, for example, use it alongside &lt;code&gt;mapWriterT&lt;/code&gt; to &amp;#8220;fix&amp;#8221; the calls to &lt;code&gt;putLn&lt;/code&gt;
  if we didn&amp;#8217;t have control over its definition.&amp;#160;&lt;a class="footnote-backref" href="#fnref:5" rev="footnote" title="Jump back to footnote 5 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="Haskell"></category><category term="Writer"></category><category term="monads"></category><category term="monad transformers"></category><category term="WriterT"></category></entry><entry><title>Extension traits inÂ Rust</title><link href="http://xion.io/post/code/rust-extension-traits.html" rel="alternate"></link><updated>2017-06-21T19:38:00+00:00</updated><author><name>Karol Kuczmarski</name></author><id>tag:xion.io,2017-06-20:post/code/rust-extension-traits.html</id><summary type="html">&lt;p&gt;In a few object-oriented languages,
it is possible to add methods to a class &lt;em&gt;after&lt;/em&gt; it&amp;#8217;s already been&amp;nbsp;defined.&lt;/p&gt;
&lt;p&gt;This feature arises quite naturally if the language has a dynamic type system
that&amp;#8217;s modifiable at runtime.
In those cases, even &lt;em&gt;replacing&lt;/em&gt; existing methods is perfectly possible&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;In addition to that,
some statically typed languages &amp;#8212; most notably in C# &amp;#8212;
offer &lt;em&gt;extension methods&lt;/em&gt; as a &lt;a href="cs-ext-methods"&gt;dedicated feature&lt;/a&gt; of their type systems.
The premise is that you would write standalone functions whose
first argument is specially designated (usually by &lt;code&gt;this&lt;/code&gt; keyword)
as a receiver of the resulting method&amp;nbsp;call:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;WordCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;?&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
                     &lt;span class="n"&gt;StringSplitOptions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RemoveEmptyEntries&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;At the call site,
the new method is indistinguishable from any of the existing&amp;nbsp;ones:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Alice has a cat.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WordCount&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That&amp;#8217;s assuming you have imported both the original class
(or it&amp;#8217;s a built-in like &lt;code&gt;String&lt;/code&gt;),
as well as the module in which the extension method is&amp;nbsp;defined.&lt;/p&gt;
&lt;h4&gt;Rewrite it in&amp;nbsp;Rust&lt;/h4&gt;
&lt;p&gt;The curious thing about &lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt;&amp;#8216;s type system is
that it permits extension methods solely as a side effect of its core building block: &lt;em&gt;traits&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;In this post, I&amp;#8217;m going to describe a certain design pattern in Rust
which involves third-party types and user-defined traits.
Several popular crates &amp;#8212;
like &lt;a href="https://docs.rs/itertools"&gt;itertools&lt;/a&gt; or &lt;a href="https://docs.rs/unicode-normalization/"&gt;unicode-normalization&lt;/a&gt; &amp;#8212;
utilize it very successfully to add new, useful methods to the language standard&amp;nbsp;types.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m not sure if this pattern has an official or widely accepted name.
Personally, I&amp;#8217;ve taken to calling it &lt;strong&gt;extension traits&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s have a look at how they are commonly&amp;nbsp;implemented.&lt;/p&gt;
&lt;h4&gt;Ingredients&lt;/h4&gt;
&lt;p&gt;We can use the extension trait pattern if we want to have additional methods in a type
that we don&amp;#8217;t otherwise control (or don&amp;#8217;t want to&amp;nbsp;modify).&lt;/p&gt;
&lt;p&gt;Common cases&amp;nbsp;include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Rust standard library types, like &lt;code&gt;Result&lt;/code&gt;, &lt;code&gt;String&lt;/code&gt;,
  or anything else inside the &lt;code&gt;std&lt;/code&gt; namespace&lt;/li&gt;
&lt;li&gt;types imported from &lt;a href="https://crates.io"&gt;third-party&amp;nbsp;libraries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;types from the current crate if additional methods only make sense in certain scenarios
  (e.g. conditional compilation / testing)&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The crux of this technique is really simple.
Like with most design patterns, however,
it involves a certain degree of boilerplate and&amp;nbsp;duplication.&lt;/p&gt;
&lt;p&gt;So without further ado&amp;#8230;
In order to &amp;#8220;patch&amp;#8221; some new method(s) into an external type you will need&amp;nbsp;to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Define a trait with signatures of all the methods you want to&amp;nbsp;add.&lt;/li&gt;
&lt;li&gt;Implement it for the external&amp;nbsp;type.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;There is no step three&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As an important note on the usage side,
the calling code needs to &lt;em&gt;import your new trait&lt;/em&gt; in addition to the external type.
Once that&amp;#8217;s done, it can proceed to use the new methods is if they were there to begin&amp;nbsp;with.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m sure you are keen on seeing some&amp;nbsp;examples!&lt;/p&gt;
&lt;h4&gt;Broadening your &lt;code&gt;Option&lt;/code&gt;s&lt;/h4&gt;
&lt;p&gt;We&amp;#8217;re going to add two new methods to Rust&amp;#8217;s &lt;a href="https://doc.rust-lang.org/std/option/enum.Option.html"&gt;standard &lt;code&gt;Option&lt;/code&gt; type&lt;/a&gt;.
The goal is to make it more convenient to operate on mutable &lt;code&gt;Option&lt;/code&gt;s
by allowing to easily replace an existing value with another one&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s the appropriate extension trait&lt;sup id="fnref:4"&gt;&lt;a class="footnote-ref" href="#fn:4" rel="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c-Doc"&gt;/// Additional mutation methods for `Option`.&lt;/span&gt;
&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;trait&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;OptionMutExt&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c-Doc"&gt;/// Replace the existing `Some` value with a new one.&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c-Doc"&gt;///&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c-Doc"&gt;/// Returns the previous value if it was present, or `None` if no replacement was made.&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c-Doc"&gt;/// Replace the existing `Some` value with the result of given closure.&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c-Doc"&gt;///&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c-Doc"&gt;/// Returns the previous value if it was present, or `None` if no replacement was made.&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;replace_with&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;FnOnce&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It may feel at little bit weird to implement it.&lt;br&gt;
You will basically have to pretend you are &lt;em&gt;inside the &lt;code&gt;Option&lt;/code&gt; type itself&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;impl&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;OptionMutExt&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;replace_with&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;FnOnce&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_some&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;take&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nb"&gt;None&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Unfortunately, this is just an illusion.
Extension traits grant no special powers
that&amp;#8217;d allow you to bypass any of the regular visibility rules.
All you can use inside the new methods is still
just the &lt;em&gt;public interface&lt;/em&gt; of the type you&amp;#8217;re augmenting (here, &lt;code&gt;Option&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;In our case, however, this is good enough,
mostly thanks to &lt;a href="option_take"&gt;the recently introduced &lt;code&gt;Option::take&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To use our shiny new methods in other places,
all we have to do is import the extension&amp;nbsp;trait:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ext&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;rust&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;OptionMutExt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// assuming you put it in ext/rust.rs&lt;/span&gt;

&lt;span class="c1"&gt;// ...somewhere...&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;u32&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;...;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Option had a value of {} before replacement&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;None&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;assert_eq&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It doesn&amp;#8217;t matter where it was defined either,
meaning we can ship it away to &lt;a href="https://crates.io"&gt;crates.io&lt;/a&gt;
and let it accrue as many happy users as &lt;code&gt;Itertools&lt;/code&gt; has&amp;nbsp;;-)&lt;/p&gt;
&lt;h4&gt;Are you &lt;code&gt;hyper::Body&lt;/code&gt; ready?&lt;/h4&gt;
&lt;p&gt;Our second example will demonstrate attaching more methods to a third-party&amp;nbsp;type.&lt;/p&gt;
&lt;p&gt;Last week, there was a new release of &lt;a href="https://hyper.rs/"&gt;Hyper&lt;/a&gt;,
a popular Rust framework for &lt;span class="caps"&gt;HTTP&lt;/span&gt; servers &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; clients.
It was notable because it marked a switch from synchronous, straightforward &lt;span class="caps"&gt;API&lt;/span&gt;
to a more complex, asynchronous one
(which I incidentally &lt;a href="http://xion.io/post/programming/rust-async-closer-look.html"&gt;wrote about a few weeks ago&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Predictably, &lt;a href="https://www.reddit.com/r/rust/comments/6hksa0/problems_with_understanding_hypers_async/"&gt;there has been some confusion&lt;/a&gt;
among its new and existing&amp;nbsp;users.&lt;/p&gt;
&lt;p&gt;We&amp;#8217;re going to help by pinning a more convenient interface on
&lt;a href="https://hyper.rs/hyper/master/hyper/struct.Body.html"&gt;hyper&amp;#8217;s &lt;code&gt;Body&lt;/code&gt; type&lt;/a&gt;.
&lt;code&gt;Body&lt;/code&gt; here is a struct representing the content of an &lt;span class="caps"&gt;HTTP&lt;/span&gt; request or response.
After the &amp;#8216;asyncatastrophe&amp;#8217;,
it doesn&amp;#8217;t allow to access the raw incoming bytes as easily as it did&amp;nbsp;before.&lt;/p&gt;
&lt;p&gt;Thanks to extension traits, we can fix this rather&amp;nbsp;quickly:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;futures&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;BoxFuture&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;future&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Stream&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;hyper&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;trait&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;BodyExt&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c-Doc"&gt;/// Collect all the bytes from all the `Chunk`s from `Body`&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c-Doc"&gt;/// and return it as `Vec&amp;lt;u8&amp;gt;`.&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;into_bytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;BoxFuture&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;u8&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;hyper&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c-Doc"&gt;/// Collect all the bytes from all the `Chunk`s from `Body`,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c-Doc"&gt;/// decode them as UTF8, and return the resulting `String`.&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;into_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;BoxFuture&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Box&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Send&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;impl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;BodyExt&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Body&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;into_bytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;BoxFuture&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;u8&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;hyper&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;and_then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;bytes&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;future&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;ok&lt;/span&gt;&lt;span class="o"&gt;::&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;hyper&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_vec&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;boxed&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;into_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;BoxFuture&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Box&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Send&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;into_bytes&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map_err&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Box&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Box&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Send&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;and_then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;bytes&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;from_utf8&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map_err&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Box&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Box&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Send&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;boxed&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With these new methods in hand,
it is relatively straightforward to implement, say, a simple character-counting&amp;nbsp;service:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;futures&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;BoxFuture&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;future&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;hyper&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Service&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ext&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;hyper&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;BodyExt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// assuming the above is in ext/hyper.rs&lt;/span&gt;

&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;impl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Service&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Box&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Send&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;BoxFuture&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Self&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Self&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Self&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deconstruct&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;into_string&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;and_then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;future&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;with_body&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;to_string&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="n"&gt;boxed&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Replacing &lt;code&gt;Box&amp;lt;Error + Send&amp;gt;&lt;/code&gt; with an idiomatic &lt;a href="https://docs.rs/crate/derive-error/"&gt;error enum&lt;/a&gt;
is left as an exercise for the reader&amp;nbsp;:)&lt;/p&gt;
&lt;h4&gt;Extra credit bonus&amp;nbsp;explanation&lt;/h4&gt;
&lt;p&gt;&lt;small&gt;Reading this section is not necessary to use extension traits.&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;So far, we have seen what extension traits are capable of.
It is only right to mention what they &lt;em&gt;cannot do&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Indeed, this technique has some limitations.
They are a conscious choice on the part of Rust authors,
and they were decided upon in an effort to keep the type system &lt;em&gt;coherent&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Coherence isn&amp;#8217;t an everyday topic in Rust,
but it becomes important when working with traits and types that cross package boundaries.
Rules of trait coherence
(described briefly towards the end of &lt;a href="coherence-in-book"&gt;this section of the Rust book&lt;/a&gt;)
state that the following combinations of &amp;#8220;local&amp;#8221; (this crate) and &amp;#8220;external&amp;#8221; (other crates&lt;sup id="fnref:5"&gt;&lt;a class="footnote-ref" href="#fn:5" rel="footnote"&gt;5&lt;/a&gt;&lt;/sup&gt;) are&amp;nbsp;legal:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;implement a &lt;em&gt;local&lt;/em&gt; trait for a &lt;em&gt;local&lt;/em&gt; type.&lt;br&gt;
  This is common in larger programs that use polymorphic&amp;nbsp;abstractions.&lt;/li&gt;
&lt;li&gt;implement an &lt;em&gt;external&lt;/em&gt; trait for a &lt;em&gt;local&lt;/em&gt; type.&lt;br&gt;
  We do this often to integrate with third-party libraries and frameworks,
  just like with &lt;code&gt;hyper&lt;/code&gt; above.&lt;/li&gt;
&lt;li&gt;implement a &lt;em&gt;local&lt;/em&gt; trait for an &lt;em&gt;external&lt;/em&gt; type.&lt;br&gt;
  That&amp;#8217;s extension traits for&amp;nbsp;you!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What is &lt;em&gt;not&lt;/em&gt; possible, however, is&amp;nbsp;to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;implement an &lt;em&gt;external&lt;/em&gt; trait for an &lt;em&gt;external&lt;/em&gt;&amp;nbsp;type&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This case is prohibited in order to make the choice of trait implementations more predictable,
both for the compiler and for the programmer.
Without this rule in place, you could introduce many instances of &lt;code&gt;impl Trait for Type&lt;/code&gt;
(same &lt;code&gt;Trait&lt;/code&gt; and same &lt;code&gt;Type&lt;/code&gt;),
each one with different functionality,
leaving the compiler to &amp;#8220;guess&amp;#8221; the right &lt;code&gt;impl&lt;/code&gt; for any given situation&lt;sup id="fnref:6"&gt;&lt;a class="footnote-ref" href="#fn:6" rel="footnote"&gt;6&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;The decision was thus made to disallow the &lt;code&gt;impl ExternalTrait for ExternalType&lt;/code&gt; case altogether.
If you like, you can read &lt;a href="rust-orphans"&gt;some more extensive backstory&lt;/a&gt; behind&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;Bear in mind, however, that this isn&amp;#8217;t the unequivocally &amp;#8220;correct&amp;#8221; solution.
&lt;a href="hs-orphans"&gt;Some languages&lt;/a&gt; choose to allow this so-called &lt;em&gt;orphan&lt;/em&gt; case,
and try to resolve the potential ambiguities in various different ways.
It is a genuinely useful feature, too, as it makes easier it to glue together two unrelated libraries&lt;sup id="fnref:7"&gt;&lt;a class="footnote-ref" href="#fn:7" rel="footnote"&gt;7&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Thankfully for extension traits,
the coherence restriction doesn&amp;#8217;t apply as long as you keep those traits and their &lt;code&gt;impl&lt;/code&gt;s in the same&amp;nbsp;crate.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;This practice is often referred to as &lt;em&gt;monkeypatching&lt;/em&gt;, especially in Python and Ruby.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;In this case, a more common solution is to just open another &lt;code&gt;impl Foo&lt;/code&gt; block,
annotated with &lt;code&gt;#[cfg(test)]&lt;/code&gt; or similar.
An extension trait, however, makes it easier
to extract &lt;code&gt;Foo&lt;/code&gt; into a separate crate along with some handy, test-only &lt;span class="caps"&gt;API&lt;/span&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;Note that this is &lt;em&gt;not&lt;/em&gt; the same as the unstable (as of 1.18) &lt;code&gt;Option&lt;/code&gt; methods
guarded behind &lt;a href="https://github.com/rust-lang/rust/issues/39288"&gt;the &lt;code&gt;options_entry&lt;/code&gt; feature gate&lt;/a&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:4"&gt;
&lt;p&gt;My own convention is to call those traits &lt;code&gt;FooExt&lt;/code&gt;
if they are meant to enhance the interface of type &lt;code&gt;Foo&lt;/code&gt;.
The other practice is to mirror the name of the crate that the trait is packaged in;
both &lt;code&gt;Itertools&lt;/code&gt; and &lt;code&gt;UnicodeNormalization&lt;/code&gt; are examples of this style.&amp;#160;&lt;a class="footnote-backref" href="#fnref:4" rev="footnote" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:5"&gt;
&lt;p&gt;Standard library (&lt;code&gt;std&lt;/code&gt; or &lt;code&gt;core&lt;/code&gt; namespaces) counts as external crate for this purpose.&amp;#160;&lt;a class="footnote-backref" href="#fnref:5" rev="footnote" title="Jump back to footnote 5 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:6"&gt;
&lt;p&gt;Or throw an error. However, trait &lt;code&gt;impl&lt;/code&gt;s are always imported implicitly,
so this could essentially prevent some combination of different modules/libraries in the ecosystem from being used together,
and generally create an unfathomable mess.&amp;#160;&lt;a class="footnote-backref" href="#fnref:6" rev="footnote" title="Jump back to footnote 6 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:7"&gt;
&lt;p&gt;The usual workaround for coherence/orphan rules in Rust involves creating a wrapper
around the external type in order to make it &amp;#8220;local&amp;#8221;, and therefore allow external trait &lt;code&gt;impl&lt;/code&gt;s for it.
This is called &lt;a href="https://github.com/rust-unofficial/patterns/blob/master/patterns/newtype.md"&gt;the &lt;em&gt;newtype&lt;/em&gt; pattern&lt;/a&gt;
and there are &lt;a href="https://docs.rs/newtype_derive"&gt;some crates&lt;/a&gt; to support it.&amp;#160;&lt;a class="footnote-backref" href="#fnref:7" rev="footnote" title="Jump back to footnote 7 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="Rust"></category><category term="C#"></category><category term="methods"></category><category term="extension methods"></category><category term="traits"></category></entry><entry><title>Rust as a gateway drug toÂ Haskell</title><link href="http://xion.io/post/programming/rust-into-haskell.html" rel="alternate"></link><updated>2017-06-13T22:56:00+00:00</updated><author><name>Karol Kuczmarski</name></author><id>tag:xion.io,2017-06-13:post/programming/rust-into-haskell.html</id><summary type="html">&lt;p&gt;For work-related reasons,
I had to recently get up to speed on programming in &lt;a href="https://www.haskell.org/"&gt;Haskell&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Before that, I had very little actual experience with the language,
clocking probably at less than a thousand lines of working code over a couple of years.
Nothing impressive either:
some &lt;a href="https://gist.github.com/Xion/b8fdb6a896264915ad85"&gt;wrapper script&lt;/a&gt; here,
some &lt;a href="https://gist.github.com/Xion/1525222"&gt;experimental rewrite&lt;/a&gt;&amp;nbsp;there&amp;#8230;&lt;/p&gt;
&lt;p&gt;These days, I heard, there are a few resources for learning Haskell&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;
that don&amp;#8217;t require having a PhD in category theory&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;.
They may be quite helpful when your exposure to the functional programming is limited.
In my case, however, the one thing that &lt;em&gt;really&lt;/em&gt; enabled me to become (somewhat) productive
was not even related to Haskell at&amp;nbsp;all.&lt;/p&gt;
&lt;p&gt;It was &lt;a href="http://rust-lang.org/"&gt;Rust&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In theory, this shouldn&amp;#8217;t really make much of a sense.
If you compare both languages by putting checkmarks in a feature chart,
you won&amp;#8217;t find them to have much in&amp;nbsp;common.&lt;/p&gt;
&lt;p&gt;Some of the obvious differences&amp;nbsp;include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;predominantly functional vs. mostly&amp;nbsp;imperative&lt;/li&gt;
&lt;li&gt;garbage collection vs. explicit memory&amp;nbsp;management&lt;/li&gt;
&lt;li&gt;lazy vs. eager&amp;nbsp;evaluation&lt;/li&gt;
&lt;li&gt;rich runtime&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt; vs. almost no&amp;nbsp;runtime&lt;/li&gt;
&lt;li&gt;global vs. localized type&amp;nbsp;inference&lt;/li&gt;
&lt;li&gt;indentation vs.&amp;nbsp;braces&lt;/li&gt;
&lt;li&gt;two decades (!) vs. barely two years since&amp;nbsp;release&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Setting aside syntax, most of those differences are pretty&amp;nbsp;significant.&lt;/p&gt;
&lt;p&gt;You probably wouldn&amp;#8217;t use Haskell for embedded programming, for instance,
both for performance (&lt;span class="caps"&gt;GC&lt;/span&gt;) and memory usage reasons (laziness).
Similarly, Rust&amp;#8217;s ownership system can be too much of a hassle for high level code
that isn&amp;#8217;t subject to real time&amp;nbsp;requirements.&lt;/p&gt;
&lt;p&gt;But if you look a little deeper,
beyond just the surface descriptions of both languages,
you can find plenty of &lt;em&gt;concepts&lt;/em&gt; they&amp;nbsp;share.&lt;/p&gt;
&lt;h4&gt;Traits: they are typeclasses,&amp;nbsp;essentially&lt;/h4&gt;
&lt;p&gt;Take Haskell&amp;#8217;s typeclasses, for example &amp;#8212;
the cornerstone of its rich and expressive type&amp;nbsp;system.&lt;/p&gt;
&lt;p&gt;A &lt;a href="https://en.wikipedia.org/wiki/Type_class"&gt;&lt;em&gt;typeclass&lt;/em&gt;&lt;/a&gt; is, simply speaking,
a list of capabilities:
it defines what a type can &lt;em&gt;do&lt;/em&gt;.
There exist analogs of typeclasses in most programming languages,
but they are normally called interfaces or protocols,
and remain closely tied to the object-oriented&amp;nbsp;paradigm.&lt;/p&gt;
&lt;p&gt;Not so in&amp;nbsp;Haskell.&lt;/p&gt;
&lt;p&gt;Or in Rust for that matter, where the equivalent concept exists under the name of &lt;em&gt;traits&lt;/em&gt;.
What typeclasses and traits have in common is that
they&amp;#8217;re used for &lt;em&gt;all kinds of polymorphism&lt;/em&gt; in their respective&amp;nbsp;languages.&lt;/p&gt;
&lt;h5&gt;Generics&lt;/h5&gt;
&lt;p&gt;For example, let&amp;#8217;s consider &lt;em&gt;parametrized types&lt;/em&gt;,
sometimes also referred to as templates (C++) or generics&amp;nbsp;(C#).&lt;/p&gt;
&lt;p&gt;In many cases, a generic function or type requires its type arguments
to exhibit certain characteristics.
In some languages (like the legacy C++), this is checked only implicitly:
as long as the template type-checks after its expansion, everything is&amp;nbsp;okay:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="nl"&gt;b&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;Foo&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// OK&lt;/span&gt;
    &lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;  &lt;span class="c1"&gt;// ERROR, no operator `&amp;gt;`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;More advanced type systems, however, allow to specify the generic constraints &lt;em&gt;explicitly&lt;/em&gt;.
This is the case in&amp;nbsp;Rust:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Ord&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;as well as in&amp;nbsp;Haskell:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;min&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Ord&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="nf"&gt;min&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="kr"&gt;then&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="kr"&gt;else&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In both languages, the notion of a type supporting certain operations (like comparison/ordering)
is represented as its own, first-class concept:
a &lt;em&gt;trait&lt;/em&gt; (Rust) or a &lt;em&gt;typeclass&lt;/em&gt; (Haskell).
Since the compiler is aware of those constraints,
it can verify that the &lt;code&gt;min&lt;/code&gt; function is used correctly even before
it tries to generate code for a specific substitution of &lt;code&gt;T&lt;/code&gt;.&lt;/p&gt;
&lt;h5&gt;Dynamic&amp;nbsp;dispatch&lt;/h5&gt;
&lt;p&gt;On the other hand, let&amp;#8217;s look at &lt;em&gt;runtime polymorphism&lt;/em&gt;:
the one that &lt;span class="caps"&gt;OO&lt;/span&gt; languages implement
through abstract base classes and virtual methods.
It&amp;#8217;s the tool of choice if you need a container of objects of different types,
which nevertheless all expose the same&amp;nbsp;interface.&lt;/p&gt;
&lt;p&gt;To offer it, Rust has &lt;a href="https://doc.rust-lang.org/book/first-edition/trait-objects.html"&gt;&lt;em&gt;trait objects&lt;/em&gt;&lt;/a&gt;,
and they work pretty much exactly like base class pointers/references from Java, C++, or&amp;nbsp;C#.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// Trait definition&lt;/span&gt;
&lt;span class="k"&gt;trait&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Draw&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;draw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// Data type implementing the trait&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Circle&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;radius&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;impl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Draw&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Circle&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;draw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cm"&gt;/* omitted */&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// Usage&lt;/span&gt;
&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;draw_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Box&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Draw&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;draw&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The Haskell analogue is, in turn, based on typeclasses,
though the specifics can be a little bit&amp;nbsp;trickier:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;{-# LANGUAGE ExistentialQuantification #-}&lt;/span&gt;

&lt;span class="c1"&gt;-- Typeclass definition&lt;/span&gt;
&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="kt"&gt;Draw&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="kr"&gt;where&lt;/span&gt;
    &lt;span class="n"&gt;draw&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;IO&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;-- Polymorphic wrapper type&lt;/span&gt;
&lt;span class="kr"&gt;data&lt;/span&gt; &lt;span class="kt"&gt;Draw&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;forall&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="kt"&gt;Draw&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Draw&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="kr"&gt;instance&lt;/span&gt; &lt;span class="kt"&gt;Draw&lt;/span&gt; &lt;span class="kt"&gt;Draw&amp;#39;&lt;/span&gt; &lt;span class="kr"&gt;where&lt;/span&gt;
    &lt;span class="n"&gt;draw&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Draw&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;draw&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;

&lt;span class="c1"&gt;-- Data types instantiating (&amp;quot;implementing&amp;quot;) the typeclass&lt;/span&gt;
&lt;span class="kr"&gt;data&lt;/span&gt; &lt;span class="kt"&gt;Circle&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Circle&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;
&lt;span class="kr"&gt;instance&lt;/span&gt; &lt;span class="kt"&gt;Draw&lt;/span&gt; &lt;span class="kt"&gt;Circle&lt;/span&gt; &lt;span class="kr"&gt;where&lt;/span&gt; &lt;span class="n"&gt;draw&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;undefined&lt;/span&gt; &lt;span class="c1"&gt;-- omitted&lt;/span&gt;
&lt;span class="kr"&gt;data&lt;/span&gt; &lt;span class="kt"&gt;Square&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Square&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;
&lt;span class="kr"&gt;instance&lt;/span&gt; &lt;span class="kt"&gt;Draw&lt;/span&gt; &lt;span class="kt"&gt;Square&lt;/span&gt; &lt;span class="kr"&gt;where&lt;/span&gt; &lt;span class="n"&gt;draw&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;undefined&lt;/span&gt; &lt;span class="c1"&gt;-- omitted&lt;/span&gt;

&lt;span class="c1"&gt;-- Usage&lt;/span&gt;
&lt;span class="nf"&gt;drawAll&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Draw&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;IO&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;
&lt;span class="nf"&gt;drawAll&lt;/span&gt; &lt;span class="n"&gt;ds&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mapM_&lt;/span&gt; &lt;span class="n"&gt;draw&lt;/span&gt; &lt;span class="n"&gt;ds&lt;/span&gt;

&lt;span class="nf"&gt;main&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
    &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;shapes&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Draw&amp;#39;&lt;/span&gt; &lt;span class="kt"&gt;Circle&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Draw&amp;#39;&lt;/span&gt; &lt;span class="kt"&gt;Square&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;drawAll&lt;/span&gt; &lt;span class="n"&gt;shapes&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here, the generic function can use typeclass constraints directly (&lt;code&gt;(Draw a) =&amp;gt; ...&lt;/code&gt;),
but creating a container of different object types requires a polymorphic wrapper&lt;sup id="fnref:4"&gt;&lt;a class="footnote-ref" href="#fn:4" rel="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h5&gt;Differences&lt;/h5&gt;
&lt;p&gt;All those similarities do not mean that
Rust traits and Haskell typeclasses are one and the same.
There are, in fact, quite a few differences, owing mostly to the fact that
Haskell&amp;#8217;s type system is more&amp;nbsp;expressive:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Rust lacks &lt;a href="https://en.wikipedia.org/wiki/Kind_(type_theory)#Kinds_in_Haskell"&gt;&lt;em&gt;higher kinded types&lt;/em&gt;&lt;/a&gt;,
  making certain abstractions impossible to encode as traits.
  It &lt;em&gt;is&lt;/em&gt; possible, however, to implement a trait for infinitely many types at once
  if the &lt;code&gt;impl&lt;/code&gt;ementation itself is generic
  (like &lt;a href="https://github.com/Xion/rofld/blob/2a9e427707cc93c716e011e99b0127f19cd770a5/src/lib/resources/mod.rs#L45"&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When defining a trait in Rust, you can ask implementors to provide some auxiliary,
  &lt;a href="https://doc.rust-lang.org/book/first-edition/associated-types.html"&gt;associated types&lt;/a&gt;
  in addition to just methods&lt;sup id="fnref:5"&gt;&lt;a class="footnote-ref" href="#fn:5" rel="footnote"&gt;5&lt;/a&gt;&lt;/sup&gt;.
  A similar mechanism in Haskell is expanded into &lt;a href="https://wiki.haskell.org/GHC/Type_families"&gt;type families&lt;/a&gt;,
  and requires enabling a &lt;a href="https://ocharles.org.uk/blog/posts/2014-12-12-type-families.html"&gt;&lt;span class="caps"&gt;GHC&lt;/span&gt; extension&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;While typeclasses in Haskell can be implemented for multiple types simultaneously
  via a &lt;a href="https://wiki.haskell.org/Multi-parameter_type_class"&gt;&lt;span class="caps"&gt;GHC&lt;/span&gt; extension&lt;/a&gt;,
  Rust&amp;#8217;s take on this feature is to make &lt;em&gt;traits themselves&lt;/em&gt; generic (e.g. &lt;code&gt;trait Foo&amp;lt;T&amp;gt;&lt;/code&gt;).
  The end result is roughly similar;
  however, the &amp;#8220;main implementing type&amp;#8221; (one after &lt;code&gt;for&lt;/code&gt; in &lt;code&gt;impl ... for ...&lt;/code&gt;)
  is still a method receiver (&lt;code&gt;self&lt;/code&gt;), just like in &lt;span class="caps"&gt;OO&lt;/span&gt;&amp;nbsp;languages.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Rust enforces &lt;em&gt;coherence rules&lt;/em&gt; on trait implementations.
  The topic is actually
  &lt;a href="http://smallcultfollowing.com/babysteps/blog/2015/01/14/little-orphan-impls/"&gt;rather complicated&lt;/a&gt;,
  but the gist is about local (current package) vs. remote (other packages / standard library)
  traits and types.&lt;br&gt;
  Without too much detail, coherence demands that there be a local type or trait
  somewhere in the &lt;code&gt;impl ... for ...&lt;/code&gt; construct.
  Haskell doesn&amp;#8217;t have this limitation,
  although it is recommended &lt;a href="https://wiki.haskell.org/Orphan_instance"&gt;not to take advantage of this&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;The&amp;nbsp;M-word&lt;/h4&gt;
&lt;p&gt;Another area of overlap between Haskell and Rust exists
in the &lt;em&gt;data model&lt;/em&gt; utilized by those languages.
Both are taking heavy advantage of &lt;a href="https://en.wikipedia.org/wiki/Algebraic_data_type"&gt;&lt;em&gt;algebraic data types&lt;/em&gt; (&lt;span class="caps"&gt;ADT&lt;/span&gt;)&lt;/a&gt;,
including the ability to define both &lt;em&gt;product types&lt;/em&gt; (&amp;#8220;regular&amp;#8221; structs and records)
as well as &lt;em&gt;sum types&lt;/em&gt; (tagged&amp;nbsp;unions).&lt;/p&gt;
&lt;h5&gt;&lt;code&gt;Maybe&lt;/code&gt; you&amp;#8217;d like &lt;code&gt;Some(T)&lt;/code&gt;?&lt;/h5&gt;
&lt;p&gt;Even more interestingly,
code in both languages makes extensive use of the two most basic&amp;nbsp;ADTs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Option&lt;/code&gt; (Rust) or &lt;code&gt;Maybe&lt;/code&gt; (Haskell) &amp;#8212;
  for denoting a presence or absence of a&amp;nbsp;value&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Result&lt;/code&gt; (Rust) or &lt;code&gt;Either&lt;/code&gt; (Haskell) &amp;#8212;
  for representing the alternative of &amp;#8220;correct&amp;#8221; and &amp;#8220;erroneous&amp;#8221;&amp;nbsp;value&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These aren&amp;#8217;t just simple datatypes.
They are deeply interwoven into the basic semantics of both languages,
not to mention their standard libraries and community-provided&amp;nbsp;packages.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;Option&lt;/code&gt;/&lt;code&gt;Maybe&lt;/code&gt; type, for example,
is the alternative to &lt;em&gt;nullable references&lt;/em&gt;:
something that&amp;#8217;s been
&lt;a href="https://www.lucidchart.com/techblog/2015/08/31/the-worst-mistake-of-computer-science/"&gt;heavily criticized&lt;/a&gt;
for making programs prone to unexpected &lt;code&gt;NullReferenceException&lt;/code&gt;s.
The idea behind both of those types is to make actual values impossible to confuse with &lt;code&gt;null&lt;/code&gt;s
by encoding the potential nullability into the type&amp;nbsp;system:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;enum&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;None&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;!-- --&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kr"&gt;data&lt;/span&gt; &lt;span class="kt"&gt;Maybe&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Just&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;Nothing&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;Result&lt;/code&gt; and &lt;code&gt;Either&lt;/code&gt;, on the other hand,
can be thought as an extension of this idea.
They also represent two possibilities,
but the &amp;#8220;wrong&amp;#8221; one isn&amp;#8217;t just &lt;code&gt;None&lt;/code&gt; or &lt;code&gt;Nothing&lt;/code&gt;
&amp;#8212; it has some more information associated with&amp;nbsp;it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;enum&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;E&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Err&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;E&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;!-- --&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kr"&gt;data&lt;/span&gt; &lt;span class="kt"&gt;Either&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Left&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;Right&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This dichotomy between the &lt;code&gt;Ok&lt;/code&gt; (or &lt;code&gt;Right&lt;/code&gt;) value and the &lt;code&gt;Err&lt;/code&gt;or value (or the &lt;code&gt;Left&lt;/code&gt; one)
makes it a great vehicle for carrying results of functions that can &lt;em&gt;fail&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;In Rust, this replaces the traditional error handling mechanisms based on exceptions.
In Haskell, the exceptions are present and sometimes necessary,
but &lt;code&gt;Either&lt;/code&gt; is nevertheless the preferred approach to dealing with&amp;nbsp;errors.&lt;/p&gt;
&lt;h5&gt;What to &lt;code&gt;do&lt;/code&gt;?&lt;/h5&gt;
&lt;p&gt;One thing that Haskell does better is &lt;em&gt;composing&lt;/em&gt; those fallible functions
into bigger chunks of&amp;nbsp;logic.&lt;/p&gt;
&lt;p&gt;Relatively recently, Rust has added the &lt;a href="https://m4rw3r.github.io/rust-questionmark-operator"&gt;&lt;code&gt;?&lt;/code&gt; operator&lt;/a&gt;
as a replacement for the &lt;code&gt;try!&lt;/code&gt; macro.
This is now the preferred way of &lt;em&gt;error propagation&lt;/em&gt;,
allowing for a more concise composition of functions that return &lt;code&gt;Result&lt;/code&gt;s:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c-Doc"&gt;/// Read an integer from given file.&lt;/span&gt;
&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;int_from_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nb"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fs&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_to_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;map_err&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;ErrorKind&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;InvalidData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But Haskell had it for much longer,
and it&amp;#8217;s something of a hallmark of the language and functional programming in general
&amp;#8212; even though it looks thoroughly &lt;em&gt;imperative&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;intFromFile&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;FilePath&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;IO&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;
&lt;span class="nf"&gt;intFromFile&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;readFile&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;
    &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;readIO&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;
    &lt;span class="n"&gt;return&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you haven&amp;#8217;t seen it before, this is of course a &lt;em&gt;monad&lt;/em&gt; &amp;#8212; the &lt;code&gt;IO&lt;/code&gt; monad, to be precise.
While discussing monads in detail is way outside of the scope of this article,
we can definitely notice some analogies with Rust.
The &lt;code&gt;do&lt;/code&gt; notation with &lt;code&gt;&amp;lt;-&lt;/code&gt; arrows is evidently similar to
how in Rust you&amp;#8217;d assign the result of a fallible operation after &amp;#8220;unpacking&amp;#8221; it with &lt;code&gt;?&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But of course,
there&amp;#8217;s plenty of different monads in Haskell: not just &lt;code&gt;IO&lt;/code&gt;,
but also &lt;code&gt;Either&lt;/code&gt;, &lt;code&gt;Maybe&lt;/code&gt;, &lt;code&gt;Reader&lt;/code&gt;, &lt;code&gt;Writer&lt;/code&gt;, &lt;code&gt;Cont&lt;/code&gt;, &lt;code&gt;STM&lt;/code&gt;, and many others.
In Rust (at least as of 1.19), the &lt;code&gt;?&lt;/code&gt; operator only works for &lt;code&gt;Result&lt;/code&gt; types,
although there is &lt;a href="https://github.com/rust-lang/rfcs/issues/1718"&gt;some talk&lt;/a&gt;
about extending it to &lt;code&gt;Option&lt;/code&gt; as well&lt;sup id="fnref:6"&gt;&lt;a class="footnote-ref" href="#fn:6" rel="footnote"&gt;6&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Eventually, we may see the language adopt some variant of the &lt;code&gt;do&lt;/code&gt; notation,
though the motivation for this will most likely come from
&lt;a href="https://github.com/alexcrichton/futures-await"&gt;asynchronous programming with &lt;code&gt;Future&lt;/code&gt;s&lt;/a&gt;
rather than plain &lt;code&gt;Result&lt;/code&gt;s.
General monads, however, require support for &lt;em&gt;higher kinded types&lt;/em&gt;
which &lt;a href="https://github.com/rust-lang/rfcs/issues/324"&gt;isn&amp;#8217;t coming anytime soon&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;A path through&amp;nbsp;Rust?&lt;/h4&gt;
&lt;p&gt;Now that we&amp;#8217;ve discussed those similarities,
the obvious question&amp;nbsp;arises.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Is learning Rust worthwhile
if your ultimate goal is getting proficient at functional programming in general,
or Haskell in&amp;nbsp;particular?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;My answer to that is actually pretty&amp;nbsp;straightforward.&lt;/p&gt;
&lt;p&gt;If &amp;#8220;getting to &lt;span class="caps"&gt;FP&lt;/span&gt;&amp;#8221; is your main goal, then Rust will &lt;em&gt;not&lt;/em&gt; help you very much.
Functional paradigm isn&amp;#8217;t the main idea behind the language &amp;#8212;
its shtick is mostly &lt;em&gt;memory safety&lt;/em&gt;, and zero-cost abstractions.
While it succeeds somewhat at being &amp;#8220;Haskell Lite&amp;#8221;,
it really strives to be &lt;em&gt;safer C++&lt;/em&gt;&lt;sup id="fnref:7"&gt;&lt;a class="footnote-ref" href="#fn:7" rel="footnote"&gt;7&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;But if, on the other hand, you regard &lt;span class="caps"&gt;FP&lt;/span&gt; mostly as a curiosity
that seems to be seeping into your favorite imperative language at an increasing rate,
Rust can be a good way to gain familiarity with this peculiar&amp;nbsp;beast.&lt;/p&gt;
&lt;p&gt;At the very least, you will learn the functional way of &lt;em&gt;modeling programs&lt;/em&gt;,
with lots of smart enums/unions and structs but without&amp;nbsp;inheritance.&lt;/p&gt;
&lt;p&gt;And the best part is: you will be so busy
&lt;a href="https://m-decoster.github.io//2017/01/16/fighting-borrowchk/"&gt;fighting the borrow checker&lt;/a&gt;
you won&amp;#8217;t even notice when it happens&amp;nbsp;;-)&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Just ask in &lt;code&gt;#haskell-beginners&lt;/code&gt; on Freenode if you&amp;#8217;re interested.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;Though ironically,
I found the &lt;a href="https://www.youtube.com/playlist?list=PLbgaMIhjbmEnaH_LTkxLI7FMa2HsnawM_"&gt;&lt;span class="caps"&gt;CT&lt;/span&gt; lectures by Bartosz Milewski&lt;/a&gt;
very helpful in developing the right intuitions, even though they&amp;#8217;re very abstract.&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;For example, Haskell has &lt;em&gt;green threads&lt;/em&gt; (created with &lt;code&gt;forkIO&lt;/code&gt;)
which are somewhat similar to goroutines from Go.
To get anything remotely similar in Rust, you need to use &lt;a href="http://tokio.rs"&gt;external libraries&lt;/a&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:4"&gt;
&lt;p&gt;Note that such containers aren&amp;#8217;t very idiomatic Haskell.
A more typical solution would be to just curry the &lt;code&gt;draw&lt;/code&gt; function,
implicitly putting the &lt;code&gt;Draw&lt;/code&gt; object inside its closure.&amp;#160;&lt;a class="footnote-backref" href="#fnref:4" rev="footnote" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:5"&gt;
&lt;p&gt;This mechanisms expands to
&lt;a href="https://doc.rust-lang.org/1.6.0/book/associated-constants.html"&gt;associated constants&lt;/a&gt;
in Rust 1.20.&amp;#160;&lt;a class="footnote-backref" href="#fnref:5" rev="footnote" title="Jump back to footnote 5 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:6"&gt;
&lt;p&gt;Those two types also have a form of &lt;em&gt;monadic bind&lt;/em&gt; (&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; in Haskell)
exposed as &lt;a href="https://doc.rust-lang.org/std/result/enum.Result.html#method.and_then"&gt;the &lt;code&gt;and_then&lt;/code&gt; method&lt;/a&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:6" rev="footnote" title="Jump back to footnote 6 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:7"&gt;
&lt;p&gt;If you want another language for easing into the concept of functional programming,
I&amp;#8217;ve heard that Scala fills that niche quite well.&amp;#160;&lt;a class="footnote-backref" href="#fnref:7" rev="footnote" title="Jump back to footnote 7 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="Rust"></category><category term="Haskell"></category><category term="traits"></category><category term="typeclasses"></category><category term="monads"></category><category term="ADTs"></category><category term="FP"></category></entry><entry><title>Long Live DynamicÂ Languages!</title><link href="http://xion.io/post/programming/long-live-dynamic-languages.html" rel="alternate"></link><updated>2017-05-24T19:07:00+00:00</updated><author><name>Karol Kuczmarski</name></author><id>tag:xion.io,2017-05-24:post/programming/long-live-dynamic-languages.html</id><summary type="html">&lt;p&gt;If you followed the few (or a dozen) of my recent posts,
you&amp;#8217;ve probably noticed a sizable bias in the choice of topics.
The vast majority were about &lt;a href="http://rust-lang.org"&gt;Rust&lt;/a&gt; &amp;#8212;
a native, bare metal, statically typed language with powerful compile time semantics
but little in the way of runtime&amp;nbsp;flexibility.&lt;/p&gt;
&lt;p&gt;Needless to say, Rust is radically different than (almost the exact opposite of) Python,
the other language that I&amp;#8217;m covering sometimes.
Considering this topical shift,
it would fair to assume that I, too, have subscribed to the whole Static Typingâ¢&amp;nbsp;trend.&lt;/p&gt;
&lt;p&gt;But that wouldn&amp;#8217;t be very&amp;nbsp;accurate.&lt;/p&gt;
&lt;p&gt;Don&amp;#8217;t get me wrong.
As far as fashion cycles in the software industry go,
the current trend towards static/compiled languages is difficult to disparage.
Strong in both hype &lt;em&gt;and&lt;/em&gt; merit,
it has given us some &lt;a href="http://rust-lang.org"&gt;really innovative&lt;/a&gt;
&lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; &lt;a href="https://www.typescriptlang.org/"&gt;promising&lt;/a&gt; solutions
(as well as some &lt;a href="http://golang.org"&gt;not-so-innovative&lt;/a&gt; ones)
that are poised to shape the future of programming for years, if not decades to come.
In many ways, it is also correcting mistakes of &lt;a href="https://www.java.com/en/"&gt;the previous generation&lt;/a&gt;:
excessive boilerplate, byzantine abstractions, and software&amp;nbsp;bloat.&lt;/p&gt;
&lt;p&gt;What about dynamic languages, then?
Are they slowly going the way of the&amp;nbsp;dodo?&lt;/p&gt;
&lt;h4&gt;Trigger warning: &lt;code&gt;TypeError&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Some programmers would certainly wish&amp;nbsp;so.&lt;/p&gt;
&lt;p&gt;Indeed, it&amp;#8217;s not hard at all to find
&lt;a href="https://arstechnica.com/information-technology/2014/06/why-do-dynamic-languages-make-it-difficult-to-maintain-large-codebases/"&gt;articles&lt;/a&gt;
and &lt;a href="https://www.reddit.com/r/rust/comments/6aqksm/rust_productivity_compared_to_other_languages/dhgp037/"&gt;opinions&lt;/a&gt;
about dynamic languages that are, well, less than&amp;nbsp;flattering.&lt;/p&gt;
&lt;p&gt;The common argument echoed in those accounts points to supposed unsuitability of Python et al.
for any large, multi-person project.
The reasoning can be summed up as &amp;#8220;good for small scripts and not much else&amp;#8221;.
Without statically checked types, the argument goes,
anything bigger than a quick hack or a prototype
shall inevitably become hairy and dangerous&amp;nbsp;monstrosity.&lt;/p&gt;
&lt;p&gt;And when that happens,
&lt;em&gt;a single typo&lt;/em&gt; can go unchecked and bring down the entire&amp;nbsp;system!&amp;#8230;&lt;/p&gt;
&lt;p&gt;At the very end of this spectrum of beliefs,
some pundits may eventually make the leap from languages to &lt;em&gt;people&lt;/em&gt;.
If dynamically typed languages (or &amp;#8220;untyped&amp;#8221; ones, as they&amp;#8217;re often mislabeled)
are letting even trivial bugs through,
then obviously anyone who wants to use them is
&lt;a href="https://danluu.com/images/empirical-pl/pl_godwin.png"&gt;dangerously irresponsible&lt;/a&gt;.
It must follow that all they &lt;em&gt;really&lt;/em&gt; want is to hack up some shoddy code,
&lt;em&gt;yolo&lt;/em&gt; it over to production, and let others worry about the&amp;nbsp;consequences.&lt;/p&gt;
&lt;h4&gt;Mind the&amp;nbsp;gap&lt;/h4&gt;
&lt;p&gt;It&amp;#8217;s likely unproductive to engage with someone who&amp;#8217;s that extreme.
If the rhetoric is dialed down, however, we can definitely find the edge of&amp;nbsp;reason.&lt;/p&gt;
&lt;p&gt;In my opinion, this fine line goes right through the &amp;#8220;good in small quantities&amp;#8221; argument.
I can certainly understand the apprehension towards large projects
that utilize dynamically typed languages throughout their codebases.
The prospect of such a project &lt;em&gt;is&lt;/em&gt; scary,
because it contains an additional element of uncertainty.
More so than with many other technologies,
you ought to &lt;em&gt;know what you&amp;#8217;re doing&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Some people (and teams) do. Others, not so&amp;nbsp;much.&lt;/p&gt;
&lt;p&gt;I would therefore refine the argument
so that it better reflects the strengths and weaknesses of dynamic languages.
They are perfectly suited for at least the following&amp;nbsp;cases:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;anyone writing small, standalone applications or&amp;nbsp;scripts&lt;/li&gt;
&lt;li&gt;&lt;em&gt;any project&lt;/em&gt; (large or small) with a well-functioning team of talented&amp;nbsp;individuals&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The sad reality of the software industry is the vast, gaping chasm of calamity and despair
that stretches between those two&amp;nbsp;scenarios.&lt;/p&gt;
&lt;p&gt;Within lies the bulk of commercial software projects,
consistently hamstrung by the usual suspects:
incompetent management, unclear and shifting requirements, under- or overstaffing,
ancient development practices, lack of coding standards, rampant bureaucracy,
&lt;a href="http://www.daedtech.com/how-developers-stop-learning-rise-of-the-expert-beginner/"&gt;inexperienced developers&lt;/a&gt;,
and so&amp;nbsp;on.&lt;/p&gt;
&lt;p&gt;In such an environment,
it becomes nigh impossible to capitalize on the strengths of dynamic languages.
Instead, the main priority is to protect from even further productivity losses,
which is what bog-standard languages like Java, C#, or Go tend to be pretty good at.
Rather than to move fast, the objective is to remain moving &lt;em&gt;at all&lt;/em&gt;.&lt;/p&gt;
&lt;h4&gt;Freedom of&amp;nbsp;choice&lt;/h4&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;But that&amp;#8217;s backwards&amp;#8221;, the usual retort goes.
&amp;#8220;Static typing and compilation checks are what &lt;em&gt;enables&lt;/em&gt; me to be&amp;nbsp;productive!&amp;#8221;&lt;/p&gt;
&lt;p&gt;I have no doubt that most people saying this do indeed believe
they&amp;#8217;re better off programming in static languages.
Regardless of what they think, however,
there exists &lt;a href="https://danluu.com/empirical-pl/"&gt;no conclusive evidence&lt;/a&gt;
to back up such claims as a universal&amp;nbsp;rule.&lt;/p&gt;
&lt;p&gt;This is of course the perennial problem with software engineering in general,
and the project management aspect of it in particular.
There is very little proper research on optimal and effective approaches to it,
which is why any of the so-called &amp;#8220;best practices&amp;#8221;
are quite likely to stem from &lt;a href="https://leanpub.com/leprechauns"&gt;unsubstantiated hearsay&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We can lament this state of affairs, of course.
But on the other hand, we can also find it &lt;em&gt;liberating&lt;/em&gt;.
In the absence of rigid prescriptions and judgments about productivity,
we are free to explore, within technical limitations,
what language works best for us, our team, and our&amp;nbsp;projects.&lt;/p&gt;
&lt;p&gt;Sometimes it&amp;#8217;ll be Go, Java, Rust, or even Haskell.&lt;br&gt;
A different situation may be best handled by Python, Ruby, or even&amp;nbsp;JavaScript.&lt;/p&gt;
&lt;p&gt;As the old adage goes, there is no silver bullet.
We should not try to polish static typing into&amp;nbsp;one.&lt;/p&gt;</summary><category term="Python"></category><category term="Rust"></category><category term="dynamic languages"></category><category term="dynamic typing"></category><category term="static typing"></category></entry></feed>